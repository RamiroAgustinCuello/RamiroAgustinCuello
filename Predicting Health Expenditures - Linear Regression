{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "mount_file_id": "1DGrGcOAdzs5-kT-6qJnZWytmM9nMQVyh",
      "authorship_tag": "ABX9TyOwtOw3dtSk4LW3MgRvbV4Z",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/RamiroAgustinCuello/RamiroAgustinCuello/blob/main/TP_Data_Science_Predicci%C3%B3n_de_gastos_m%C3%A9dicos_(Cuello_Ramiro).ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Inicio: carga y contexto.***\n"
      ],
      "metadata": {
        "id": "e88YqiylzVK1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Carga de DataSet."
      ],
      "metadata": {
        "id": "KgEu--Wczu4E"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fGg71S4Uy43-"
      },
      "outputs": [],
      "source": [
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df=pd.read_csv('/content/drive/MyDrive/insurance.csv')"
      ],
      "metadata": {
        "id": "I70Hu2K70NpJ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Diccionario."
      ],
      "metadata": {
        "id": "NBAJC53_03PL"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Significado de cada columna del DataSet:\n",
        "\n",
        "\n",
        "* \"Age\": Edad de el/la paciente. Dato cuantitativo discretizado.\n",
        "* \"Sex\": Género biológico de la persona. Dato cualitativo nominal de doble estado.\n",
        "* \"BMI\": Body Mass Index o Índice de Masa Corporal. Dato cuantitativo contínuo.\n",
        "* \"Children\": Cantidad de hijos que tiene -o no- el/la paciente. Dato cuantitativo discreto.\n",
        "* \"Smoker\": Refiere a si el/la paciente es -o no- fumador/a. Dato cualitativo nominal de doble estado.\n",
        "* \"Región\": Zona de residencia de el/la paciente. Dato cualitativo nominal multiestado.\n",
        "* \"Charges\": Gastos médicos de el/la paciente según sus hábitos e historiales médicos. Dato cuantitativo continuo.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "w6zpiObZ1BNI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Contexto del tópico elegido."
      ],
      "metadata": {
        "id": "gC1QG_tb4Dhl"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Desde el marco del US Census Bureau -Oficina del Censo de los Estados Unidos-, se intentará predecir los futuros gastos médicos de los pacientes, relacionando el impacto de su estilo de vida e historial médico en el posible dinero a gastar en áreas asociadas a la salud."
      ],
      "metadata": {
        "id": "RmW5q4tr4LDj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Exploración y visualización (EDA): Conociendo el DataSet.***"
      ],
      "metadata": {
        "id": "gmtS_98K5Po6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Sentencias de exploración incial."
      ],
      "metadata": {
        "id": "PSkOabdc6mhC"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "FhOKDggP5bYj",
        "outputId": "45b4743f-c85f-4d0f-ce85-fbd3ff9de6e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   age     sex     bmi  children smoker     region      charges\n",
              "0   19  female  27.900         0    yes  southwest  16884.92400\n",
              "1   18    male  33.770         1     no  southeast   1725.55230\n",
              "2   28    male  33.000         3     no  southeast   4449.46200\n",
              "3   33    male  22.705         0     no  northwest  21984.47061\n",
              "4   32    male  28.880         0     no  northwest   3866.85520"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ed55dafc-f71b-4816-818e-c2309d49ca85\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>19</td>\n",
              "      <td>female</td>\n",
              "      <td>27.900</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>southwest</td>\n",
              "      <td>16884.92400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>18</td>\n",
              "      <td>male</td>\n",
              "      <td>33.770</td>\n",
              "      <td>1</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1725.55230</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>28</td>\n",
              "      <td>male</td>\n",
              "      <td>33.000</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>4449.46200</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>33</td>\n",
              "      <td>male</td>\n",
              "      <td>22.705</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>21984.47061</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>32</td>\n",
              "      <td>male</td>\n",
              "      <td>28.880</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>3866.85520</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ed55dafc-f71b-4816-818e-c2309d49ca85')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ed55dafc-f71b-4816-818e-c2309d49ca85 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ed55dafc-f71b-4816-818e-c2309d49ca85');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0c39af4f-a523-44c2-8d99-124e84fb1b3f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0c39af4f-a523-44c2-8d99-124e84fb1b3f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0c39af4f-a523-44c2-8d99-124e84fb1b3f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 1338,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 14,\n        \"min\": 18,\n        \"max\": 64,\n        \"num_unique_values\": 47,\n        \"samples\": [\n          21,\n          45,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"male\",\n          \"female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 6.098186911679014,\n        \"min\": 15.96,\n        \"max\": 53.13,\n        \"num_unique_values\": 548,\n        \"samples\": [\n          23.18,\n          26.885\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 5,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          1\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"no\",\n          \"yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"southeast\",\n          \"northeast\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 12110.011236694001,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 1337,\n        \"samples\": [\n          8688.85885,\n          5708.867\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.tail()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "hOnj98I15yyW",
        "outputId": "02835db7-4d6d-42ac-b999-f78cf1c1abf4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      age     sex    bmi  children smoker     region     charges\n",
              "1333   50    male  30.97         3     no  northwest  10600.5483\n",
              "1334   18  female  31.92         0     no  northeast   2205.9808\n",
              "1335   18  female  36.85         0     no  southeast   1629.8335\n",
              "1336   21  female  25.80         0     no  southwest   2007.9450\n",
              "1337   61  female  29.07         0    yes  northwest  29141.3603"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-601b89a9-abe4-4b0c-9ba9-d53a431b54bc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1333</th>\n",
              "      <td>50</td>\n",
              "      <td>male</td>\n",
              "      <td>30.97</td>\n",
              "      <td>3</td>\n",
              "      <td>no</td>\n",
              "      <td>northwest</td>\n",
              "      <td>10600.5483</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1334</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>31.92</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>northeast</td>\n",
              "      <td>2205.9808</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1335</th>\n",
              "      <td>18</td>\n",
              "      <td>female</td>\n",
              "      <td>36.85</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southeast</td>\n",
              "      <td>1629.8335</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1336</th>\n",
              "      <td>21</td>\n",
              "      <td>female</td>\n",
              "      <td>25.80</td>\n",
              "      <td>0</td>\n",
              "      <td>no</td>\n",
              "      <td>southwest</td>\n",
              "      <td>2007.9450</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1337</th>\n",
              "      <td>61</td>\n",
              "      <td>female</td>\n",
              "      <td>29.07</td>\n",
              "      <td>0</td>\n",
              "      <td>yes</td>\n",
              "      <td>northwest</td>\n",
              "      <td>29141.3603</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-601b89a9-abe4-4b0c-9ba9-d53a431b54bc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-601b89a9-abe4-4b0c-9ba9-d53a431b54bc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-601b89a9-abe4-4b0c-9ba9-d53a431b54bc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-4e46bfca-1306-4453-93e6-08630c2081b4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-4e46bfca-1306-4453-93e6-08630c2081b4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-4e46bfca-1306-4453-93e6-08630c2081b4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 5,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 18,\n        \"max\": 61,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          18,\n          61,\n          50\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"female\",\n          \"male\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 4.055991863897165,\n        \"min\": 25.8,\n        \"max\": 36.85,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          31.92,\n          29.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 3,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"yes\",\n          \"no\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"northeast\",\n          \"southwest\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 11806.083521514944,\n        \"min\": 1629.8335,\n        \"max\": 29141.3603,\n        \"num_unique_values\": 5,\n        \"samples\": [\n          2205.9808,\n          29141.3603\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5VbsbaNe56h9",
        "outputId": "b3e05afa-c1a6-4d63-9d7a-8b931c3a8ee7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1338, 7)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "93-KhO0I6TXs",
        "outputId": "f1e84911-6dbe-4b13-9ddc-f09fd0315fcb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1338 entries, 0 to 1337\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       1338 non-null   int64  \n",
            " 1   sex       1338 non-null   object \n",
            " 2   bmi       1338 non-null   float64\n",
            " 3   children  1338 non-null   int64  \n",
            " 4   smoker    1338 non-null   object \n",
            " 5   region    1338 non-null   object \n",
            " 6   charges   1338 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(3)\n",
            "memory usage: 73.3+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.columns"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "J_SvWvuQ6daf",
        "outputId": "5cb13f6c-6490-4be5-f551-37ccbb19f094"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploración estadística de variables numéricas.\n",
        "\n",
        "Exploración numérica y exploración visual univariada.\n"
      ],
      "metadata": {
        "id": "LCDV8KK066DA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.describe()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 300
        },
        "id": "ydyfR3RE7e_5",
        "outputId": "f0865df4-9436-4e1c-e31f-81bde03c7232"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               age          bmi     children       charges\n",
              "count  1338.000000  1338.000000  1338.000000   1338.000000\n",
              "mean     39.207025    30.663397     1.094918  13270.422265\n",
              "std      14.049960     6.098187     1.205493  12110.011237\n",
              "min      18.000000    15.960000     0.000000   1121.873900\n",
              "25%      27.000000    26.296250     0.000000   4740.287150\n",
              "50%      39.000000    30.400000     1.000000   9382.033000\n",
              "75%      51.000000    34.693750     2.000000  16639.912515\n",
              "max      64.000000    53.130000     5.000000  63770.428010"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-38f8bd66-7561-48c0-a9ef-dcf5c8cc9096\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1338.000000</td>\n",
              "      <td>1338.000000</td>\n",
              "      <td>1338.000000</td>\n",
              "      <td>1338.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>39.207025</td>\n",
              "      <td>30.663397</td>\n",
              "      <td>1.094918</td>\n",
              "      <td>13270.422265</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>14.049960</td>\n",
              "      <td>6.098187</td>\n",
              "      <td>1.205493</td>\n",
              "      <td>12110.011237</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>18.000000</td>\n",
              "      <td>15.960000</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>1121.873900</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>27.000000</td>\n",
              "      <td>26.296250</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>4740.287150</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>39.000000</td>\n",
              "      <td>30.400000</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>9382.033000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>51.000000</td>\n",
              "      <td>34.693750</td>\n",
              "      <td>2.000000</td>\n",
              "      <td>16639.912515</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>64.000000</td>\n",
              "      <td>53.130000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>63770.428010</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38f8bd66-7561-48c0-a9ef-dcf5c8cc9096')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-38f8bd66-7561-48c0-a9ef-dcf5c8cc9096 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-38f8bd66-7561-48c0-a9ef-dcf5c8cc9096');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-8ef7bbc7-30a7-47b7-8494-7e1f8777bcda\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8ef7bbc7-30a7-47b7-8494-7e1f8777bcda')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-8ef7bbc7-30a7-47b7-8494-7e1f8777bcda button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 460.6106090399993,\n        \"min\": 14.049960379216154,\n        \"max\": 1338.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          39.20702541106129,\n          39.0,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 463.29524977918294,\n        \"min\": 6.098186911679014,\n        \"max\": 1338.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          30.66339686098655,\n          30.4,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 472.5368318870757,\n        \"min\": 0.0,\n        \"max\": 1338.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1338.0,\n          1.0949177877429,\n          2.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20381.922846226596,\n        \"min\": 1121.8739,\n        \"max\": 63770.42801,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          13270.422265141257,\n          9382.033,\n          1338.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gracias a esta sentencia, podemos comenzar a indagar estadísticamente a la muestra con la que trabajamos. A simple vista, se percibe una distribución normal en las variables, a excepción de la columna \"Charges\". Además, podemos apreciar que, en la variable \"BMI\" (Body Mass Index o Índice de Masa Corporal), todos los cuartiles se encuentran por encima del valor esperado como \"normopeso\", comprendiendo así a toda la muestra con una problemática de sobrepeso (hasta 29.9 kg/m2) u obesidad (mayor a 30 kg/m2)."
      ],
      "metadata": {
        "id": "fomc0qHFkbsd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.hist()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 504
        },
        "id": "DCp9_yKn7yeC",
        "outputId": "2e3d4abc-ed93-4e37-846b-d2a88e6fb481"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[<Axes: title={'center': 'age'}>, <Axes: title={'center': 'bmi'}>],\n",
              "       [<Axes: title={'center': 'children'}>,\n",
              "        <Axes: title={'center': 'charges'}>]], dtype=object)"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 4 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['age'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "FBrvDGIh-e5_",
        "outputId": "0ea59889-2919-4586-da84-b9cff80b2765"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='age'>"
            ]
          },
          "metadata": {},
          "execution_count": 18
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['bmi'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "IYoSwx4b-zv0",
        "outputId": "1c6a7662-9ca0-4831-fbd1-8858b83d5c42"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='bmi'>"
            ]
          },
          "metadata": {},
          "execution_count": 20
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['children'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "qHTKYmV9_RaG",
        "outputId": "da117a64-7274-4b64-8d9e-3177bbb2dd2f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='children'>"
            ]
          },
          "metadata": {},
          "execution_count": 21
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df['charges'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "egXdOLdO_iie",
        "outputId": "ae1891b4-dadb-4eef-c192-3a24db4ddeb0"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='charges'>"
            ]
          },
          "metadata": {},
          "execution_count": 22
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Gracias a los *boxplots* realizados, podemos detectar ciertos valores *outliers* en las categorías ***\"BMI\"*** y ***\"Charges\"***, que pueden distorsionar nuestro análisis y por lo tanto, impactar en el rendimiento del los futuros algoritmos de *machine learning* que apliquemos para la resolusión del objetivo principal del estudio. Para comprobar la existencia de dichos valores *outliers*, podemos además, detectarlos mediante el puntaje Z o el IQR."
      ],
      "metadata": {
        "id": "B6zp7y_7_2Z3"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "bmi_avg_charges = df.groupby('bmi')['charges'].mean().reset_index()\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(bmi_avg_charges['bmi'], bmi_avg_charges['charges'], color='blue', edgecolor='black', s=80, alpha=0.7)\n",
        "plt.title('Promedio de gastos en salud por valor de BMI', fontsize=16)\n",
        "plt.xlabel('BMI (Índice de Masa Corporal)', fontsize=14)\n",
        "plt.ylabel('Promedio de Charges (Gastos en Salud)', fontsize=14)\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 574
        },
        "id": "1eksD_LLEk0F",
        "outputId": "b18dee33-50e2-4bf6-acd4-90798abb0777"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAA2kAAAItCAYAAACjNjJoAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdeVxUVf8H8M8wDLsDggjKIrhvuOWGmlsqJrnkgkvljtmTlJlK9itteyxMKzPLMnJJrURzecJSskxUNJVSXEolCFxARWFMtpnh/P6wGRkZYBiGmYH5vF+vXsm9Z+49c+5cuN8553yPRAghQERERERERFbBztIVICIiIiIiovsYpBEREREREVkRBmlERERERERWhEEaERERERGRFWGQRkREREREZEUYpBEREREREVkRBmlERERERERWhEEaERERERGRFWGQRkREREREZEUYpBFZQFBQECQSic5/jo6OCAwMxPjx45GYmGjpKlqlAwcOQCKRoH///jrb09PTIZFIEBQUZJF6WWtdiB40depUSCQSrF+/3iznK++eJePUxt8vmr936enpNX6uB/+uSiQS2NnZwd3dHd26dcPbb7+N/Px8va/t37+/9jUjR46s8DxxcXE657h8+bLOfs19NnXqVFO9NbJB9pauAJEt6927N5o3bw4AyM3NxYkTJ7B161bExcVh+fLlmDdvnoVrSGS8oKAg/P3330hLS6tVD5VEVLuFhYXB19cXAKBSqZCZmYkjR47gxIkT2LRpExITE+Hp6Vnu6/fs2YPs7Gz4+Pjo3R8bG1sj9SYqjUEakQXNnDlT55u2wsJCPP3009i4cSMWLlyIxx57DC1btrRcBWsJPz8/nD9/HjKZzNJVISIiC3vppZfK9N5euHABvXv3xrlz57B06VIsX75c72u7du2KEydOYOPGjViwYEGZ/ZmZmUhISEC3bt1w/Pjxmqg+EQAOdySyKk5OTli9ejVcXV2hVqvx7bffWrpKtYJMJkPr1q3RrFkzS1eFiIisUMuWLfH0008DAPbv319uuSeffBIODg5Yt26d3v3r169HSUkJpk+fXiP1JNJgkEZkZdzc3NCqVSsA0BnDrxn7DgDr1q1DaGgo3N3dy4z1//XXXxEREYHGjRvDwcEBDRs2xPDhw5GQkKD3fKXnqPz5558YP348GjZsCFdXV3Tr1g27du3Slj12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VZW2Nii7Y1pams5/qampeOyxx+Dl5YU333wTBw4cwPnz53HgwAG88cYb8PLywvDhw8ukxTdE79698eeff+psu3DhApo0aQLgXhIRX19f7N+/X7tfoVDg2LFjCA0NBQCEhoYiNzcXJ0+e1Jb56aefUFJSgh49emjLHDx4UGdsaEJCAlq1aqXNJBkaGqpzHk0ZzXmIiIiIiIhMzaCeNE2ApPHOO+/g2LFjOHXqlE5vVqtWrdC3b19MmzYNnTt3xrZt27Bw4cIqVeiFF15Ar169sHTpUkRERODXX3/FZ599pk2NL5FIMHfuXLz11lto0aIFgoOD8eqrr6Jx48YYNWoUgHs9b0OHDkVkZCTWrFkDpVKJOXPmYMKECWjcuDEAYNKkSXj99dcxY8YMREdH48yZM1i5ciXef/99bV2ef/559OvXDytWrEB4eDi+/vprnDhxQidNPxERERERkSkZ1JP2oNjYWEREROgEaKX5+fkhIiICa9eurfKxu3Xrhh07duCrr75C+/bt8eabb+KDDz7AE088oS2zcOFCREVFYdasWejWrRv++ecf/PDDD3ByctKW2bx5M1q3bo1HHnkEw4YNQ58+fXSCK3d3d+zbtw9paWl46KGH8OKLL2Lx4sU6a6n16tULW7ZswWeffYaOHTti27Zt2LlzJ9q3b1/l90VERERERGQIo7I7Xr58WScg0sfJyQmXL182qlKPPfYYHnvssXL3SyQSvPHGG3jjjTfKLePp6YktW7ZUeJ4OHTogMTGxwjLjxo3DuHHjKq4wERERERGRiRjVk+bv748dO3agsLBQ7/78/Hzs2LED/v7+1aocERERERGRrTEqSJs5cyb++usv9O7dG7t27UJOTg4AICcnBzt37kSfPn2Qnp6uXYCaiIiIiIiIDGPUcMcFCxbgwoULWLduHUaPHg0AsLOzQ0lJCQBACIFp06ZhwYIFpqspERERERGRDTAqSLOzs0NsbCwmT56MDRs24PTp08jLy4O7uzs6duyIp556Cv379zdxVYmIiIiIiOo+o4I0jX79+qFfv36mqgsREREREZHNM2pOGhEREREREdUMo3rSDh48aHDZvn37GnMKIiIiIiIim2RUkNa/f39IJBKDyqrVamNOQUREREREZJOMCtIWL16sN0jLy8tDcnIyDh48iPDwcHTt2rXaFSQiIiIiIrIlRgVpr732WoX7t23bhqlTp+L111835vBEREREREQ2q0YSh4wdOxYDBgzAokWLauLwREREREREdVaNZXds06YNkpKSaurwREREREREdVKNBWm//fYb7OyY4Z+IiIiIiKgqjJqTlpGRoXe7SqXClStXsH79evz0008YNWpUdepGRERERERkc4wK0oKCgipMwS+EQLNmzfD+++8bXTEiIiIiIiJbZFSQNnnyZL1Bmp2dHerXr49u3bph5MiRcHJyqnYFiYiIiIiIbIlRQdr69etNXA0iIiIiIiICajBxCBEREREREVUdgzQiIiIiIiIrYtBwx6ZNmxp1cIlEgtTUVKNeS0REREREZIsMCtJKSkoqzOZYHiFElV9DRERERERkywwK0tLT02u4GkRERERERARwThoREREREZFVYZBGRERERERkRYxaJ03j8uXL+Pnnn3H16lUUFRWV2S+RSPDqq69W5xREREREREQ2xeggbcGCBVi5ciXUarV2mxBCm2BE828GaURERERERIYzarjj2rVrsWLFCgwYMADbtm2DEAJTpkzBV199hdmzZ8Pe3h7jxo3DTz/9ZOr6EhERERER1WlG9aR99tlnCAoKwvfffw87u3txXlBQEMaPH4/x48cjIiICgwcPxrhx40xaWSIiIiIiorrOqJ60P/74A0OHDtUGaACgUqm0/+7Xrx/Cw8OxfPny6teQiIiIiIjIhhid3dHDw0P7b1dXV+Tk5Ojsb9WqFc6ePWt0xYiIiIiIiGyRUUGan58fLl++rP25WbNmOHbsmE6ZM2fOwNXVtXq1IyIiIiIisjFGBWm9e/fG0aNHtT+PHDkSv/32G55++mnEx8dj0aJF+P7779G3b1+TVZSIiIiIiMgWGJU45KmnnsLVq1fx999/o0mTJliwYAG+++47rF27Fp9//jmEEAgKCsK7775r6voSERERERHVaUYFaf3790f//v21P7u5ueHo0aPYtWsXUlNT0aRJEwwfPpzDHYmIiIiIiKrI6MWsHySTyTB27FhTHY6IiIiIiMgmmSxIU6lUSElJAQC0b98eMpnMVIcmIiIiIiKyGQYnDklLS8MXX3yBCxculNn33Xffwc/PD127dkXXrl3RqFEjbN261aQVJSIiIiIisgUGB2lr165FZGQkHB0ddbZfunQJERERuHHjBgIDA9GmTRvcvn0bTzzxBH777TeTV5iIiIiIiKguMzhIO3ToEDp16oQmTZrobF+5ciUKCwvx7LPPIi0tDWfOnMH27duhVqvx0UcfmbzCREREREREdVmVhjt27969zPYffvgBDg4OWLp0qXbbqFGj8PDDDyMxMdE0tSQiIiIiIrIRBgdpN27cQIMGDXS23bp1C6mpqejRowfq1auns69z5864cuWKaWpJRERERERkIwwO0mQyGXJycnS2nTx5EgDQtWvXMuW5RhoREREREVHVGRyktWzZEvv379fZtm/fPkgkEvTq1atM+atXr6JRo0bVryEREREREZENMThIGzNmDC5evIjZs2fj9OnT2LZtGz777DO4ublh6NChZcofPnwYzZs3N2lliYiIiIiI6jqDg7S5c+ciJCQEn332GTp37ozx48fjzp07eP3118sMbTxx4gQuXbqEwYMHm7zCREREREREdZm9oQVdXFxw+PBhvP/++zh69Ci8vLwwbtw4DB8+vEzZ5ORkjBw5EiNGjDBpZYmIiMh4ubm5SElJQUFBAZydnRESEgIPDw9LV4uIiB5gcJAGAG5ubnj11VcrLTdr1izMmjXL6EoRERGR6aSnp2Pr1jjExx/BzZsqqFSAvT3QoIE9wsN7ISJiHIKCgixdTSIi+leVgjQiIiKqXZKTkxEdvRQZGZ6Qy6ciIKA/7O3lUKkUyMk5gNjYeCQkzEdMzMvo0qWLpatLRESowpw0IiIiql3S09MRHb0Uly93QLNmq+DrOxIymTskEglkMnf4+o5Es2arcPlyB0RHL0V6erqlq0xERGCQRkREVGdt3RqHjAxPBAdHQyp11FtGKnVEcHA0MjI8ERe3zcw1JCIifRikERER1UG5ubmIjz8CuTy83ABNQyp1hFw+DPHxh5GXl2emGhIRUXkYpBEREdVBKSkpuHlTBS+v/gaV9/IagBs3VEhJSanZihERUaUYpBEREdVBBQUF/2ZxlBtU3t5eDrUayM/Pr+GaERFRZRikERER1UHOzs6wtwdUKoVB5VUqBaTSe+uiEhGRZVU7Bf/du3eRm5sLtVqtd39gYGB1T0FERERVFBISggYN7JGTcwC+viMrLZ+T8zO8ve0REhJihtoREVFFjA7SYmNjsWLFCvz555/llpFIJFCpVMaegoiIiIzk4eGB8PBeiI2Nh7f30AqTh6jVRVAo9iAiojfc3d3NWEsiItLHqOGOn3zyCSIjI3Hp0iX07dsXkyZNwuTJk8v899RTT1X52K+99hokEonOf61bt9buLywsxLPPPgsvLy+4ublhzJgxyM7O1jlGRkYGwsPD4eLigoYNG2LBggVlgsUDBw6gS5cucHR0RPPmzbF+/foydVm9ejWCgoLg5OSEHj164Ndff63y+yEiIrKUiIhxCAy8hbS0GKjVRXrLqNVFSEuLQWDgLYwbNxbAvcyQiYmJ2LdvHxITE5Gbm2vGWhMRkVE9aR988AEaNGiAQ4cOoWXLlqauE9q1a4cff/xR+7O9/f1qvvDCC4iPj0dcXBzc3d0xZ84cjB49GocPHwYAqNVqhIeHw9fXF0eOHMG1a9cwefJkyGQyLF26FACQlpaG8PBwzJ49G5s3b8b+/fsxc+ZMNGrUCGFhYQCAb775BvPmzcOaNWvQo0cPfPDBBwgLC8Off/6Jhg0bmvw9ExERmVpQUBBiYl5GdPRSpKZGQS4fBi+vAbC3l0OlUiAn52coFHsQGHgLMTEvAwCWLXsX8fFHcPOm6t/EI0CDBvYID++FiIhxCAoKsuybIiKyAUYFaX///TdmzpxZIwEacC8o8/X1LbM9Ly8PsbGx2LJlCwYOHAgAWLduHdq0aYOjR4+iZ8+e2LdvH86dO4cff/wRPj4+6NSpE958801ER0fjtddeg4ODA9asWYPg4GCsWLECANCmTRscOnQI77//vjZIe++99xAZGYlp06YBANasWYP4+Hh88cUXeOmll2rkfRMREZlaly5dsHbtcsTFbUN8/AZkZsZCrQakUsDb2x4REb0xbtxY3Lp1C5GR85GR4Qm5fCoCAvqXCuYOIDY2HgkJ8xET8zK6dOli6bdFRFSnGRWkNWrUqNxEIaZw8eJFNG7cGE5OTggNDcXbb7+NwMBAnDx5EkqlEoMGDdKWbd26NQIDA5GUlISePXsiKSkJISEh8PHx0ZYJCwvDM888g7Nnz6Jz585ISkrSOYamzNy5cwEAxcXFOHnyJBYtWqTdb2dnh0GDBiEpKancehcVFaGo6P5wEoXiXkYtpVIJpVJpVFtoXmfs68l4bHvLYdtbDtveMmq63f38/DB37vOYPn0azp49i4KCAjg7O6Ndu3aQy+XIyMjAK6+8ixs3OqF16xcglTr8+0oVHBxc4OIyDGr1IPz99/t45ZV3sWrVW3UmMRg/85bDtrcctr1lVKW9jQrSpkyZgvXr1+Pu3btwdXU15hDl6tGjB9avX49WrVrh2rVreP311/Hwww/jzJkzyMrKgoODAzw8PHRe4+Pjg6ysLABAVlaWToCm2a/ZV1EZhUKBgoIC3L59G2q1Wm+ZP/74o9y6v/3223j99dfLbN+3b1+1UxonJCRU6/VkPLa95bDtLYdtbxnmbPfCwkIcOnRI+/PTT0/4918/6n8BACAEQAjOnDmDM2fO1GT1zI6fecth21sO2968qrIOpVFB2iuvvIKzZ89i8ODBeOedd9ClSxe4ubkZc6gyHn30Ue2/O3TogB49eqBJkybYunUrnJ2dTXKOmrJo0SLMmzdP+7NCoUBAQACGDBkCudywxUQfpFQqkZCQgMGDB0Mmk5mqqmQAtr3lsO0th21vGZZs97y8PEyc+B/k5z8BH59hlZbPzo6Hq+sWfPXVJ2X+tuXl5eHcuXPanrq2bdtafbZIfuYth21vOWx7y9CMsjOEUUGao+O9NL5CCAwYMKDccqZIwe/h4YGWLVvi0qVLGDx4MIqLi5Gbm6vTm5adna2dw+br61smC6Mm+2PpMg9mhMzOzoZcLoezszOkUimkUqneMvrmymk4Ojpq26Y0mUxW7RvAFMcg47DtLYdtbzlse8uwRLufP38eV68WICCgP5TKys9dr94AZGbG4vz58+jTpw8AID09HVu3xtXqhCPGtn1ubi5SUlK0gWlISEiZET9UMf6+sRy2vXlVpa2NCtIefvhhSCQSY15aZf/88w9SU1Px1FNP4aGHHoJMJsP+/fsxZswYAMCff/6JjIwMhIaGAgBCQ0Px3//+F9evX9dmYUxISIBcLkfbtm21Zfbs2aNznoSEBO0xHBwc8NBDD2H//v0YNWoUAKCkpAT79+/HnDlzzPG2iYiIzKKgoODfoMqwER/29nKo1feH7SQnJyM6eqnNJRypC4EpEVkvo4K0AwcOmLga982fPx/Dhw9HkyZNcPXqVSxZsgRSqRQTJ06Eu7s7ZsyYgXnz5sHT0xNyuRxRUVEIDQ1Fz549AQBDhgxB27Zt8dRTT2HZsmXIysrCK6+8gmeffVbbyzV79mx89NFHWLhwIaZPn46ffvoJW7duRXx8vLYe8+bNw5QpU9C1a1d0794dH3zwAe7evavN9khERFQXODs7w94eUKkUkMkqH5qoUikglQIuLi5IT09HdPRSXL7cAc2aRessmC2TucPXdyS8vYciLS0G0dFLsXbt8joRuNhqYEpE5mNUkFaTLl++jIkTJyInJwfe3t7o06cPjh49Cm9vbwDA+++/Dzs7O4wZMwZFRUUICwvDxx9/rH29VCrFd999h2eeeQahoaFwdXXFlClT8MYbb2jLBAcHIz4+Hi+88AJWrlwJf39/fP7559r0+wAwfvx43LhxA4sXL0ZWVhY6deqEH374oUwyESIiotosJCQEDRrYIyfnAHx9R1ZaPifnZ3h72yMkJASffvoZMjI8ywRopUmljggOjkZqahTi4rZhwYL5pn4LVVZ6iKKTk1OVXmurgSkRmVe1grTi4mL8+OOP+OOPP3D37l28+uqrAO5ljFIoFGjQoAHs7OyqdMyvv/66wv1OTk5YvXo1Vq9eXW6ZJk2alBnO+KD+/fvjt99+q7DMnDlzOLyRiIjqNA8PD4SH90JsbDy8vYeWG2wBgFpdBIViDyIiekMIgfj4I5DLp1b4GuBeoCaXD0N8/AbMmhVpsWQi+oYourrKsGTJFKxc+SHGjh1TaUC1dWtcrQxMiah2qVoEVcru3bsRGBiI4cOHY/78+Xjttde0+06fPo1GjRpVGnARERHVFrm5uUhMTMS+ffuQmJiI3NxcS1fJZCIixiEw8BbS0mKgVhfpLaNWFyEtLQaBgbcwbtxYpKSk4OZNFby8+ht0Di+vAbhxQ4WUlBQT1txwycnJiIycj9jYi8jPn4qAgE1o0WI3/PzWAgA2bkxFZOR8JCcnl3uM3NzcfwPT8CoEpoeRl5dn0vdCRHWfUUHa4cOHMXbsWDg6OmLlypWYNGmSzv7u3bujefPm2L59u0kqSUREZCnp6elYtuxdjBw5DbNnL0NU1CrMnr0MI0dOw7Jl7yI9Pd3SVay2oKAgxMS8DH//00hNjUJW1k4olXkQQkCpzENW1k6kpkbB3/80YmJeRlBQULUTjpiT7hDFVfD1HQmZzB0SiQQy2b36Bwe/i8uXOyA6emm517S2BaZEVHsZNdzxzTffhIeHB06ePIkGDRogJyenTJmuXbvi2LFj1a4gERGRpdhSgoguXbpg7drliIvbhvj4DcjMjIVaDUilgLe3PSIiemPcuLHa4YDVSThiboYNUXSodIhibQpMiah2MypIO3bsGMaOHYsGDRqUWyYgIAC7du0yumJERESWZIsJIoKCgrBgwXzMmhWJlJQU5Ofnw8XFBSEhIWXmkVUn4Yg53R+iWP25c7UpMCWi2s2o4Y5FRUWQyyv+Fik3N7fKSUOIiKjuqm1zujS9L8HBlSeIyMjwRFzcNjPXsOa4u7ujT58+GDJkCPr06aM30Ycm4YhCEV/uPDYNTcKR8PDeZk8aYsohiqUDU0NYKjAlotrPqJ60pk2b4vjx4xWWSUpKQuvWrY2qFBER1R21cdFfU/a+1GUREeOQkDAfaWkx5QazDyYcMTdTDlE0NhOmLX0miMg0jOrqGjNmDA4fPox169bp3b98+XKcOXMG48ePr1bliIiodisvo15AwCbk509FbOzFSjPqWYKlEkQkJSXVmp5GwLiEI+ZWeoiiISobomhMJkwioqoyqidtwYIF2L59O2bOnIktW7agqOjeL6mFCxciKSkJR44cQadOnbjGGBGRDavNc7rMmSAiPT0d27ZtR4sWzTF37ge4e1dp9T2NpVU14Yi5mXrunCYwjY5eitTUKMjlw+DlNaBUQpmfoVDsQWDgLYsFpkRU+xkVpLm5uSExMRFz5szB1q1boVarAdzrQZNIJIiIiMDHH38MR8eKh4gQEVHdVZsX/TVXgghN9sjs7IZ4883m8PNbCyE8a132yKokHDG3mhiiaO2BKRHVfkYFaQBQv359bN68GR9++CGOHz+OW7duQS6Xo1u3bvDx8TFlHYmIqJap7XO6zJG5sHRPY8uWLwL4ETKZHEqlxOp7GsujSThibQybO1eMtLQVBg9RtObAlIhqv2qnX/Ty8sLQoUMxadIkPPbYYwzQiIio1i/6a47MhbrZIx30lqmr2SPNreK5c/fmqqWlLTBq7pwhmTCJiKqKOfKJiMjk6sKivzWZIOJ+T2N4FXoaDyMvL69K74Hu0wxRnDmzJVxdNyAz80lcujQCV65EAgCmTGmOtWuXW/WwUiKyHUYPdyQiIipPXVj0tyYTRGh6GgMC+htU3strADIzY5GSkmKVwwlrC31DFJ2cnHD79m0891wUZDKZpatYqdzcXKSkpKCgoADOzs4ICQmBh4eHpatlk3gtqCYxSCMiIpMzx5wuc6ipBBF1oaexNis9d06pVGLPnj0WrlHlauN6g3UVrwWZA4M0IiIyubq06G9NJIioCz2NZD6aLKAZGZ6Qy6ciIKB/qR7d2pMF1FxqsoeL14LMhUEaERHVCMMy6tWeRX9NmbmwrvQ0Us2rzesNmltN93DxWpA5MXEIERHViIoz6uUhK2snUlOjjMqoV9uZI3sk1Q26WUArXm/QlrOAJicnIzJyPmJjLyI/fyoCAjahRYvdCAjYhPz8qYiNvYjIyPlITk42+hy8FmROJg3SFAoFEhISkJiYCCGEKQ9NRES1UHkZ9TIzn4Sr6wbMnNnSZjPq6WaPLNZbpjb1NJLpMQuoYXR7uFbB13ckZDJ3SCT31xxs1mwVLl/ugOjopUhPT6/yOXgtyNyMCtLWrl2Lfv364fbt29ptp06dQuvWrTF06FD0798fDz/8MCc4ExGRdk7Xrl3r8emn0fjwwyh8+mk0du1ajwUL5ttUD1pppXsa09IWAACUSgV7Gkmrtq83aC7m6OHitSBzM2pO2pdffoni4mLUr19fu+3FF1/E9evXMW3aNGRnZ2PPnj345JNP8OKLL5qsskREVHuZck5XXaHpady+/VsAwJUrkcjPV1Y7eyTVDcwCWrn7PVxTq9DDtQGzZkVWafgwrwWZm1FB2oULFzBy5P2Jzjk5Ofj5558RGRmJNWvWAAB69uyJzZs3M0gjIqIaVdvXKgoKCsJzz0Vhz549+OCDuSgsLKx29kiqG5gFtHLmWnOQ14LMzaggLTc3F97e3tqfExMTAQCjR4/WbuvTpw+++OKLalaPiIhIv7q4VlFoaGitWFCZzINZQCtnrh4uXgsyN6PmpHl5eeHatWvan/fv3w+pVIrevXtrt90bU6+sfg2JiIgeYI5MbtYmNzcXiYmJ2LdvHxITE5Gbm2vpKlENYxbQypXu4TKEsT1cvBZkbkb1pHXo0AG7du3CCy+8ACcnJ2zZsgW9e/eGq6urtkx6ejoaNWpksooSEREBtrdWUV3sMSTD1bX1Bk3NnD1cvBbWo7YPczeEUUHawoULMWjQIHTs2FG7bd68edp/l5SU4NChQxg4cGD1a0hERFSKJpPbgwFaaZpMbqmpUYiL24YFC+abuZamkZycjOjopcjI8IRcPhUBAf1hby+HSqVATs4BxMbGIyFhPmJiXrbJZQxsgSYLaHT0UqSmRkEuHwYvrwGlPgc/Q6HYg8DAWzaZBVTTwxUbGw9v76EVJg/R9HBFRBjXw8VrYXm29KWVUUHagAEDsHv3bqxbtw4AMGHCBAwfPly7//Dhw2jcuLHOHDUiIqLqMlcmN2tgaz2GVD5NFtC4uG2Ij9+AzMxYqNVgFtB/mbOHi9fCcmztSyujgjQACA8PR3h4uN59Dz/8MH777TejK0VERKSPuTK5WQNb6jGkymnWG5w1KxIpKSnIz89nFtB/mbuHi9fC/GzxSyujgzQiIiJzs5W1imypx5CqhusN6meJHi5eC/OxxS+tqhWkbd68GevXr8fvv/8OhUIBuVyOzp07Y+rUqZg0aZKp6khERATAdtYqsqUeQ7rPFpIh1CT2cNVNtvqllVFBmlqtRkREBHbu3AkhBJycnNC4cWNkZ2fjxx9/xP79+7F9+3bExcXBzs6oLP9ERERl2MpaRbbSY0j32FIyBHNgD1fdYqtfWhkVQX344YfYsWMHevfujcOHDyM/Px9paWnIz8/HkSNH0KdPH+zcuROrVq0ydX2JiMiG2cpaReZa+4kszxbX/COqClv90sqoIG3Dhg1o2bIl9u/fj9DQUJ19PXv2xI8//oiWLVtqsz8SERGZSkTEOAQG3kJaWky5gVptX6uodI+hIWprj6Gt002GsAq+viMhk7lDIpFokyE0a7YKly93QHT0UqSnp1u6ykRmZ6tfWhkVpF24cAEjRoyATCbTu18mk2H48OG4cOFCtSpHRET0IE0mN3//00hNjUJW1k4olXkQQkCpzENW1k6kpkbB3/90rV2ryFZ6DG2dJhlCeWnjgfvJEDIyPBEXt83MNSSyPFv90sqoIM3BwQF3796tsMzdu3fh4OBgVKWIiIgqosnkNnNmS7i6bkBm5pO4dGkEMjOfhKvrBsyc2RJr1y6v1Wvl2EKPYVXl5uYiMTER+/btQ2JiInJzcy1dJaPdT4YQXoVkCIeRl5dnphoSWQdb/dLKqMQhnTt3xtatW/F///d/aNy4cZn9165dw9atW2v1H0ciIrJudT2Tm7nXfrJmdTGxhq0mQyAyhjkXLLcWRgVp8+bNw8iRI9G1a1e8+OKL6NevH3x8fJCdnY0DBw7gvffew61btzBv3jxT15eIiEhHXc7kZom1n6xNcnIyoqOXIiPDE3L5VAQE9C8VqB5AbGw8EhLmIybm5Vr15bCtJkMgMoYtfmllVJA2fPhwLF++HC+99BIWLlyos08IAXt7eyxfvhyPPfaYSSpJRERkq+p6j2FFdBNr6H57rkms4e09FGlpMYiOXoq1a5fXmoczW1nzj8hUbO1LK6MXs543bx5GjRqFzZs3l1nMetKkSWjatKkp60lERGTT6nKPYXk0iTUeDNBK0yTWSE2NQlzcNixYMN/MtTSOraz5R2RKtvSlldFBGgA0bdoUr776qqnqQkRERASgdGKNqVVIrLEBs2ZF1oqHNU0yhNjYeHh7D63wPWqSIURE1P5kCESmYAtfWhmV3XH69OnYvXt3hWW+++47TJ8+3ahKERERkW3TJNbw8upvUHkvrwG4cUOFlJSUmq2YCTGDZ+XqUkZPoqowqidt/fr1CAoKwogRI8otc+rUKWzYsAFffPGF0ZUjIiIi22QLiTVsMRmCoepiRk+iqqjWcMeKFBYWwt6+xg5PREREdZitJNawtWQIhqirGT2JqsLoKEoikejdLoRAZmYmvv/+e71rqBERERFVxpYSa9hSMoTK1OWMnkRVYfCcNDs7O0ilUkilUgDAa6+9pv259H/29vYIDg5GcnIyJkyYUGMVJyIiorpLk1hDoYgvd76WhiaxRnh47U6soUmGMGTIEPTp06dWvxdjaTJ6lrdgMXA/o2dGhifi4raZuYZE5mFwT1rfvn21vWcHDx5EYGCg3m8upFIpPD09MXDgQERGRpqsokRERGRbIiLGISFhPtLSYsp9aLf1xBp1SV3P6ElUFQYHaQcOHND+287ODtOmTcPixYtrok5ERERETKxhYzQZPQMC+htU3strADIzY5GSklLn07GT7TFqTlpJSYmp60FERERUBhNr2A5byOhJZCijE4eUlJTAzk53SltSUhK+++47ODk5Ydq0afD39692BYmIiMi2MbGGYXJzc5GSkoKCggI4OzsjJCQEHh4elq6WwWwloyeRIYwK0l544QV88sknyMrK0t7827Ztw4QJE7S9bKtWrUJycjIDNSIiIjIJTWIN0lVX1hSzpYyeRJUxOLtjaT///DMGDhyo8+3M4sWL4e7ujo0bN2LZsmW4ffs2li9fbqp6EhEREdEDkpOTERk5H7GxF5GfPxUBAZvQosVuBARsQn7+VMTGXkRk5HwkJydbuqqVssWMnkTlMSpIy8zMRIsWLbQ/p6Wl4Y8//sBzzz2HJ598EvPnz8ewYcPwww8/mKyiRERERHSf7ppiq+DrOxIymTskEol2TbFmzVbh8uUOiI5eivT0dEtXuVIREeMQGHgLaWkx5QZqzOhJtsCoIO3u3btwdXXV/vzLL79AIpHg0Ucf1W5r27YtLl++XP0aEhEREVEZdXFNMU1GT3//00hNjUJW1k4olXkQQkCpzENW1k6kpkbB3/80M3pSnWZUkNa4cWP8+eef2p9/+OEHuLm54aGHHtJuUygUcHSseI0LIiIiIqq6+2uKhVdhTbHDyMvLM1MNjafJ6DlzZku4um5AZuaTuHRpBDIzn4Sr6wbMnNkSa9cuR5cuXSxdVaIaY1TikH79+uGrr77CRx99BCcnJ3z77bcYNWoUpFKptkxqaiqThhARERHVgLq+phgzepKtMypI+7//+z/s3LkTzz//PIQQcHV1xWuvvabdf+fOHRw8eBBTp041UTWJiIiISMNW1hRjRk+yVUYFac2bN8e5c+ewfft2AMDw4cPRpEkT7f6LFy/i6aefxqRJk0xTSyIiIiLSqq1ripVey83JycmidSGyZkbNSQOARo0aYc6cOZgzZ45OgAbcG0v8/vvvo1u3btWq3DvvvAOJRIK5c+dqtxUWFuLZZ5+Fl5cX3NzcMGbMGGRnZ+u8LiMjA+Hh4XBxcUHDhg2xYMECqFQqnTIHDhxAly5d4OjoiObNm2P9+vVlzr969WoEBQXByckJPXr0wK+//lqt90NERERkCqXXFDOEpdcUS09Px7Jl72LkyGmYPXsZoqJWYe7cDwAAK1d+WCsyTxKZk9FBWk07fvw4Pv30U3To0EFn+wsvvID//e9/iIuLwy+//IKrV69i9OjR2v1qtRrh4eEoLi7GkSNHsGHDBqxfvx6LFy/WlklLS0N4eDgGDBiA33//HXPnzsXMmTOxd+9ebZlvvvkG8+bNw5IlS5CcnIyOHTsiLCwM169fr/k3T0RERFSB2rSmWHlrufn5rQUAbNyYWmvWciMyF6OGO2okJSXhxx9/xNWrV1FUVPYXhEQiQWxsbJWP+88//+CJJ57A2rVr8dZbb2m35+XlITY2Flu2bMHAgQMBAOvWrUObNm1w9OhR9OzZE/v27cO5c+fw448/wsfHB506dcKbb76J6OhovPbaa3BwcMCaNWsQHByMFStWAADatGmDQ4cO4f3330dYWBgA4L333kNkZCSmTZsGAFizZg3i4+PxxRdf4KWXXqryeyIiIrIVpYe0OTs7IyQkBB4eHpauVp0TETEOCQnzkZYWU24afkuvKaa7lptuHWWye/PpgoPfxYULKxAdvRRr1y5nWn0iGBmkqVQqTJw4Ed9++y2EEJBIJBBCaPdrfjY2SHv22WcRHh6OQYMG6QRpJ0+ehFKpxKBBg7TbWrdujcDAQCQlJaFnz55ISkpCSEgIfHx8tGXCwsLwzDPP4OzZs+jcuTOSkpJ0jqEpoxlWWVxcjJMnT2LRokXa/XZ2dhg0aBCSkpLKrXdRUZFOsKpQKAAASqUSSqWyyu2geW3p/5P5sO0th21vOWx7y6gr7Z6RkYEdO3Zi795jyMlR/ZvYAvDyskdYWA88/vgoBAYGWrqaOmpz2/v5+eHtt1/C4sUrcPnyC6hXbwg8PR+GvX09qFR3cOtWIu7c2Yfg4Nt4442X4OfnZ/b3uW3bdmRnN0TLli9CKrUDcP/8Mtm9fzs5SdCy5YtIS1uA7du/xXPPRZm1jraoNn/ua7OqtLdRQdqKFSuwfft2TJ8+Hf/5z3/QtWtXzJ07F+PHj8fBgwfxzjvvYNCgQYiJianysb/++mskJyfj+PHjZfZlZWXBwcGhzLdxPj4+yMrK0pYpHaBp9mv2VVRGoVCgoKAAt2/fhlqt1lvmjz/+KLfub7/9Nl5//fUy2/ft21ftiboJCQnVej0Zj21vOWx7y2HbW0ZdaPcWLZqjRYvmevedOXMGZ86cMXONDFOb2/7ppyeU+ulQqX9LANwbIXTlyhVcuXLFnNUCcO/z8OabzQH8WG6ZSZM0bX+vrnv27Kn5ihGA2v25r42qkl3VqCBt8+bNaN++PT7//HPtNg8PD/To0QM9evTAsGHD0L17dwwcOBBPP/20wcfNzMzE888/j4SEhFqZ8WfRokWYN2+e9meFQoGAgAAMGTIEcrlhKXIfpFQqkZCQgMGDB0Mmk5mqqmQAtr3lsO0th21vGbW93TMyMhAV9QquXm2HJk1egFTqUKaMWl2Mv/9+H40bn8WqVW9ZTY9abWn7vLw8nDt3TjuEtG3btmXmlykUCpw9e1Zbpl27dkY/f5hCUlIS5s79AH5+a7VDG0uTyZSYNCkBW7YMhlIpg1KpwJUrkfjgg7kIDQ21QI1tR2353Nc1mlF2hjAqSLt06RJmzpyp/Vkikeh037Vr1w7Dhw/HJ598UqUg7eTJk7h+/brOCvJqtRoHDx7ERx99hL1796K4uBi5ubk6vWnZ2dnw9fUFAPj6+pbJwqjJ/li6zIMZIbOzsyGXy+Hs7AypVAqpVKq3jOYY+jg6OsLRsex4cJlMVu0bwBTHIOOw7S2HbW85bHvLqK3tvn37t0hNrYdmzRagpMQRJSX6SsnQuPECpKZG4dtvd2DBgvnmrmaFrLXt09PTsXVrHOLjj+DmzftDSBs0sEd4eC9ERIzTzuHy8vJC3759LVvhUgoLC3H3rhJCeEKplJRb7l6AJoMQnsjPV6KwsNAqr0VdZK2f+7qqKm1tVHZHBwcHneF7bm5uZbIeNmnSBBcvXqzScR955BGkpKTg999/1/7XtWtXPPHEE9p/y2Qy7N+/X/uaP//8ExkZGdpvXEJDQ5GSkqJTn4SEBMjlcrRt21ZbpvQxNGU0x3BwcMBDDz2kU6akpAT79+/nNztERESl5ObmIj7+COTycL2JK0qTSh0hlw9DfPxh5OXlmamGtVd5WREDAjYhP38qYmMvWnVWxNJruRnCWtZyI7IGRvWkBQQEIDMzU/tz69atcfDgQW2yEAA4evQoPD09q3TcevXqoX379jrbXF1d4eXlpd0+Y8YMzJs3D56enpDL5YiKikJoaCh69uwJABgyZAjatm2Lp556CsuWLUNWVhZeeeUVPPvss9pertmzZ+Ojjz7CwoULMX36dPz000/YunUr4uPjteedN28epkyZgq5du6J79+744IMPcPfuXW22RyIiIgJSUlJw86YKAQH9DSrv5TUAmZmxSElJQZ8+fUxen7qSWbLirIju8PUdCW/voUhLi7HarIil13Lz9R1ZaXlLr+VGZE2MCtL69euHXbt2aYOy8ePHY/78+XjssccwbNgwHDp0CIcOHcL06dNNXV+8//77sLOzw5gxY1BUVISwsDB8/PHH2v1SqRTfffcdnnnmGYSGhsLV1RVTpkzBG2+8oS0THByM+Ph4vPDCC1i5ciX8/f3x+eefa9PvA8D48eNx48YNLF68GFlZWejUqRN++OGHMslEiMi61ZUHNiJrVVBQ8O8QPMPmPtnby6FWV20CvSGqMiywNti6NQ4ZGZ5lArTSpFJHBAdHIzU1CnFx26xuCKlmLbfY2Hh4ew+tsKdVs5ZbRIRl1nIjsjZGBWnTp0+HWq3GlStX4O/vj6ioKBw4cADfffcdvv/+ewBA9+7d8c4771S7ggcOHND52cnJCatXr8bq1avLfU2TJk0qzQzUv39//PbbbxWWmTNnDubMmWNwXYnIetS1BzYia1V6SJtMVvnDdU0MaUtOTkZ09FJkZHhCLp+KgID+sLeXQ6VSICfnAGJj45GQMB8xMS/rzHu3VveHkE6twhDSDZg1K9LqAhzD1nIrRlraCout5UZkjYyak9alSxd88skn8Pf3B3BvEtzu3bvx66+/4quvvsKRI0dw5MgReHl5mbSyRESGqO3zOIhqk9JD2gxh6iFtusMCV8HXdyRkMndIJBLtsMBmzVbh8uUOiI5eivT0dJOctyZphpB6efU3qLyX1wDcuKFCSkpKzVbMCEFBQYiJeRn+/qeRmhqFrKydUCrzIISAUnlvrlpa2gL4+59GTMzL/PKM6F9GBWnl6dq1K8aPH4+ePXvCzs6khyYiMog1PrDl5uYiMTER+/btQ2JiInJzc2v8nETmohnSplDEQ60uqrCsZkhbeLjphrRphgWW10sD3B8WmJHhibi4bSY5b02yliGkptKlSxesXbscM2e2hKvrBmRmPolLl0bgypVIAMCUKc2xdu3yWtHLSWQuRg13JCKyVtY0j4NDLslWGDakrQhpaTEmHdJWl4YFlmYNQ0hNLSgoCAsWzMesWZFISUlBfn4+nJyccPv2bTz3XBTTwBM9oErdXatWrcJ///tflJRaAGXlypVo2rRpmf+mTJli8soSEVXEmlKBc8gl2ZKKh7TlIStrJ1JTo0w+pK0uDQsszdJDSGuSu7s7+vTpgyFDhnBZI6IKGByk/frrr5g7dy6USqXOUMbc3Fykp6fj2rVr2v+uXr2KTZs24cSJEzVSaSIifazlgc0ah1wS1bTyhrRlZj4JV9cNmDmzpcmHtNW1YYEalh5CSkSWZ/Bwx82bN8PJyQlz584ts08ikaCgoED7s0KhQKNGjfDll1+ia9euJqkoEVFlrOWBzZqGXBKZk74hbS4uLggJCamRAKIuDgvUsNQQUiKyDgb3pB06dAgPP/ywQesLyeVyDBkyBImJidWpGxFRlZR+YDNETTywWdOQSzIOE71UX+khbX369KmxHp66PCzQUkNIicg6GNyTlpqain79+pXZLoSAEKLM9sDAwDJrnBER1aTSD2y+viMrLV8TD2yaIZcBAf0NKu/lNQCZmbFISUlBnz59TFYPqjomeql96vpiyZohpHFx2xAfvwGZmbFQqwGpFPD2tkdERG+MGzeWn0uiOsjgIC0/Px+urq5ltr/wwguYNm1ame316tWz+jHfRFS3WMMDm7UMuaSqqWuLIduSuj4s0NxDSInIOhg83LF+/frIzs4us93d3R1NmjQpsz07O5u/PIjI7CIixiEw8BbS0mLKnXBfkw9s1jDkkqqGiV5qN1sZFmiuIaREZB0MDtLatGmDgwcPGnzggwcPok2bNkZViojIWJZ+YKvLc2Tqqrq4GLKtsURmSSKimmTwcMdHH30UL7/8Mr766itMnDixwrJff/01Ll68iBkzZlS7gkREVWXJeRzWMOSSDFdXF0O2RRwWSER1icFB2uzZs7F8+XLMmjULKpUKTz31lN5ymzZtwjPPPANvb2/Mnj3bZBUlIqoKSz6w1fU5MnUJE73UPZphgUREtZnBQZq7uzu++eYbDB8+HFOnTsXixYvRr18/NG7cGABw9epV/PLLL8jIyICTkxO++eYbyOWGTZwnIqoplnhg0wy5jI5eitTUKMjlw+DlNaBUIoqfoVDsQWDgrVo9R8ba5ebmIiUlBQUFBXB2dkZISEiZZWSY6IWIiKyRwUEaAAwcOBCHDx/Gc889h0OHDmHjxo1lyvTp0wcffvghOnXqZKo6EhHVOkydbTlVSaVflxdDJiKi2qtKQRoAdOrUCQcPHsSlS5eQlJSErKwsAICPjw969eqF5s2bm7ySRES1EefImF9VU+lbw9p6RERED6pykKbRvHlzBmRERAbgHBnz0E2lrzsXUJNK39t7KNLSYhAdvRRr1y5HUFBQrUv0YsgwTiIiqt2MDtKIiIisiSaV/oMBWmmaVPqpqVGIi9uGBQvm15pEL1UZxklERLWbQeukzZ49G1euXDH6JF9//TU2b95s9OuJiIgqcj+VfngVUukfRl5ensXX1jNEcnIyIiPnIzb2IvLzpyIgYBNatNiNgIBNyM+fitjYi4iMnI/k5GSz142IiEzPoCDtf//7H5o3b45p06bh559/NujAV69exfLly9G2bVs88cQTKCgoqFZFiYiIyqNJpe/l1d+g8l5eA3DjhgopKSkArHsxZN1hnKvg6zsSMpk7JBKJdhhns2arcPlyB0RHL0V6errZ60hERKZl0HDHS5cuYdmyZVixYgU2btwIT09PdO/eHQ899BB8fHzg4eGBwsJC3Lp1C3/++SeOHTuG8+fPo6SkBH369MG6devQo0ePmn4vRERko0yRSt9aE70YO4yTiIhqL4OCNGdnZyxZsgTz5s3Dxo0bsW7dOuzduxfff/89AEAikQAAhBAAAE9PT0yZMgWzZ89Gt27daqjqRERE95gylb65Er2UTgDi5ORUbpl7wzinVmEY5wbMmhXJDKJERLVYlRKH1KtXD88++yyeffZZ5ObmIikpCZcvX0ZOTg6cnZ3h7e2NkJAQpiYmIiKzqk2p9PUlAHF1lWHJkilYufJDjB07RjvvTTOMMyCgv0HH9vIagMzMWKSkpDCjKBFRLWZ0dkcPDw88+uijpqwLERHZqOqmlffw8KgVqfTLW8dNIrkF4BA2bkzF3r3313EzxTBOIiKqfZiCn4iILMaUaeWtPZV+xeu43QvCgoPfxYULK7TruJlyGCcREdUeBmV3JCIiMjVTp5W39lT6mgQg5QWQACCVOiA4OBoZGZ6Ii9umM4zTEJYcxklERKbDII2IiMyuptLKW2sqfWPXcZNIJAgP7wWFIh5qdVGFr9MM4wwPN/8wTiIiMi0OdyQiIrOrybTy1phKvzoJQKx9GCcREZkee9KIiMisjO1VysvLq9J5NKn0hwwZgj59+li0d6k6CUCsfRgnERGZHnvSiIjIrGwxrXx1E4BohnHGxW1DfPwGZGbGQq0GpFLA29seERG9MW7cWAZoNai6GUiJiKqCQRoREZmVLaaVN8U6btY4jBOo+8GLKTOQEhEZyqgg7c6dO7hx4wYCAgIgk8m027/55hvs3r0bTk5OePbZZ80+MZuIiKyfLaaVN+U6bpphnJZmC8FLeevaqVQK5OQcQGxsPBIS7q9rR0RkKkbNSVu4cCE6duwIpVKp3fbJJ59g0qRJ+Oqrr7Bu3To8/PDD+OOPP0xWUSIiqhtsNa18RMQ4BAbeQlpaTLmZGtXq4lqRAMTUyydYo5rKQEpEZAijgrRffvkFgwYN0vlW85133oGfnx8OHjyIrVu3QgiBd99912QVJSKiukHTq2RraeUrTgCiAACkpS2w+gQgthK8GLaunaPOunZERKZiVJB27do1BAcHa38+f/48MjMz8dxzz6FPnz4YO3YsRowYgYMHD5qsokREVHcY1qtU99LKl7eO25UrkQCAKVOaW2Qdt6qoTvCSm5uLxMRE7Nu3D4mJicjNzTVTravGXBlIiYjKY9SctKKiIjg4OGh//uWXXyCRSDBkyBDttqZNm2L37t3VryHVKXV9gjkRGUbTqxQdvRSpqVGQy4fBy2tAqfk+P0Oh2IPAwFtW3atkDH0JQJycnHD79m0891yUzlxva3M/eJlaheBlA8LChuCHH/bWmvlrtpiBlIisi1FBmr+/P06fPq39+bvvvoOnpyc6dOig3ZaTkwM3N7fq15DqBFuYYE5EVWPraeVLJwBRKpXYs2ePhWtUOWOClwsX3sOMGfOgUDStNck3bDEDKRFZF6OCtEcffRSrV6/G/Pnz4eTkhB9++AGTJ0/WKXPhwgUEBgaapJJUuzE7FhGVx1rTypN+VQ1eiotvITv7KlSq0Wjf/k2d3jfN/DVv76FIS4tBdPRSrF273CqCclvMQEpE1sWoOWmLFi1CYGAg3nvvPSxduhQ+Pj544403tPuvX7+Ow4cPo2/fviarKNVOtjLBnIiqR9OrNGTIEPTp04cBmpUqHbwY4vLlTVAqW8HP74ValXzDVjOQEpH1MCpI8/X1xdmzZ7F7927s3r0b58+fh7+/v3b/zZs38e6772LWrFkmqyjVTsyORURUd1QleFEqc3Ht2j44Og6Au3uDCstaW/INW81ASkTWw6ggDbj3bdpjjz2Gxx57DHK57rCHtm3b4vnnn0fr1q2rXUGqvZgdi4iobqlK8JKbexLFxflo3HiQQclQvLwG4MYNFVJSUkxV3Wqx1QykRGQdjA7SAKC4uBh79uzBe++9hzfffFO7vbCwENevX0dJSUm1K0i1l2aCuZdXf4PKW9sfaCIiKsvQ4OXq1Q2wtwf8/FoYdFxrS75R8bp2ecjK2onU1CirX9eOiGonoxKHAMDu3bsxa9Ys3LhxA0IISCQSvPrqqwCA06dPIzQ0FF9++SUmTZpksspS7cLsWEREdY+hyyc0bJgBmcwTDg4qg45rjck3bD0DKRFZjlFB2uHDhzF27Fg0atQIK1euxNGjR/HVV19p93fv3h3NmzfH9u3bGaTZMGbHIiJbV1fXhjQkeAkLm4OoqCXIyTkAX9+RlR7TWpNvMAMpEVmCUUHam2++CQ8PD5w8eRINGjRATk5OmTJdu3bFsWPHql1Bqr1KTzCvzX+giYiqyhbWhjQkeAkP74XY2Hh4ew+tcG6yJvlGRIT1Jt8ova4dEVFNM2pO2rFjxzBy5Eg0aFB+tqaAgABkZWUZXTGq/Zgdi4hsUXJyMiIj5yM29iLy86ciIGATWrTYjYCATcjPn4rY2IuIjJyP5ORkS1fVJCpaPoHJN4iIjGNUkFZUVFQmo+ODcnNzYWdXrbwkVAfwDzQR2RKuDamLyTeIiIxjVBTVtGlTHD9+vMIySUlJTMFP/ANNRDaFa0OWpZm/NnNmS7i6bkBm5pO4dGkEMjOfhKvrBsyc2RJr1y5Hly5dLF1VIiKrYdSctDFjxuCtt97CunXrMG3atDL7ly9fjjNnzmDZsmXVriDVfsyORUS24P7akFOrsDbkBsyaFVnnEyYx+QYRUdUYFaQtWLAA27dvx8yZM7FlyxYUFd0bxrZw4UIkJSXhyJEj6NSpE+bMmWPSylLtxT/QRFTXadaGDAjob1B5L68ByMyMRUpKCnr06FGzlbMSTL5BRGQYo4I0Nzc3JCYmYs6cOdi6dSvUajWAez1oEokEERER+Pjjj+HoWPE3iWR7+AeaiOoqrg1JRESmYvRi1vXr18fmzZvx4Ycf4vjx47h16xbkcjm6desGHx8fU9aRiIjI6nFtSCIiMhWjgzQNLy8vDB061BR1ISIiqrW4NiQREZlKtYM0IiIiur82ZFUXbxZCICkpCcC9zMgdOnSAh4dHjdQxNzcXKSkpKCgogLOzM0JCQkx+LnOcg4iorjMqSBs4cGClZezs7CCXy9GqVSuMGjXKZiZFExGR7YqIGIeEhPlIS4spNw2/Zm1Ib+9M5OR4YeTIabhzR4IlS6Zg7twPUK+eQHh4L0REjDNZ1tv09HRs3RqH+PgjuHlT9e/cOaBBA3uTncsc5yAishVGBWkHDhwAAEgkEgghyux/cPuyZcswbdo0fP7558bVkoiIqBbQrA0ZHb0UqalRkMuHwctrAOzt5VCpFMjJ+RkKxR54eKRCqbTHjh05kMunws+vD4BD8PNbi6ysQ4iNjUdCwnzExLxc7fXDkpOTER29FBkZnpDLpyIgoH+p+hwwybnMcQ4iIlti1GLWBQUFGD58ONq0aYMtW7bg77//RmFhIf7++29s2bIF7dq1w4gRI5CZmYl9+/ahS5cuWLduHT755JNKj/3JJ5+gQ4cOkMvlkMvlCA0Nxffff6/dX1hYiGeffRZeXl5wc3PDmDFjkJ2drXOMjIwMhIeHw8XFBQ0bNsSCBQugUql0yhw4cABdunSBo6MjmjdvjvXr15epy+rVqxEUFAQnJyf06NEDv/76qzHNRURENqSyxZtHj24AmcwJCkVvNGu2Cr6+IyGT3csIKZPJ4es7Es2arcLlyx0QHb0U6enpRtclPT0d0dFLcflyh1LncodEIoFM5m6Sc5njHEREtsaoIG3JkiVISUnBsWPHMGHCBAQEBMDBwQEBAQGYMGECkpKScPr0aaxatQqDBg1CQkICvL29sW7dukqP7e/vj3feeQcnT57EiRMnMHDgQIwcORJnz54FALzwwgv43//+h7i4OPzyyy+4evUqRo8erX29Wq1GeHg4iouLceTIEWzYsAHr16/H4sWLtWXS0tIQHh6OAQMG4Pfff8fcuXMxc+ZM7N27V1vmm2++wbx587BkyRIkJyejY8eOCAsLw/Xr141pMiIisiGatSF37VqPTz+NxocfRuHTT6Oxa9d61K9fHzdu+JU7HBK4t9h1cHA0MjI8ERe3zeh6bN0ah4wMzwrPVVJSAHf33jh7Ng9z587Ft99+i8TEROTm5prsHKZ6P0REtsKoIG3Lli0YPXo0XF1d9e53dXXF6NGj8dVXXwG4N5l66NChOH/+fKXHHj58OIYNG4YWLVqgZcuW+O9//ws3NzccPXoUeXl5iI2NxXvvvYeBAwfioYcewrp163DkyBEcPXoUALBv3z6cO3cOmzZtQqdOnfDoo4/izTffxOrVq1FcXAwAWLNmDYKDg7FixQq0adMGc+bMwdixY/H+++9r6/Hee+8hMjIS06ZNQ9u2bbFmzRq4uLjgiy++MKbJiIjIBmnWhhwyZAj69OkDIQTi449ALg+vMLEIcC+wkcuHIT7+MPLy8qp87tzc3ArPlZ+fjkuX3sXRoxFITo5CVlYqdu++gCeeeBNjxy5EWNhELFv2boU9X5Wdw5Tvh4jIlhg1J+3GjRtQKpUVllGpVDq9To0aNdIuem0otVqNuLg43L17F6GhoTh58iSUSiUGDRqkLdO6dWsEBgYiKSkJPXv2RFJSEkJCQnTWagsLC8MzzzyDs2fPonPnzkhKStI5hqbM3LlzAQDFxcU4efIkFi1apN1vZ2eHQYMGaTNw6VNUVISioiLtzwqFAgCgVCorba/yaF5n7OvJeGx7y2HbWw7bvmadPn0ad+5I4OfXBzLZ/TbW/Lv0NgDw9X0YV65sxKlTpxAaGmqScwGAQnEKFy6swN27JVCrBRwcHoaj41AI0R5OTjKo1RlISzuB2NgzOHBgEd5440V07NixSufQpzrvp6bwM285bHvLYdtbRlXa26ggrVmzZoiLi8PixYvh5eVVZn9OTg62bt2KZs2aabddvXoVnp6eBh0/JSUFoaGhKCwshJubG3bs2IG2bdvi999/h4ODQ5lUvj4+PsjKygIAZGVllVlMW/NzZWUUCgUKCgpw+/ZtqNVqvWX++OOPcuv99ttv4/XXXy+zfd++fdVerDQhIaFaryfjse0th21vOWz7mrNkyRQAh/TumzRJX7tPwe3bt7Fnzx6TnguYoGfbuVL/bvbvf8CVK1dw5coVI86hj/HvpybxM285bHvLYdubV35+vsFljQrSoqKi8Mwzz6BLly548cUX0bt3bzRs2BDXr1/H4cOHsWLFCmRnZ2PJkiUAgJKSEvz000/o1q2bQcdv1aoVfv/9d+Tl5WHbtm2YMmUKfvnlF2OqalaLFi3CvHnztD8rFAoEBARgyJAhkMvlRh1TqVQiISEBgwcPhkwmM1VVyQBse8th21sO275mJSUlYe7cD+Dnt1abLAS414M2aVICtmwZDKXyfrsrlQpcuRKJDz6YW+Wep/LO9ddfH+LKlVQI0QRFRX/Dzu5dSCQOAEqgVitQr54LZDIHCKFGQcF5+PgUoKhoOQYN8sHEiRPRtm1buLu7V3iO8jz4fjIyMrBjx07s3XsMOTn30/Z7edkjLKwHHn98FAIDA6v0vquKn3nLYdtbDtveMjSj7AxhVJD29NNP48qVK3j77bfxwgsv6OwTQsDOzg6LFi3C008/DQC4desW5s+fj169ehl0fAcHBzRv3hwA8NBDD+H48eNYuXIlxo8fj+LiYuTm5ur0pmVnZ8PX1xcA4OvrWyYLoyb7Y+kyD2aEzM7Ohlwuh7OzM6RSKaRSqd4ymmPo4+joCEfHsmPyZTJZtW8AUxyDjMO2txy2veWw7WtGhw4dUK+eQFbWIfj6jiyzX6mU6QRpWVmJkMsFOnbsWOXroe9cSmUuMjMPQaUai4KCbRBiKuzs7s0vLykphEQig7OzM9RqO6jVV/DPPzuQm3sEUqkSGzak4+ef/4aPj6N23bPK3s+DSr+flJSUUmn7n0DDhrpp+9eujcfevdFmS9vPz7zlsO0th21vXlVpa6MShwDAG2+8gXPnzmHx4sUYNWoUBg4ciFGjRuG1117DuXPn8NZbb2nLNmjQAM8//7zBPWkPKikpQVFRER566CHIZDLs379fu+/PP/9ERkaG9hvG0NBQpKSk6MyHS0hIgFwuR9u2bbVlSh9DU0ZzDAcHBzz00EM6ZUpKSrB//36rGUNPRES1j4eHB8LDe0GhiIdaXVRhWbW6CArFHoSH99b2XFX3XApFCoqLVZBIPFFSooJE0v/f0gJCFMHRUQaJxA5KZTIUivlQKq+hpGQanJy+hp3dJ3B3/xj5+VMRG3sRkZHz8ddffxn1fm7fvm1zaftzc3ORmJiIffv2VSl7JhHZJqN60jZu3AgfHx+EhYVphzSayqJFi/Doo48iMDAQd+7cwZYtW3DgwAHs3bsX7u7umDFjBubNmwdPT0/I5XJERUUhNDQUPXv2BAAMGTIEbdu2xVNPPYVly5YhKysLr7zyCp599lltL9fs2bPx0UcfYeHChZg+fTp++uknbN26FfHx8dp6zJs3D1OmTEHXrl3RvXt3fPDBB7h79y6mTZtm0vdLRES2JSJiHBIS5iMtLabctPVqdRHS0mIQGHgL48aNNdm5SkoKIARw/ztaOQABtfou7OwEHB2doFan459/lqKkpAOk0oUoKSmAROICIBMSiSt8fUfC23so0tJiEB29FEuWzEVCwrEqvR9N2v5mzSpP25+aGoW4uG1YsGC+0e1gSenp6di6NQ7x8Udw8+b9IZ0NGthreySDgoIsXU0isjJG9aTNmDEDP/zwg6nrAgC4fv06Jk+ejFatWuGRRx7B8ePHsXfvXgwePBgA8P777+Oxxx7DmDFj0LdvX/j6+uLbb7/Vvl4qleK7776DVCpFaGgonnzySUyePBlvvPGGtkxwcDDi4+ORkJCAjh07YsWKFfj8888RFhamLTN+/HgsX74cixcvRqdOnfD777/jhx9+KJNMhIiIqCqCgoIQE/My/P1PIzU1CllZO6FUarIBK5CVtROpqVHw9z+NmJiXq/UA/+C5cnNPAFCjpKQYQqigVl+FSpULOzsl6tVzhVQqRWFhHEpKPGFnF/3vXDUAUEMiufc3FtBd9ywp6aie95MHIQSUyrwy78fDw8Nm0vYnJycjMnI+YmMvIj9/KgICNqFFi90ICNik0yOZnJxs6aoSkZUxqietUaNGUKlUpq4LACA2NrbC/U5OTli9ejVWr15dbpkmTZpUmjWqf//++O233yosM2fOHMyZM6fCMkREtio3NxcpKSkoKCiAs7MzQkJCymTfJf26dOmCtWuXIy5uG+LjN+DKlY0ApuDKlUjI5QIREb0xbtxYk/SwlD7XN9/Eo7j4IpTKJACFAH6CRBIOISQoLi6GEAoUFx+BRDIVEokjSkoKYWcnQUlJLhwcJKhXr572uPcDqA2YNStS5/1kZsZCrQakUsDb217n/SQmJuLmTRUCAvobVH8vrwHIzIxFSkoK+vTpU+32MJf09PRSQzp1eww1QzpL90iuXbucPWpEpGVUkDZixAgkJCSgqKhIb6IMIiKquzh8yzSCgoKwYMF8zJoViVOnTuH27dv44IO56Nixo1Fz0Co71yOPDMSePYfg4uKD/Py/YGfXH0rlQUilYyGEBAUFRSgoOAYhlJBK++P+PDUp1Oob8PPzLDPp/cEASvN+UlJSkJ+fDxcXF4SEhOi8n4KCgn8/M4ZlPba3l0OtrlrqamtgS0M6icj0jBru+N///heurq4YPXo0zp49a+o6ERHVGE7erx4O3zI9d3d3neRXhgZoVfksa3p1srK6oFOnLXB3V8HOLhdSaQ5KSt6FRCKBVCqHEEqUlJRACLd/56mpIcQVODsr0ahRozLH1RdAubu7o0+fPhgyZAj69OlT5v04OzvD3h5QqQxLRa1SKSCVotrrjZpTbm6uzQzpJKKaYVRPWufOnVFUVKSdp+Xk5ISGDRtCIpHolJNIJEhNTTVJRYmIqoO9P9XH4VvWwZjP8oO9Om3avIzz55fin3+AkpIfoVb/DTu7xyCR2ANQQ6X6G1KpgL29Ai4uarRp00JvkGRMABUSEoIGDeyRk3PAoLT9OTk/w9vbHiEhIQafw9JSUlJsYkgnEdUco4K0kpISODg4lFlgUtxLGVXuz0RElpCcnFxqPaapCAjQXY8pNjYeCQnzzbYeU23F4VuWZ8xn+X6vzlTtdXN374IOHZbj6tVtuHZtHwoKjkKl+gUlJU4A8gBsgZvbI2jcuCEaNWpUbhBmTAClWRogNjYe3t5DK+xp0qTtj4gwbhmC6qjOnMu6NqST80+JzM+oIK0urFdCRLaBvT+moe9BvzwPJpQw98N1XWXsZ7m8Xh0XlyA0bz4fTZpE4s6dFBQV3UBR0TXcvJmImzcPoUWLKfD1DSi3PtUJoMy5DEFVmaLXvfSQTpms8rax1iGdHIFAZDlGL2ZNRFQbaHp/ynsQBHTTicfFbTNzDWsHzYO+l1d/g8p7eQ3AjRsqpKSk1GzFbIixn+WCggIUF6uhUChx48YN3LqVA6VSqX2NTOYOT88+aNTocQQF/Qdt2iyFg8MlZGevKneB6uoGUPqXISg/bb+5AgFTzbksPaTTENY4pJPzT4ksi0EaEdVZnLxvOnVt+FZtY+xn+fTp09ixYyeuXr2K06dP48yZNJw+nYrjx39HauolvdfHwcETPj6N4eOTXKMBlGZpgJkzW8LVdQMyM5/EpUsjkJn5JFxdN2DmzJZYu3a52YYgZ2RklOqpXAVf35GQydwhkUi0PZXNmq3C5csdEB29tMJRRZohnQpFfLmBroamRzI83PxDOsuj22tbvbYgIuMYNdxRIykpCT/++COuXr2KoqKyv4QkEkml654RUe1Sm+YmcPK+6Vhy+FZt+szVFGM+yxcuvIcZM+bh9m0/2NnVg53dbTg5DYAQKhQX5yAjIxs3bpxDmzYtdIKDnJyfERjohQ8/fB179+6rdN2z6ii9DEFFafvNYceOnSadc2nNQzorw/mnRJZnVJCmUqkwceJEfPvttxBCQCKR6CQJ0fzMII2o7qiNcxPY+2M6lsjIVxs/czWlqp/l4uJbyM6+CpVqNNq3fxMy2YfIzNwLIR6DROIIR0dfODh4Iz8/FefPX0SHDm3h4uICtboIt2/vQLdujZCVlYWePXsgImIcMjMzazSA0qTtt6S9e49BLn/CZHMuNUM6o6OXIjU1CnL5MHh5DSiV6OVnKBR7EBh4y6xDOivD+adE1sGo4Y4rVqzA9u3bMW3aNJw4cQJCCMydOxdJSUmIiYmBh4cHxo0bx/T7RHVEbZ2bYAvrMZmLuYdv1dbPXE2p6mf58uVNUCpbwc/vBUiljmjceBycnW8hPz8GQty7fhKJFC4uzVBQIMO1a9dw586fOHFiOHJykvDjj38hKmoVZs9ehsmT5+LIkSS0bNlS77pndUVOjunnXFrbkE5DcP4pkXUwqidt8+bNaN++PT7//HPtNg8PD/To0QM9evTAsGHD0L17dwwcOBBPP/20ySpLROZXm7Mj2sJ6TOZkruFbtfkzV1Oq8llWKnNx7do+ODqOhLt7AwD3Mjlq1kbLz4+Cvf0wyGQDIJHIIZU6Iz39Q6SnJwBoiuDg1xAQEG5zy1TUVK+7IUM6rWlIL0cgEFkHo3rSLl26hP79+2t/lkgkOpmi2rVrh+HDh+OTTz6pdgWJyLJqc3bE2j5539qYKyNfbf7M1ZSqfJZzc0+iuDgfjRsPgkwm027XrI0WENASUukGFBY+ifz8EVAqZ6GoaCscHfuhR48v0bTpJJtMElHTve6aIZ1DhgzR9kimp6dj2bJ3MXLkNMyevUzbezly5DQsW/auRdqaIxCIrINRQZqDg4POzejm5obr16/rlGnSpAkuXrxYvdoRkUXVheyIERHjEBh4C2lpMTWWTtyW1PTwrbrwmasphn6Wr17dAHt7wM+vRZn9mrXRunVbjw4dotG+fRS8vdtCKu2MFi3+D25u9QHc643LyUnEjRv7kJOTiJKSgjofFHt5mTdlvrUO6a0LywcQ1QVGDXcMCAhAZmam9ufWrVvj4MGD2mQhAHD06FF4enqappZEZBF1ITtibZ28b81qMiNfXfjM1RRDP8sNG2ZAJvOEg4Oq3GNp1kZTKnNx4cIqSKUDIJO5ID8/HVevxuH69SMoLlZBCEAiARwc7NGwYS84OnZFfPz3dTJJRFhYD6xdGw9v76EVfkFQnUW8NcwxpNfYIZSaXtvYWPO0BRHpZ1SQ1q9fP+zatUsblI0fPx7z58/HY489hmHDhuHQoUM4dOgQpk+fbur6EpEZ1ZW5CZren7i4bTWaTtzW1ERGvrrymasphnyWw8LmICpqiUHz1xSKFBQUKODk1BVCXMLp08tQUOAJe/upcHLqD4lEDiEUUCoPIDMzHo6O1/HPP7fqZFD8+OOjsHdvtFlS5tdkintTZEWtzcsHENUVRgVp06dPh1qtxpUrV+Dv74+oqCgcOHAA3333Hb7//nsAQPfu3fHOO++YtLJEZF6WXBvL1KxpPSYqX136zNUUQz7LhvaEKJV5UKvz4ekpwcWLy1BQ0AEuLtGQSO6/RiJxh6PjSDg4DEV+/jvIzv4Sf/31V50L0gIDA83S616TKe6Tk5MRHb0UGRmekMunIiCgv1EJYDgCgcjyjArSunTpopMURCaTYffu3Thx4gRSU1PRpEkTdO/eHXZ2Rk15IyIrURezI1rDekxUvrr4maspFX2WDe0JuX59BxwclBBiPwoKPMsEaKVJJI5wdn4RCsUxHD16DJMnT65Sfa0pg2F5zNHrXlNDek09hJIjEIgsy6ggrTxdu3ZF165dTXlIIrIgS89NSEpKQmFhodU+0JHpWfozV1cY2hMSHHwDHh7u+OuvA7C3n19ugKahVP4DB4cBOH36IPLy8gxq99q2KHlN97rX1JDemhhCyREIRJZj0iCNiOoec89NSE9Px7Zt29GiRXPMnfsB7t5VWvUDHZleXZgPYw29Rob1hLyMmJhl+OOPY6hX7+EKjyeEGipVNvz8BuP27YMGzUsz1fA7S6ipXveaGNJbk0MoAY5AILIEo4O0c+fO4aOPPsLx48eRm5sLtVpdpoxEIkFqamq1KkhElmXOuQmaB7rs7IZ4883m8PNbCyE8a8UDHZlObZ4PY229Rob0hISG9sTGjcdQUHADrq7ukEikZY4jhBr5+alwdlbCz68Nrl6tvGfHlhclryhIr4khvcyKSlT3GBWk/fLLLxg6dCiKiopgb28PHx8f2NuXPZQQotoVJCLLM8fchNIPdC1bvgjgR8hkciiVkjr/QEdl1cb5MNbca1RRT0hwcDB8fT2Rm3sN+fmFsLf3gYODFyQSewihQnFxDlSqbDg7K9GmTQs4OKgMStZSkxkMrZWhQbqph/QyKypR3WNUkPbSSy9BpVLh888/x5QpUyCVlv3WjYjqlpqem6D7QKc/6VBde6CjitWm+TC1udcoJCQE/v5ucHW9DpUqANnZmSgoyCi1RpoEjRt7olGjRnBxcUFW1s5Ke3ZqevidNapKkG7qIb3MikpU9xiVfvHUqVOYMGECpk+fzgCNyMZovpEfMmQI+vTpY5IHqvsPdOFVeKA7jLy8vGqfm6xfTXzmTE3zJUN5D9zA/S8ZMjI8ERe3zcw1LJ8mWUtR0Y8ICvJHt26d0KFDc7RvH4wOHZqjW7dOaNasGVxcXLQ9O+HhFffsaIbfeXn1N6gOXl4DcOOGCikpKSZ6V+alG6Svgq/vSMhk7pBI7o8EaNZsFS5f7oDo6KUAgJiYl+HvfxqpqVHIytoJpTIPQggolXnIytqJ1NQo+PufNmhIb+khlIaw5ayoRLWFUUGaq6srGjZsaOq6EJGNsrUHOqpb6sKXDBER4xAYeAtpaTGwsyuBp6cnvL294enpCZlMBqBqPTu2NvzOmCBdM6R35syWcHXdgMzMJ3Hp0ghkZj4JV9cNmDmzJdauXW7Q0FhNoK1QxEOtLqqwrKGBNhFZllHDHYcNG4bExERT14WIbJStPdBR3WKNSRuqml3S1MlabGn4XXWGdppySG9dyIpKRPcZFaS9++676NOnD5577jm88847tfKXKhFZD1M+0FlD6nOqmDmvkTnOZU1fMlQnu6Qpk7XY0qLkpgjSy0vsUpXPb23OikpEZRkUpA0cOLDMNjc3N6xevRrr169Hy5YtIZeX/eMkkUiwf//+6teSiOo0UzzQWVvqcyrLnNfInOeyll4jU2SXNFXPji0tSl4TQbqxn9/amBWViPQzKEg7cOBAufv++ecfJCcn690nkUiMqhQR2ZYHH+hksvKny+p7oLPm1Od0jzmvkTnPlZubizt37kAqvYO//96NJk0maOdwlacmeo1MnV3SFIsX28rwO1MH6dX9/NamrKhEVD6DEoeUlJQY9Z++Ba6JiPQpnbhArS7WW0bfA11Vs6qlp6eb8V0RYN5rZK5zpaenY9mydzFy5DQsWPAJrl27jtTUr/Hrr78iNfVSub0kNZW0wRqzS2qG35kqgyFwLyhOTEzEvn37kJiYiNzc3Bp/H5UxZWZFU35+a0NWVCIqn1HZHYmITK30A11a2gIAgFKpqPSBzhofTkmXOa+ROc6VnJyMyMj5iI29iPz8qQgI2ISQkHjUqydDQcFO/P33bZw+fa5M9saa6jWy5uySpspgWDoonj17GaKiVmH27GUYOXIali1716JfvpgysyJ/nxGRRpWCtL/++gunT5+GSqUqt4xSqcTp06fx119/VbtyRGRbNA90U6Y0BwBcuRJZ4QOdNT+c0j3mvEbmONfp06fx9NML8OefTeHp+Rq8vIZBJnOHq2sw2rVbDDe3NACf4c6dX3H27G+4e/eu0b1G+t6fvl4ka1/CQjP8bteu9fj002h8+GEUPv00Grt2rceCBfMrbQt9QXGLFrsRELAJ+flTERt7EZGR88udemEOuiMB9AdqlQXp/H1GRKUZnN0xIyMD7du3x5AhQ7Bz585yy8lkMixZsgT79u3DhQsX4OfnZ4p6EpGNCAoKwnPPRWHPnj344IO5KCwsLHc+hTWmPidd5rxGNXkuTSKHNWs24PLlJpDJRuD27ctwcLgCH5/6aNSoMdzdu6BDh+W4enUbsrP34p9/YnHmjBO8vT2NStqgyeyXlpaGpKSjOH06E7m5KJNEwtfXx2qyS1bEmHlupp5rV1NMkVmRv8+IqDSDg7S1a9dCpVLhvffeq7Tse++9h1atWuHTTz/FG2+8Ua0KEpFp1aYU9aGhoRUmYbCm1OeWZM3X1JzXyNBzKZW5UChSoFbn486dHFy/fr3C8ppEDmlprrhxoz6cnafDyak3hFChuDgHGRnZuHHjHNq0aQF39yA0bz4fTZpEIj19NRwc4rFs2bMIDQ01eE5Q6cx+mZk5yM6+CqWyFRwdB6Bx40fg59cSDg4qbRKJevXioVLJLJ5dsiZohv89GKCVphn+l5oahbi4bViwYL6Za3lPdTMr8vcZEZVmcJC2d+9ehIaGomnTppWWDQ4ORu/evfH9998zSCOyEnUxRb21pD63lNpwTc15jSo7V35+Oq5ejcP160dQXKxCSUkJVKq7eOONj3DpUqre9irdk9OgQW9kZ38AB4dBACSQSGRwdPSFg4M38vNTcf78RXTo0BYuLi6QydwRFPQsMjOT4ObmZnCAdurUKSxa9A4yMjzh6Pgo8vL2QCJ5BO7uL0Kp/AdXrmTj1q3zaNOmhbYX6dKl13Dr1nZcvboXTZpEVHqO2rImWUWLRGsC7ZKSAtjZOUMuD9FZJNpSSTKqk1nR1n+fEZEug+ekXbhwoUqpijt37oyLFy8aVSkiMq3aMKfDGKbMqlbb1JZras5rVNG58vKScfr0fGRmXoRaPRVOTptgb/85XFw+gJ3ds+W2V+lEDoAaQgASiW5Ph0QihYtLMxQUyHDt2jXtdmN6OhYvXqHN7FdYeAv5+V6wt38BarUDHBwawsWlPQoK5Dh//iLy8/MhlTqiefPXYG/viWvXtlY7cYU10TfXLj8/HZcuvYvjx6chJWUZzpxZhZSUZTh+fBry8lJw5YrCbHPtKmJMZkVb/n1GRGUZHKQVFBTA1dXV4AO7uLigsLDQqEoRkenU5RT1psyqVpvUpmtqzmtU3rny89Nx/vxSFBR0gIvLKjg6joRE4ga1+joaNQqEn98Yve31YCIHOztnSCSAEIoy55ZIpLC390F29i0olUoAxvV0XL5cH76+UUhNPYu0tB9RXDwQ//yjhkJxF7m5ChQUFMLJKUgnIJRKHdGo0XSoVKeQmrrU6MQV1ubB4X/6Am0Xl91wctoEtXoqrl7NwNWrf+PUqVMWrrlxbPX3GRHpZ3CQ5unpiczMTIMPfPnyZXh6ehpVKSIynbqe0tkUWdVqm9p2Tc15jfSd6+rVOBQUeMLFJRoSiSOEUCM/PxXOzko0atQIgP72erAnRy4PgYODPZTKA3rP7eDgheJigTt37gCoWk+HJkOfvX0fnDmTioyMUygpkUEqHQap1ANSqTuEcEJBgQoKRT4kEi+dgLBx4/GoX78R5PLDla5J9sorUcjMzLSqtcb0KT38T1+gbWd374sJOzt3ODqOhLPz+1CpBmD9+h216sum0mzx9xkR6WdwkNalSxckJCRo/yBUpLi4GPv27UPnzp2rVTkiqh5bSOlcEwvmWrPaeE3NeY0ePNfly5uRnX0Q9vbDANihqCgL+fln4OysQJs2LXR6uR5srwd7cmQyDzRs2AsqVTyEKPsALZHYQwhArVZXuafj3LlzAIDs7EYoKJDD0dEXEok9AA8AEgB2sLNzglQqR0mJPYqKnFBUpNYGhPb2cjg4uCMqanK5a5KNHt0ADz3UAosXf2B1a43pU3r434OBtj5K5T9wdZ2K3NwmFv9iwli29vuMiMpncOKQsWPH4vvvv8fixYvx9ttvV1j29ddfR3Z2NiIiKp/ATEQ1x1pSOtd09sHqZlWrTazlmlaVOa9R6XNt3rwGd+8q/p0f9hscHCRo3NgTjRo10jsMsXR76Uvk0LjxONy8OR/5+TFlAgYhVJBIAIlEVeWejoKCAgBAUZE7XFyaQanM/nePAkDpIE8CqdQVKpUaSqUKarUawP2hlU2bNsXkyZO1iSuuX7+Oa9euoaCgAN988z1u3w5C/fpTERDQv1R6+HtZIhMS5iMm5uUqzT+vSZrhf5999i1u3cqFvf30cgM0IdRQqbIRGOgLV9fhFk8gUh229PuMiMpncJA2efJkrFy5EsuWLcO1a9fw6quvolmzZjplUlNT8dZbb2Hjxo3o2LEjnnzySZNXmIgMZ+mUzubMPlidrGq1iaWvaXWY8xppztW8eTM8//xqNGrUHvb29qhXr16FyzqUbq/u3btre3J8fUcCAFxcgtCmzcs4f34p8vOjYG8/DDLZAEgkchQVpQH4BTdv/oGgoLwq9XSoVCoAgFTqDEAKe/sQ2NnZQ4gDkEhGPlBaAjs7KVQqNYQQAMoOrbx9+zaOHElCfPwRXL2qwNWrf0OlGgBX16lwcPCBXC6DTCaxqrXG9ImIGIetW+ORmVmIevUe1lvmweGrMlkDq/hiojps5fcZEZXP4CBNKpVi9+7dGDJkCDZu3Igvv/wS/v7+8Pf3BwBcuXIFmZmZEEKgVatW2LVrF6RSaY1VnIgqZ8mUzpq1pTIyPCGXm+6b+8p65YxZMLc2qQtpus15jRo0aIB69ZxRv75jldtL05MTGxsPb++h2uGlpRetvn59AwoLY/8djnYN/v4SzJo1oRo9HecAtIGdnQccHHqhsDAeQgzV04OkAHCvF00ztDIi4t7QygfvPYnkNCSSDMjl70Op/OeBdd3utYm1rDX2oKCgIEybNg4LF36BgoIMyGTFcHDw+ndo6b116lSqbDg7K7XDV4UQVvPFRHXV9d9nRFQ+g4M0AAgMDMSJEyfw7rvvYt26dcjMzNRJJuLn54cZM2Zg/vz5cHNzM3lliahqSs/p0PQEVMRUKZ11sw/qJrcw9pv72rAmmDlY6prWVtVtr4iIcUhImI+0tBidRC0uLvcXrc7NPYmrV9fDx+cfxMZ+iA4dOpQ5bmVfLtjb20OlUqGk5EdIJI9BInGEk9M4FBfPR0lJDOzsSg+tVEOIG5BK7SBEsc7QygfvvZKSAvz113rY20+FnZ0bHB3d9K7rBpSek2ddQwU7dOgAPz9vSCTAzZuZKCjI+HcpBOgdvmqNX0wQEVVVlYI0AHBzc8Prr7+O119/HRkZGcjKygIA+Pr6IjAw0OQVJCLjldcToM+D38ZXhyb74IMBWmkPfnMfGTlT+xDr5OSkU7ameuVqI0td09qquu2lSeQQHb0UqalRkMuHwctrQKnP389QKPagVat8xMS8VyZAM/TLBWdnZxQWFsLB4Sby8u7Nd5NKg+Dm9jL++WcpSkqiIJEMg0TSF2r1DdjZ3YJEcgxZWbFo1apAO7Ry2bJ3de693NxfUVysgpNTf22dNOu65eefwbVr13SmLljLHMbSQkJC0KiRM/Lz/0Zw8DDcuXMHarUaUqlU7/BVW/9igojqhioHaaUFBgYyMCOLqOlEFHVJeT0BpZkypfP97INTDco+6OjYFZ988iF27foFt28DKhXg6irDkiVTsHLlh+jZswdef/0Dk/bK1XbmvqaVsfb7sbrtZWwih6p8udC2bVscPnwYDRv2QnHxYZ35bvXqvYvCws0oKloBtfpNSCQCdnaOcHa+iZkzp2Dy5CcRFBSk994rKSkodwHue+u6ZSIwMFAb6FjTHEaNBwPtipb34RcTRFRXVCtIIzI3DnmrOkN7AgIDb5kkpXNVsg/m5SXjypU9uHOnCRwdx6NJk+Gwt5dDIrkF4BA2bkzFp59uQHFxJ7RrZ3ivnLXMp6kp5r6m5bG2+7G8YNEU7VXVRA5VHfK7Zk0MAECtvoh27f6L7Oz/lZrvBtjZAfXquUMu7wB39y7Izd2FmTOHYfHiV7TH1XfvlV6AWyLRraeDgxcKCjJw584dbeBjrUMFre2LCSKimsYgjWoNDnkznjlTOhuafVCzOG1RUWfIZI/A3b2VNrGDTHbvtf7+/4cDB4bD3r4jiorUqOi50Vrn09QUS6fptqb70ZBg0VTtZWgih/KG/CqVuVAoUlBSUgA7O2f4+z+NjIxXsXPnLjRv3gz+/reRlvYNgoOj0aRJJO7cSYFanQ+p1AX16oXAzs4JaWkxaNXKAZMnP6VzTn33XukFuB0ddefklV7XTcNahwpayxcTRETmwiCNaoWaSERha8yV0tnQ7IOaxWmdnV9EYeE5vdlg8/NTYWfXGGp1jzJzZ/Sxxvk0NclSabqt6X6sarBojvbSN+wwPz8dV6/G4fr1IyguVpVKfGEPZ2c5du3ajxdfbIY33ngRixa9Y1Qgou/e0yzAnZkZDweHoXrXddPce9Y+VNDSX0wQEZkTgzSqFYxJRFHXh7wZq6ZTOhuSTU+pzMX160dgbz8VSuU/cHCQoF69emXKlZQUAJDA3r4ZsrMv68yd0cca59OYg7nTdFvL/WhssFjT7fXgsMO8vGScP78UBQWesLefCien/pBI5BBCAaXyAG7f3o3z59MBAB07djQ6ECnv3itvAe7i4hztvVdbhgpy/TAishUM0sjqVTURhS0NebNGhmTTUyhSUFysgqPjwygszETjxp56g6//Z++8w9uo7z/+ujudpmU53nZix9kkZNNAAqGMUkLZhRJmSKAJZYUZGuBHgUIZYVNaCqUpGwqhjEIYYRNIWFnOJIljx3vES7bmrd8fshTZlm3ZcQag1/P06UN8kr53+t7pM9+fcD+NLMsEAka73plYHKj9ND8lDqT7cW87i30VRIkuOwyX9fp849s5SACC4MJiOQ2zeQbB4LUAlJaWMmzYsD45Il3de7EGcJtMv0RRqsnKkqmvX/qjKxVMzA9LkCDBT52Ek5bggKc3QhTw8yt5OxDpqck/pDhn4PPVYbcr5OTkxHwfp3MMZrMJVf0Sw8ht1zsTiwO1n+anxIFyP+5NZ7EvgijRDt3WrVsRBA1VdUfKejs6aB1WiCyfCzTy5ptvcf311wF9c0S6uveiB3DX1DxNS8u9mExBDCMTh8PWq1LBA13NM0GCBAl+Cuyxk7Zp0ya2bNmCx+Nh1qxZPb8gQYJeEq8QRZifa8nbgURPTf5NTd+jKFUkJVUxevSkLjNfsuwiM/NwSkvfRhAuitm3FuZA76f5qXCg3I97y1nsbY9bLIdOEBSqq3fQ0rIYr3c5JtPvu3HQQmWHDkfo7x988DVz5zb3eQ93d+/J8gCSkoajKBsYNqyZOXNmMWHChLhLBXtyXk84YQbNzc0J5y1BggQJ+oE+O2nfffcd8+aFSjHChJ20L774ghNOOIH//Oc/nHrqqXu+ygQ/a+IVogiTKHk7MOiuyT89XScYFEhKqu3ROMzNPYuKigtR1WdxOB6OecyPpZ/mp8D+vh/DWZwvv/ySlhYvhmGL63XxOIu97XG7+uo5PProMzEdutbWq6mu/i+GYSU5+YguP9MwNFS1hszMAUA1u3ape5x1jE9g4/ZelTV257xWVr7C/ff/m3vueYrU1MGYTNbEaJQECRIk2EP65KRt3LiRY489FlEUufbaa9myZQvvvfde5O9HHnkk6enpLFmyJOGkJdhj4hGiiOanVPL2Yy8r6q7J/8kn/8nixR+haad1W65mseQwYEA6ZvNadu68LiG9vZ/ZX/djxyyO211Pba2HlpavyMnJIyMjE1VV0DQdSRJxOpPb9TnG4yz2psdty5Y5XHvtnzGZTonp0I0adTtu9/m0tLTQ2irgcmmdMsGGoeH1FmGzKWRnDwE291vWsT8FNrpzXr3eIqqqluH1jkPTJtHUNIYJE6ZgNquJ0SgJEiRIsAf0yUm77bbbAFi1ahXDhw/nz3/+czsnTRAEpk2bxnfffdc/q0zwsyYeIYowP5WStwNtSPCeEqu3Jr7htEGKix9k5EiR2257mJUrv05Ib+9n9sf9GCuLYxg6Hs+F+Hzb2b5dZtu2UsxmG4IgtUnbC2RlDSAnJxe73d6js9ixx01RFFpa3DGdPkmyEAyaaWjIZPr062JeA7u9gCFDLmbDhsdQ1XV4PENxOge2zSZTCQbrUdUabDaF0aNHYLPZ2t6771nHroI6e9oL2JXzGi2K4nAsBEx4vRuorq5m2LBhidEoCRIkSLAH9MlJ+/zzzznzzDMZPnx4l8fk5+fz/vvv93lhCRJEE59B/9MoeTuQhgTvTbrrnVEUNwDFxTcwaFBt5FynT5+ekN4+ANiX92N3WRyXaxjNzW9hGBMRhEEoShLJySmIokEwWE9paQ11dZsYNSq/R2cx3OOWnn4oRUXbqalpJBg0ouaZ7Xb6ZDmI19uAYRyNxxPE0oWfmpNzJqWlr+HxrENVweutAYTI++XmppKTk9PmlClAKBDT26zj3gzq7Ny5k5deeg/DmENzcytOpxhxVmOJophMWdTUlEXGZSRGoyRIkCBB3+iTk9bS0kJmZma3x/h8vh6V2BIkiJeehCh+KiVvB9KQ4H1BV70zdrsMzGb27OGceeYf251jQnp7/7Mv78fusjjNzT8ANYjiUkTxRnQ9QCAQwG53YLFkYzZn4PFsZs2aW5g0qYKzzrq5y8/x+Xx4PH5qasrx+82YTHnYbGntMl9hpy83tw5FAVE8pNvfOVlOITv7WEpLNwCHMGRIFg6HA0mScDqd7coxNS0IwIwZU3sVdNhbQZ2w4/fSS/9j82Y3JtMgqqqKIs5qero9MuswWhTFbE7D5yttNy4jMRolQYIECXqP2JcX5eXltRMMicXq1asZNmxYr9/7nnvuYcqUKTidTjIzMzn99NP54Ycf2h3j9/u54oorSEtLIykpiTPPPJOampp2x5SWlnLSSSdht9vJzMzkhhtuQFXVdsd89tlnTJ48GYvFwvDhw3nmmWc6refvf/87BQUFWK1WDjvsML799tten1OC/iFs0M+dOxKH41nKyi5g+/ZTKSu7AIfjWebOHclTTz3wo84uhQ3SrrITsLsnprQ0lSVLXtvHK+x/wr0zb731DE8+uZC//nU+jzxyDQBXXTV/vzmhTU1NLF++nGXLlrF8+XKampp+0p/bW/bF/bi7BPGkTvdDZeUSgsE8kpMfRxQ3oOtXYRgf4PfvQtc1dL2ZYPBt4FHgSw45ZES3e6mpqYldu+rw+UTs9rFYLNkIgkwo8yVjsWRjt4/F50umpKQITVMRBEe3iqMQEr6x2ZpR1eex2UxkZGSQmprawUELsHNnSBTn9NN77vML0z6o8xjZ2achyy4EQYgEdYYNe4zy8vEsXHg3JSUlcb3v6tWrmTdvAYsXb8Pr/RUm0yAcjqOx2SahaXmUlnooLFyK3x9Alo9u99qQU0sn5zUt7Rjq6tQebYcECRIkSBCiT5m0k08+mb/+9a989NFHHHfccZ3+/uqrr/L111/zpz/9qdfv/fnnn3PFFVcwZcoUVFXl5ptv5vjjj2fTpk04HA4Arr32WpYuXcqSJUtwuVxceeWVnHHGGXz11VdA6MfhpJNOIjs7mxUrVlBVVcWFF16ILMvcfffdABQXF3PSSSdx6aWX8uKLL/Lxxx8zd+5ccnJymDFjBgCvvPIK1113HU888QSHHXYYjzzyCDNmzOCHH37oMZOYYO/Qn83wBxp9mfv01ltPMXbswUiS9KMSFumpd0ZRFN599939srb91Q/4Y+xD7O5+NAyD9evXs3Xr1l7tzY7zxmpqAhQUHN3uGEVpimRxzOapSNID+P2vEQy+hKr+k9ZWMyaThNlsIifnCGR5CuvWvUdzc9fS9ps3b0HXFWS5FEE4JOYxgiBhtw+jpcWBqraQlOTF6XR2ez52ewEjR86nsPD3VFf7MYwzY2Ydhw1rAcaRn5/f4zUK0x/DvDveiy6Xq102v6npW6qqVmEYLYiiK5KhdLtXoSgKVqsDMSrcaxgqgkAn5/VAGI3yYxdiSpAgwc+LPjlpN998M6+99honnngis2fPprq6GoDHH3+clStX8vLLL1NQUMB1113X6/fu2Mf2zDPPkJmZyapVq/jlL39Jc3Mzixcv5qWXXuLYY48F4Omnn2b06NF8/fXXTJ06lWXLlrFp0yY++ugjsrKymDhxInfeeScLFy7k9ttvx2w288QTTzBkyBAefPBBAEaPHs2XX37Jww8/HHHSHnroIebNm8dFF10EwBNPPMHSpUv597//zY033tiXS5egn/gplrz1Zu5TqNRrPRUVW7n88gcwm+1xG/T701A50B2R/dUP+GPvQ4y+H0tKSnjyyX/2+juOtTf8/jrq6oIIQi25uXJEUMPtXk8wqGK1Hg2AJBXgcCzAZptLa+urDB6cQlpaLk7nOGTZhaI0U1b2dpfS9k1NTXzyyRpSU6fQ1PQehnFil3PNBEFClg8hGLwLu30zsnxMj9dHURoZO3YoJ544ik8+iS18c8YZv2XDhg1xXvE9H+bd1b3o8xXT0nIQY8fOb3vdOMxmE4ryGRbLaZFrYLUOJRiEQKAWkyk38lnBYD1ms9DJed2fo1F6eu6ceeYZ+3xNCRIkSNATfXLSMjIy+Pzzz5k1axaLFy+O/PuVV14JwGGHHcbLL7/cL5mN5uZmgEht+6pVoehddAbvoIMOIj8/n5UrVzJ16lRWrlzJuHHjyMrKihwzY8YMLrvsMjZu3MikSZNYuXJlpyzgjBkzuOaaawAIBoOsWrWKm266KfJ3URQ57rjjWLlyZcy1BgKhfogwbndI/EBRFBRF6dP5h1/X19cn6Dv7+tp7vV4kScZmsyEIXX+m272OrVsfxO9PwWy+lJycU8jKKkBVW2ho+JIXXviAzz67iTvuuJ4JEyZEXldaWsobb7zJBx98Q339bkMlLc3EjBmH8dvfnt6rKH5vWbduHbfe+iDl5QNwOucwdOh0TCZnzHWPGTMG2Lf7vrS0lFtuuZ+6uokcdNC1SJK57S8qZrMdu/1ENO04du58mFtuuZ/HHvtLv1yv8OfW1IwjO/tiDMNEIOBHlkNOyd763Fg0NzezceNGAFasWMHBBx/cq+d4b77j6L3Z1et27fqIlpaHqaurorW1kVGjhpGcnIzJ5MVq7XyvGIYZQRhPTs5QBgwY0PavCiaTDZNJxuPxxNxThYWFtLQIjB59DVu2LMLvvx+r9VoEwdzpWMMIoutvIAh+LJaViOLsqL3SGU0LEggsY/bsE7jqqvlccYWbjRs3RoIkBx98MMnJySiKwoYNG+Le8+E1Dxw4HVnu+TXZ2UdSUfEc69atw263x7zefn85q1bNQ1WPZPv2bZHrnZc3nYqKD7BYjotcE7N5LJrmAD7DYjkTQRAxDA1dr2LQIBchX2z3uhoaPmXgQBujR4/ep/d1PHvyq69u5+KLf5f4nd0PJGyc/Ufi2u8fenO9BcMwjD35sLVr1/L111/T0NBAcnIyhx12GFOmTNmTt4yg6zqnnnoqTU1NfPnllwC89NJLXHTRRe2cIYBDDz2UY445hkWLFnHJJZewc+dOPvjgg8jfvV4vDoeDd999l9/85jeMHDmSiy66qJ0T9u6773LSSSfh9XppbGxk4MCBrFixgmnTpkWO+eMf/8jnn3/ON99802m9t99+O3/+8587/ftLL72UGKycIEGCBAkSJEiQIMHPGK/Xy3nnnUdzczPJycndHtunTFo0EydOZOLEiXv6NjG54oor2LBhQ8RBO9C56aab2pV4ut1u8vLyOP7443v8IrpCURQ+/PBDfv3rX7drNP+psr+zPdHs62vf3NzMuedejtd7PllZJ8Y8ZseOv1JRUYTNdj/BYCOSVMHkyeM6rS80X+wGZs8ezumnn8b8+bdQWXkwgwdfGzPqr2lBdu58mNzcjXslU/Poo3/lueeKGDLk/h6zDsXFNzBnzgiGDRt6QF37aGpqluJwvMTLL/+jz/c2wFdffcW5587H75+LxXImZnNqlJpgA5pWh9WqRDIa/fW50bTPNMwgK2sqs2d/zbPPTqWm5mtaWj5g0KDGTtmvjvT2O549ezhXXTW/x9eF97zVei9+fxGDBjkYNCiV1asvR9POx2IJfV+GoeHzbSYzsxlZXkVd3TcoitomYtGC2VzNFVecw3nnndNpf69cuZJrrnmEgQOfQpaT8flKqap6i7q6ryPvIQggyyYyMqaSkXEs9fV3cOWVJ/Paax+2XbvjSU09MipLs5yWlmVxXTvo/fOm45p7QlHcVFTM4/DDB/LFF1rM671r1yds3vwkNtt/AB2fbzODBjkYMmQIbvc6fvjhQfz+AUjS8cjykeh6A83N85Gk8cjymdhsQmSvhtnbz5buiHdPiqKXWbM+o6hoB/PnX7nP1pfg52fjHEgkrv3+IVxlFw977KTtLa688kreeecdvvjiCwYNGhT59+zsbILBIE1NTe36aGpqasjOzo4c01GFMaz+GH1MR0XImpoakpOTsdlsSJKEJEkxjwm/R0csFguWGANzZFne4xugP97jQKd9X875ZGa278t56qmlfPDBwn3el/P999/j9/v3ev9Weno6v/71FBYvXorL1XlIsKI0UVb2JZo2B0Gw4vXWk5+fDtjpnD2XsViO5+23n6W11UNRkZNhw25A1y3oeqxPl8nNvYGiovm8/vob/TrLqKmpibff/hKLZQ667uji89uv+/33X+KKK4bus32/efNmKit95OUdjaL0/HlO5zGUlS1m8+bNfe6NLCkpYcGC22locOB0zsIwUtldIGAG7AhCDo2NRaxbV8z48WP65XM7ruGmm+6lvHx8lKJoeDOlkpp6Gi5XaOTDTTfd2+XIh758x2+//Sy/+92ZPb4uLe1MKioW0Nj4CJI0m9LSWrKyhpCcPIWysqXo+gmEhigXI8sbqar6L8FgBibT+W3Kgw4Cga9xODbwwgur+eKLzs+Q8ePH43QaVFd/SXb2aZhMw8jLu47s7GZaWtajaV4kyR7pcauufpPkZIMzzzyTY489NjJCYseO9r1ms2b1fsh6vHu+45p7orp6OXZ7gLVrS7BY5sa83qpqx+9XAB+i6EJRcigtLSMrC2y2XzBy5D1UVr5Gbe2zeDyL0XWdYLAIq/UHBGEHAwachck0imDQ1GkUw1/+cnOfFJ/7Sm/2pCyHKl3ef38lv//9xT96EaofIz8HG+dAJXHt9y29udZxOWkXX3xxnxYiCEK7nrV4MAyD+fPn88Ybb/DZZ58xZMiQdn8/5JBDkGWZjz/+mDPPPBOAH374gdLS0khZ4rRp07jrrruora2NqDB++OGHJCcnR3pdpk2b1kk97sMPP4y8h9ls5pBDDuHjjz/m9NNPB0Lllx9//HGk9y5B/3GgzQcrKSnhtdf+y4gRw7nmmkfweJR9InDR3ZDgsFiCxXIkXm8RNptCTk5Ol++VlnYMJSVP8MYbn5KcfHWfxAX6g94IokBo3bW1z/XLZ8eLz+dry9rGl53qD6W6V19dQnW1HVlOQhQHxDwmrCbo9W6gqqqKoUOH9qtCXn+oA0LfvuOyssW88847Pb7Obi9g9Oib2bz5brzeOwgGD6KxMYOcnN9RW3stLS23IIozsViqMIzXCAYnR4YrG4aG11uE3W5l5MgLsVguivkMSUlJ4aSTDmfx4qVkZOwOkMiyi9TU9s6wpgXaDcZ2uVy9VpyNJd4TVi+Ol67WHIvwmn/1q8F8/nlZl9e7o0hIx5lndnsBw4cvYPDgebS0rKeu7iMcjhb+9rd7WLFiJUuX/oeyshc6iaL01lHtD3q7JwF27VK7FJdJkCBBgn1NXE5arPlhEHLCYrW0hf+9L07aFVdcwUsvvcRbb72F0+mMKEe6XK6IPPDvf/97rrvuOlJTU0lOTmb+/PlMmzaNqVOnAnD88cczZswYZs2axX333Ud1dTW33HILV1xxRSTTdemll/K3v/2NP/7xj1x88cV88sknvPrqqyxdujSyluuuu47Zs2fzi1/8gkMPPZRHHnkEj8cTUXtM0H/0l7HYH4QzejU1mdx553AGDnwKw0jdJ0p73Q0JDgZ3oSit6HopdrvK6NEjuu11NJmS8Xrd+HwWRo8+Oq7PDxvP/Wmo9NUB2pfYbDZMppACnSz37JzuqVJdWJkvKWk6zc0rMQw3ghD7cwVBwmTKoqamjJwcV78p5O2pOmA0ff2O3W53XK9zuSYzfvwDVFYuYefOJ6mufhebLQmXqxldfxOTqRhJstLSkobD8UdAJBCoRlG2IctbyM5Ox+fzIcvjunyGdBcgCaNpAYqLF5Gf38BZZ/2uwxp7VpztTmXwlFOmM2LE8LiuX1/XPHXqqXz8cVmX11uWU8jMPJyysqWYzScgCOaYM89k2YXLNYVdu57jvPNO5YgjjuCII444oEaj9HZPAvt9RECCBAkSRBOXk1ZcXNzuv3Vd5+qrr+brr7/m6quv5sgjjyQrK4uamhq++OIL/vrXvzJt2jQefvjhXi/oH//4BwBHH310u39/+umnmTNnDgAPP/wwoihy5plnEggEmDFjBo8//njkWEmSeOedd7jsssuYNm0aDoeD2bNnc8cdd0SOGTJkCEuXLuXaa6/l0UcfZdCgQfzrX/+KyO8DnH322dTV1XHrrbdSXV3NxIkTef/999upRibYc/rTWNxTojN6I0deD3yELCejKMI+y+iFhwSHS6jCct1+fz2S5GXQIBg0aEyPhrqquhEEHcOQ9mmGqPM6VIJBD9XVO7BYUnA6k7tN94cdoH3JuHHjSE83UV//WVylY/X1n5KRYSIvL4/ly5f3epxBOMo/cOD51NV9107ePIyuN6Gq6zEMHyATCOhUVLxHdraJcePG9fFMO6+ht9mvWA58X53ckFJjfK+z2wsYPPgSDONjrrrqVIYPH47dbic5OZk333yLhx56Hl2fh9dbiGFUYhifIAhbURSJ4mIRQQCz2URm5uFYLL9g6dL32j1DuguQdCzdW7To5l7f9z2NWXjuuQ+4887hrFu3jl/84hdxvWesNScnT8Ln20kwWE9r62ZU9QeGDPGwaNHNeDyeHq93bu5Z7Nq1AK93ETbbdTFnnnXlrB5Io1F6uyeB/TYiIEGCBAliEZeTNnjw4Hb/fe+99/LNN9+wbt26duVWo0aN4pe//CUXXXQRkyZN4rXXXuOPf/xjrxYUj9ik1Wrl73//O3//+9+7XXNPw3CPPvpo1qxZ0+0xV155ZaK8cS/Tn8binhKd0dP1UPR4165daJo54lzsi4xerCHBmqZx112PEwjsxG6f2ON71Nd/yoABMn6/eZ9liKIJZw3eeuszamvLqKp6HVk+CrNZICtrADk5uTE/p77+U9LT9227bG9Lx+rrXyEjQ+HCC6/p07y3cJTfZsvvkLmwoGkl+P1LCAZXoOtq5DWG4aGqqonf/vaEfglOxJNpUJQm3O716LoPUbQSDCoxHfi+Orknn3wyr776Ua9el51t4/zzz293DZqbm3nppZW4XGfh9RZRVvY0ipKJLF+GLB+NICRjGG4U5TPKypZisdTS2trQ6RnSVYBkT0v34innFsXjgI+49dYHefzxe+L+jPCan3zyn7zyyi1s2hRAVe2AiMlkkJVl4pBDfk1qaipDhw7t8XuKLi9tabkEWZ6E1ToUwzD6xVndV/R2T0Lo/u2PAEiCBAkS9AdiX160ePFiZs6c2WU/zMCBA5k5cyZPPfXUHi0uwc+D/dEPFItwRs9iOY6SkjJWr14PwObNOyksLOK779ZSVLS9bZ5ZOKP3VWSW394gHJk+/vjj+c1vfsOpp/4St3spmhbo9nXhHpQzzjierCwL9fWfxfV5YeN5Tw2V1atXM2/eAhYv3kYweAkDB16IybQVq3UMmpZHaamHwsJNna5deN0zZkzdo8/vCzNnnkV+fgPFxYu6vL6aFmDz5qtpalrFli0ZeL1zyMt7gREj/kde3gt4vXNYvHgb8+YtYPXq1V1+VnSUPzf3LGy2BrzeRQSDX+N2L8Dv34ZhzEEUX0AU/4cgPIOun0ogkMXy5eu6fe94iV5DLLZtW8SKFWewZs2trFu3iHXr7qaysog33niTkpKSdseGndx49qbfX0N19WJGjEintLSUY4+d1Ks9fdJJR8QstzQMCYfDoLr6H6jqITgcf8NiOQ1RdCEIAqLowmI5Dbv9MQKBSdTUVLJjx45OnxMOkLz11jM8+eRC/vrX+Tz55ELeeusZbrhhQZ+cknDwp6uSRCCiPlhePoAlS17r1fs3NDTw/fdbEcXDyM+/jXHjXueQQz5i6tSPSEv7E2+8Uc+8eQvYsWNHXN+TyzWZgw++C6dzB5mZr1BdfRHbt59KWdkFOBzPMnfuSJ566oEDcrB6mN7sSU0LAjBjxtSEaEiCBAkOGPrkpJWXl2O1Wrs9xmq1Ul5e3qdFJfh50ZOx2JH+zPZEs379esrLW6moyKS01IOmDQTAbp+MzTapk3ORlnYMdXWhRvN9RbyORLgU6cILZ/XCUOnaCO4N7bMGj5GdfRp5ebOw2Rrx+R7CbB6A3T4Wny+ZzZu3RZzt6HWffnp8ke/+JFw6NmhQIUVF86mufhNFacYwDBSlmerqN9myZQ7NzZ/gcv2Ogw56guzs05DlkBMQzogMG/YY5eXjWbjw7k7OTJjoKH84c2E2r8TtvhhNG4IgPIQongrYMYwadH0nJtN4Jk5cTH39Yd2+d7xEryGa2tr3ASgu/h6P5zcEg38iGLwbv/9aVHU2773niemEhvdmUdHd7NpVSV1dHQ0N9Xi9ddTXL6e8/DnWrbuEL7+cQWNjGR9/XMall97Hu+9+ia6vYevWO+Pa0x17wWD3M6S8/AV8vtSIcEgsBMGCzXY9qjqSr7/uPO8yTHSAZPr06X2+J3aXc5/UYzk3gNN5fK+CP+1LtB9n+PALyMkZRlpaGnZ7eqc9efjh0+J6htTUvMLEiYN4441/95uzuq+J93m5c2eoNWN/PHcSJEiQoCv65KQNGjSIN954A7/fH/PvXq+XN954o510foIEXdGVsdgV/ZXt6UhxcTHV1Q34/TnY7WOxWMK9hwKCIGOxZLdzLoJB0z5vNI/HkSgqms+gQYWRUqTeOnaxjGAIGZvLly9n2bJlLF++nKamppjHxcoahB0Rm60Qr3c+weDbWK3peL0mysu3dlr3vpylFE24dGzu3JE4HM9SVnZBuwzCQQe1kJJyBKNH39ajwE1paWqXGZGOUX6XazKpqRORpDGI4ukYxiY07Tt0fQ2CUIokeRk8OIeMjNwe3zteYmUaamreYf36mwEQhIeQpGswmY5BkiYBIzCME2ht/QPbt4+M6SiOGTOQ2tqXWLVqHmvWPMR3393MF1+cw3ffLWDdulspK9tJMHgmaWn/oKDgv+TlvYCuX0EwmEdDw6ts3Dgvrj3dkVAvoE5V1TJMppO6dNDCKEorZvMxFBaW7tVMOOwu505LOzqu41NTj+xV8Ce+LN3uPbly5de9eoaMHz++X5zV/UG8z8vc3I0A++25kyBBggSx6FPjx9y5c7nppps44ogjuPXWW5k+fTppaWnU19ezfPly7rjjDkpKSrjnnnv6e70JfoL0RUo6LH/dn6xc+TWqCk5nBoIgAZ0H60RLoldUbMNk2veN5r3tm9lTQYTuFOk69l91JwKzW6EvNGcpEFiMprVQXt7EpEl5zJ17VGTdSufBb/uMWP2AdrudvLw8LrzwGtLSTu8XgZtoZb5Bg/5AY+MW7PY5mM2HoqotGIYGCChKHTabJ9Ib3J/iOdFryMo6m40bbwYObvucPARBBgx0PYgkpZKcPAi/vwQ4maKipyI9mdGiGHl5N9DcvJbKytfQtBEYxi+Ab4CzsViuwWw2qK+vw+vdzOjRIyJiPD/8cCOi+DGiWNfrXrCUlBTGjx/M999/g9N5ZLfnbBgaqlrDwIG/prHxi3Z9abGk8fd0LmLvy7mdcQd/9kR0aW/03h2IxPO8POOM37Jhw4b9vdQECRIkaEefnLQbbriBrVu38vTTT3PGGWcAIIoietu0SMMwuOiii7jhhhv6b6UJftLsqfz1ntLU1ERh4U7MZjuquhxJ6rrsJSyJXln5PBMmsF8azbtyJLqSvO6rIEJPinQdxxH0JALTcc5SIFBHff0D3HLLFZxwwgl74Ur1nY5KdcuXL+9XgZto53nLlrl4vW4cjiMQBBMmk5NgsB5VrcFmUzqNW+gv8ZzoNaxe/T98viAOx8y2v+rouh/DCCCKBk6nA0mS24IUPmy2w1i69ANmzDi+nShGIFBFVdUyLJbzkOVL8fufIBgcBtyArpswm52IYhZebxGbN29j/PiQUumoUfdSVDSfk07K49hjj+m1jPu0aVN57rlv8PnqcDhcbYGW9oTnptlsCgMHjqayMuQM9SYQ0Vt6r3zZEnc5956KLvV2vtuPlZ6el4qiJJy0BAkSHHD0yUkTRZHFixdz4YUX8uyzz1JYWEhzczMul4sJEyYwa9asThL6CRJ0x96Wv+6J9evX09QkkpNzPJWVIaW97qqBZTkJn+9Txo8fsl8Nmo6ORLgkMVYmoLeOXV8GjMebNQgPCTYMg9bWfyOKfaq83qfsDYGbsPN811138eKLFfj9RcCONrl4gdzcVHJycjoZ7P0pnjN58mQefPBWTjjhLCAVw5gIrEfT3AiCjNUqY7FYIzLs4SBFa+soqqv/xz/+8US7GYeVlUva+sJuxjB8aFohojgHUUxD09wEAn7sdke7Id3Dhg2LZHo++eRZrr76ql7fV0OGDCE7O5Wmpiq8Xj8mUxZmcxqCYMIw1E5Or9msIklQVlbG/ff/M+5ARG/prcpgQ8PyuMu5+2NPHkiy+Xubn9O5JkiQ4MfPHulcH3XUURx11FH9tZYEP3P2lvx1PISNnUGDLqCx8Qa83kVYrdfHPNYwAvh8D2IybWXq1HP6fS19oTeZgHgNlb4MGJ869bB9OhR6X2Kz2RAEjbq6EgQhCUkSu535Fu+5FRQUcOGFF7J8eQUuVxaC4ECSJJxO5x6/d7w0NzcjywOwWgfgdGYB63E67W3n3NmBNpvT8HrttLZ6+OqrTSQnX4skWVCUJmprV2AyzUEQLCjKt+i6iigeTai300Ig4Mdm09sN6c7Pz0eW5UimZ8WKFSQlJfWq7HDcuHEMGpSEw1GLquZRU1OGz1eKYRDT6a2ufhOnM8ALL7xNdfXkuAMRvX3+9KacG6ClZRmzZsVXzr2vh7D/1Glubmbz5s39Wu6aIEGCBH1l3w4jSpCgB3qb7ekvwsaO2ZwamRHk890AzEDX3RhGatucpU9R1XexWGpxuXIZOnToXltTvPS2JDEe+trrMnPmWX2alxVvyeje6BmKh5KSEj755FOqq7ezc+drSNJREcO/q5lvsc6tq/WPGzeOrCwLXu+6vXLdesLn86HrIpIkYTKFBKFk2Yymxc5whrJTHhTFTUtLKrm5RwPgdq8nGFSxWkP/HRrEDRDK9IiiGU3zoaoqsmzGbE7D5yulpaWF1NRUvN4SKirWc/nltwAuTCYrZrMUV9nhbmfoI4YNO438/HxaWlrQNK2T0xvubR02zExRUWavAhF9mYsYXzl3SAZ+0KBGZsw4Pq4h6X2dT5eYBdae0tJSAM4993IqK339Wu6aIEGCBH0l4aQlOCDZk7KUvhjyHY2d8eMfoL7+dQACgXl4vUqbUW4iJ+cIZPkXpKa+t9+Nnb6UJMZjbPS116WsrGyviMDszZ6hjnTcP7qu85e/PEZpaSpJSYejKFuw2+cDEsFgPaWlNdTVbWL06BGR8+h4bvGsf3+K59hsNhyOZDweUJQvuz1W15tQlDUoystIUguimBUpt9N1X1vmKvTfgmBre5UbcAECEOpbDv3dhGGA11tMZeWfKS9fiqqOxOv9FWbzFMzmJDIyZBobt7F48Uc9Bhs6OkOpqamdjgn3tubkVFNfr8Uljb+nYi3xlHMHAsuAGRx0UC7z598W1z7vLkvXfhC5DYdj5F4TXfoxs3r1am655X7+8Idz8HrP7/dy1wQJEiToKwknLcFPhj0x5DsaO3Z7AS7XfOBdDj74Gnw+P5Jkx+kchyha2wQO9r+x05eSxHgyAXvS69IbEZicnGoGDz6O119/ncrKSnJzc8nIyGD06NGRY/dGpjAWsfaPrnvZtasUWT6Rgw++HVFsprBwAV7vfdjtC7FYsjGbM9qJYFgsUjuBm3jXf/XVc8jP/2a/iOeEMnk2WltdBAIfADMwDAVFcWMYOoIgIggNBAJvEgyuQNN8GEYNXq+Z5uZqTKa1DBo0ClG0IQhgGG4EwYXJNA5RNGEYnyEIpwFh5yzsrKno+haKip7H46nAME5Fkq7H5cpBEDT8/rWUlLyKyeQmK2sIO3Y4ug029Ka39ZxzTuOhh97sNyGYnuipnPvII0NZ+Y8+8mGxxL/PO95vgUAVlZVLqK1dQTCoEvKHDXS9koEDVaZNu7DXa/+pEg5y1dVNBCAr60QUJZRt7a9y1wQJEiToKwknLcFPgv4w5DsaO7IcKvUaMGAaSUm7y6T2lsJkb9kT+e2enMs96XWJx1Cur38FKKS01Mwll9yMz6cDSUiSCafTwsiRGSxY8HtWrlzJnXf+td8zhR3pav9s3foXfL7NBIMXsGFDEaNHj4iUw3q98zGZTkSWj8FmG4rX+zVbtz6H3b46InADxJ3pfPTRZ7j66jk8+ugz+1w8JxykeOKJ1WhaAwBNTavwekPrNYwtGMYLQC6ieD66noPNpnHwwZkUFs5j587PaWjQGDEiH7PZhKJ8hsVyGqKYgtl8OH7/UgzjBAzDQBQFTKbQT4/fvxZFeQFVFYDDEYQbsdkcqOoKPJ57UJRtgI1gUKC4WEOS/FRXB1m06D7+8Y/HY55LvL2tW7du7XchmJ7oqpw7OTmZG2+8h6OOgiFD7kfXHZHX9LTPo++3jRvPpbFxF5o2AlmejcUyHUVRUNUiTKZvUJR1/PnPj7BokT2RFWJ3kOugg64FPop5TH+UuyZIkCBBXzjwJdUSJOiB9iV/j5GdfRqy7EIQhIiBM2zYY5SXj485gDdMx8GnNTVLAXo1VHdf0tshuWlpx8Q9JDfWgHFFaaK+fjl1dcuor1+OojRF/tax16W7odB+/7243d9RXp5CSYkJt3sqqnonmvYmuv5f3O77+OGH0Dldfvn1bN1qj3tQb18GPHe1f1S1mfr61VitZ+NwTI4MMZflgxg//gHy8kYiSc/i91+Az/dbdP3/aGl5kPPPz+eppx5g8uTJESMwL+86mptbqauro6Ghvt0cuOj1b968pdth2nPnjoy8d38zc+ZZZGTUEgjsBEDTngJKEQQruv4mhnEohrEQTRuEyeRn7NhRpKYexKBBpyJJG/F6rWzbVseAAb9AVZdiGKEB2VbrWYhiA7p+L7ruxmKREQQRw9Dw+18C0jEMK3AckmQGXqe5+WIURQJuBj4GVgMfous34fWO41//eoOnnnqqy3MJO0NvvfUMTz65kL/+dT5PPrmQt956hhtuWEBBQUG7QEQ89KfoRricOzwg+v33P6C8fABA2zXoTHf7fPLkydx22zWYzWWo6igE4SJUNZdAYAcmUzmDB+cwZcpljBnzVI/PwZ8Lu4NcJ3V5zcPsDnJ9tdeHnydIkCBBmEQmLcGPnv4s+YuOwn/44UvA+ezYcQ6qqhxwQ173hiR8mOjyT4fjIGpq/teufCrcn5eZeThZWafG7HWJlTVYs2YNixY9RUvLYRhGE6J4KKK4EEEwo+tBVDWAKLrQtAFAEZWVIqo6gUBAozvbeE96hrraP9EiGNFDzMOS8cOHLyA39yxqa99BUdyIooyivMexxx5NQUEBTU1N/Pe/n+D1nsaqVZsJBo12SoPRgiMd17//5leZEMUjADCbh7VlubYCBcAMoAlB0LDbrTidTgByc89i164F+Hyv4fWehMs1HZttDV7vIuz2hUhSAQ7HQtzuW4EiBOF0NO1ovN4iDGMtongYirIKSZqG1bqG1tY7MYwZwCIEIfpLzwBmYTKdjaou4Prr72b06NHdlh5219t6oIhuhJ0Fp3NOj8d2t89XrFiJKE5i+vSH8HiCMQVTgERWqI09nTGXIEGCBHubRCYtwY+a9tHQeEv+uo+Ghp2Ll1/+BwD33feHTlH4A4G9nQmYOfMsUlKK+O67cykt3YqmzcFqfQG7/X9YrS+gaXMoLd3Kt9+ehSStIisrk+XLl9PU1NTufcKG8siRI/nXv16ktXUCZvMYYCCieCOCYAVERNGKJCWj62ZUNRMAXU9H0w6jqqqqx/X2JlMYprv901kEIywZ34DbvY3t2+9n7dprKCl5n/LyFZSVfU5FRSnPPPMsJSUl/Pe//2XjxioaGsaiaXnYbJNwOKZgs01C0/IoLfVQWLgpsheTkydRUlLD4sWLWb58OYZhtMu27G0H7dVXl9DUNJhDDvkzAHb7CcjyxUAygnA6kpSPwzGG1NRD0bSkyHditxcwevTNWCxrUJR7qaj4ivT0WVgsa/F4Lqe19WmCwQDJyZcyaFAehvEwLS2/RtfPRxB2IcupmEwSyckD8fsfwDAOorODBiBiGAaCYEMQbsXrPZh77rm3z+cbDkS43UvRtEC3x4bFWvZGH2rYWUhNjc/wj7XPo/exxZJEamoqGRkZpKamdhrjkMgKhdibQa4ECRIk6A/2KJPm8Xh48803Wbt2LW63m+TkZCZOnMjpp5+Ow+Ho+Q0SJNhD4omGtlc5s1Bd7YsrGpqcHPrxPvbYY7ucV7U/2TeZABPwC2AekIcg2AlpPtjR9VyCQRu6rlFcDLff/hI2m9ylUMuzzz5HRYWG1fpb/P7/IgihWVrtEZAkB7oeMppV1UCShlBTUxmZpdXlSvtgRHW3fzqKYEBoPlhr6zLWrfsvqpqFyTSnLdOWjK7X4/E8zbJlhWzZchm7dtUSDNpwuaYiirsftYIgtxMc2bDhc1JT19PY+D2trR4efvgdkpM/3afy39H9jQ5HCgCTJ4+jpGQX27cPwGr9LbKcFpmZFj3fTFEqqKv7GE3zAWUEAt9RVORCFHVMJg+i+Dk2WwZJSS6sVpm8PBfjx4/H4bDzyitryM7+BZs3L0fXN7X1oN0cw0HbjWHoiKIVk+l0vvpqEaWlpeTn5/fpvHsjcrO3+lB3OwvOuI6Ptc8TWaHeEx3kMpt7DlwlZswlSJBgX9NnJ+2///0vl1xyCU1NTRE5ZQipdqWkpPDUU09xxhln9MsiEyToiu6ioV5vSSeVM0EATSvimWeeZdCgQQdMVqwv9GZIbl9k28OZlUMPXURNTUO74cC6vgVFeQFByMXh+DOalo3Fkk1eXkZMoZampibeeONDDCMdUUyLGnAcCyHivIWEJkSCQSMyS6sr+mJEdbd/kpPHtRPBAND1cgKB5zGMaTid/9fOyVRVFbv9aA466DLWrj2D5mYLspwCeAjJz3c4S0FClptpbv47ra052GwXIMsDyMubQHKyaZ/Kf8cy8mVZxuGQkSQTspweUWQEIvPNqqq+pLLy7/h8qZhMV+ByHYXHs4r8/F3o+mb8/tUMHqwyZ86Z5OXltSvbXL58Oe++uwWncxhmswmv92+ADTi527UahoIoCtjtp+HxPMY777zD5Zdf3qfz7o0a5N7qQ93tLLTEdXysfZ7ICvWe6CCX3X5ij8cnZswlSJBgX9OncscVK1Zwzjnn4PF4mDt3Li+99BKffvopL7/8MvPmzcPr9XLOOeewcuXK/l5vggTt6Krkr7l5NYWFCygr29auTM9ieRrDuIRly/zMm7eA1atX76eV9w8zZ55Ffn4DxcWLuizZ6ksmILp8KilpAMOGDWPKlImMHz+cESMkzOb/YrEcQUrKk9hsv0OWh1Nb2wjYYwq1rF+/nsZGBVFMYvdjJ2RQGoaCrtej63Vo2g407VNgeXj1qOpXGAZomtbtmvtiRMXaP4qi0NBQT1OTQlLSBBTlnYgIhs/3CoaRg9V6QzsHzTA0VLWGrKxURFFFVW3AKYCOonwW87M1rQSPZxFwGIaxCJiGxeIkOTm5V4I3/UFXRn50NjEaQTChaZWUlDyMzzceu/0xLJbTEAQHkuQkLe3XjBp1O2PHLmHXrqn85z/vMXLkyHZlm2Ej2e1eS2bm4WjaGkJ7oytHXG9bSxCLRcZkSsMwxD0u2etO5GZvi7XA7uvQ0ND9fLowsfa5zWZDEDTq6kpiitN0JJEV6ljuGuz22L1Z7pogQYIEXdEnJ+3uu+/GYrHwzTff8OSTT3LOOedw1FFHcfbZZ/PEE0/wzTffYDabufvuu/t7vQkStCOWCqHXW8LmzXe3Mx5FMaT2uDvb8Y+fhMpZR0XK6uo3UZTmuBQpm5qaWL58OcuWLevUSxZLOVKWZVJTU/H7P0FVs7Dbb4w4KmZzWiTbBZ2V6Hw+H7ouIooioANgGNVo2nZUdS2quhxVvQNNm4em3YWq/r3tmAr8/hfRdR+SJHV5HfpqREXvH6/XS1HRdr77bi2FhUVs2FDMrl0TCQZ30tx8J8FgJYHAckTxBGR5dzm3YWh4vUXYbAo5OTm43etRFB2r9UwMY2Q7Jy8av38Jup6KJN2EYcgEgyEnL7qkc0+VK3sivAfWr19PMOjB56tv9/fobGI0hqGiqh8TDGZgty+M7INgsB6zWYiIinS3/mgjOSvrVMxmBQgC7dfQ9okYhg74kSQDi8WKrjcgCHq/GM3xqEHuLcLXoaXlgx6PjbXPS0pK+OSTT6mu3k5h4Wts2FBMYWER3323lqKi7TGzZfs7K9Tds2dfEg5y7dz5cJfHHEhjVxIkSPDzok/ljitXruTss89mwoQJMf8+fvx4Zs6cyVtvvbVHi0uQoCdilfxVVi7B50ttZzzC7mxHbm4qFkvST0blLN65UGFDM56h311lVhSlidraFZhM7fvJBMHUKdsVrUQ3duzBOBzJeDygaQ0Igg9VfQk4DmgEngPSgCuBwwEJ+ApBmIuuP0EgsBhNiy0SsSdGVHj//P3v/6W4OAO/34HJlIfNltaWLdqFrhcRCLxKU9NXgB+7fTqCIGAYCsFgPapag82mMHr0COx2Ox5PSHDEbC5AVY9Flp+OKB2Gr5muNxEMrmjryzOj61sxm33k5IzqtMY9Ua7sio57IBBQqK0tY9euZxg+/JTIcbKcQmbm4ZSVLcVsPiGy/kBgB4axGbP5iqjS1N33V0dHs6v1h3vCystfYdSo21i9+krgdWA2YAYEQg6aHwhgMoHTmYQkSbS2vo3N5uXkk7svj+wN3alB7k1mzjyLzz67CaAtq9O59zLWPo+e75eUdDiKsgW7fT4gEQzWU1paQ13dJkaPHhG57n0pfe4v4nn27MsS9HCQ65Zb7gfGUVOzFKdz35a7JkiQIEFX9MlJ83q9ZGVldXtMVlbWz7rePcG+I7r5f9CgP8R0IjpmO2DvGL/7i66G5HaUbY936Pc55/wm5jDraFn6aAxDRRDolO0KCxQAZGXZaG110dDwDrpeA6wATgT+CUwEFgLh7yyUeRKEc5DlNAzjfgoLL2H48Fnk5p7Qr0bU4YdP4957n8LjcZGcvAhRtKNpJfj9SwgGV6DrKmAHNgDpBIPFtLZWIooiZrNAbm4qOTk5kdKxcIkgeBGEXPLyrqK6+h/thl8rSmGbOMpoVHU9othAQcHwLsvP+lPooas9IIp/obR0NWVlRwLgdrux2dIiEvthRxNMBIMrEEUJs/lYIPb9Fc/6o3vCSkvLcThS8XjexjBOBayAARgIgoHVasZudyBJErruRVHe4OijR/VZNORAoqCggDvuuJ6KigqKi2/AYjm+x9649vP9FhIIVFFYuACv9z7s9oXtxGk2b97G+PFjsFik/ZYVivfZs7f7L5uamli/fj0+nw+bzca4ceN47LG/sGHDBhyOl3oMciVIkCDBvqJPTlpBQQEffvhht+WMH3/8ceKhlqBbYv1YpqSk9Pp9og29LVvm4vW6cTiOIBSBV2NmO8L81FTOussEdDTqooVGwj1QGRknUFy8iOeff4ukJLWTcmRHWfowHcvcwoQFCiRJ4qSTDueJJ1YDG9D1gQiCjmFcDQymvYNmAKGMnGHUYDINYdy4Fygq+gMez/2Ulb3QL0ZUeP89++xzmM3DEYRyfL5rEIRRBALL0bQMBOECYByC4EUUP0fTXsYwAphMJgoKcsnJyemkOJmcPA5ZBp/vLTRtGDCUMWPuobb2LWprn8XvX4yi1KHrASSpCVk2Y7XaYzo3Ha/jnga+utsDeXmzaGxcAHwATOCHH4oYOdIWkdjfvPluPJ4r0bRJmM0eVNUE2AgEqru8v+JZf3Qm+KWXNlNYuApd/zOC8CdE0YbZLLf1Doaus657cbsXkpS0hZtu+vceXY/+ZE+fZxMmTKCiooLZs4fz9ts9Z8Q7zveL/p6iAwI221C83q/ZuvU57PbV+yUr1Jtnz8KFd/PUUw/0aX3dfQfdZfFOOWU6I0YM5+WX/8HmzZv38WzCBAkSJIhNn5y0mTNncueddzJ79mzuuececnNzI3+rqqripptuYtWqVfzpT3/qt4Um+OmwN0pewobeXXfdxYsvVuD3FwE7IoODO2Y7wvycVM56O/R72LBKioraK0fGkqXvqswN2gsUzJx5Fu++u5zKSh1JOg5dHwDcSyib1kCo3FEilEWrbfu8FkRRIiVlDAUFN2Kx/ItbbrkCURT7bERF77+aGh+lpUUYxiVYLCOxWN7H7f4HmnYMghAquRPFZmTZhCTl4/FIGEYJqjqdyspa0tPT251zWFHU7y/G7/8PcD3FxbVUVopkZZ3O2LHno6pFNDZ+Q0nJu9hsBQQCVeTkZHQ7XqC/hB662wNhI7+4+H5gAq2tKygvNzNixATs9mHk5BxPVdW/UdXPsdmSqa9X8Pm+xGJxdnl/xbv+6Ezwgw8+yCOPPI/XW4HZ/Fvs9lMRxSQ0bRc+39soyhskJW3hscduOyACK/39PLvqqvnMnfv7bjPi0SMTor9Hl2sy48c/QGXla5GAQEiN1U1LSyXz5s3mwgv7z0GL1zHt7bOntyXoPX0HY8aM5tFHn+kyi/fccx9w553DKS4uPiD2VIIECRJAH520hQsX8v777/P888/zyiuvMHz4cLKysqipqWH79u0Eg0EOPfRQFi5c2N/rTfAjZ2+WvBQUFHDhhReyfHkFLldWm9KchNPp7NIA/rmonHVl1MUiXAba0PA4ubm17WZIdZSl71jm1n4mnQ2frzQiUOByuZg16zS+//4xBGEKul5EMJgLHAaUtP0vvIbQ/ycnH4zbvZ2WlpZI1jMpKanPhlTH/edymZGkx7FYLkJVVVpaPkPXp+Jw3IrJZEXXK1DV91GUbwgEVHS9EXgDv380iiKwc+dORo8eDYQURUOCNalI0nwEYQkm02fYbDeiKK1t/UFNjB49jpycPMrL36al5UXs9sPIyBjS7br7Q+ghnj3gck1m7Ni/ABuQ5bcpL38GXR+I2SySkWFi1qzfMWPG8VRUVLBw4SIUpZLBg8/ucY5gvOt3uVzccccdHH/88dxzz7189dU9tLQ8imGICIKOzebl6KNHcdNN/z4gjOm99TzrqTeuu7lodnsBw4cvYPDgebS0rEfTvBiGTnPzIxx77NH94qD1xjHty7OnNyXoPX0HTzzxH5qansLl+h2jR98WM4sniscBH3HrrQ/y+OP3JKqAEiRIcEDQJyfNbrfzxRdfsGjRIp577jk2bdrEpk2bABg6dCizZ8/mj3/8IxZL9w/kBD8N4o2m7ouSl3HjxpGVZcHrXbcXBzz/+OjrsNt5807hP/95r90MqczMaZSW/g/DmIimNWGzKQwZYqay8u/tZtKBga4Xc/TRQ2hsbMTlcpGXl0dmZjYWy0AqKgpRFBkYiSBogBezWcRstuFyOYAPMZmSIoIkJtOAdlnP3paXxdp/dXXLMAwQxTRkuRkoBs4hEHAiSdvw+Rah66kIwhxE8WgEoR5VnY9hvIWq/o6dO6vIzMzEZmuJKIrabAvw+cpJTnYgCP/F57sOk+lErNZf0tq6hu+/X4gobsDnK8Ew3icYnMyGDT+QlTWAnJzcTgGD/hJ6iHcP2Gz5wAYOOeRfbNlyAZdd9isOPfTQdtmc8ePHs379BhYv/gJRPKvb9+vL+qdPn87Spe9QWlrKO++8Q3NzMy6Xi5NPPvmA6UHbVyV8sYhnLposu0hNDTl6hmHQ3Pz3fqkY6K1jujcHbcfzHbS0bKK1NYgonkwgoBErHidJZgDKywf86IWkEiRI8NOhz8OsLRYLt956K7feeistLS243W6Sk5M79aQk+OnS2zKfvV3yAnt/wPO+oL969aLp67DbvLy8TsqRwaAXQdiJovyF/PxrSU5upbj43raBxnPaREUceL3rMJk+Y8uWDcybFzLabDYbNptMXl4GycljWb/+PcxmDVFMwWRKRxBCU0EEITTjKVqQJJz1bG5u5r777u91eVms/Rddvqmq69F1DUk6AU0rpaXlbgRhEqK4W5VREJyI4g2I4l/R9X+hqgezcaNGevq3eL0uTKbZ+Hzb2vqzTkGWp0dKz7zehwgGK9H1YZjNJzJ48EQaGx/H71+K3z+L4uIGamoaOPjgUe2U+PpL6CG8BwzDRkNDPZqmI0kiTmdyzEyY1ToQiyWVsWPHxjSWowV7wpnWjnS3/nj2eX5+fp8HVff2s3rLvniedUX0fL9oYZ+u6K+Kgb44pt0pxUZn3UO9nCm9KkHv6TtQlCbq6r7FZrsQv99BVVUVw4YN6/L9nM7jfxJCUgkSJPhp0GcnLRqn05lwzn5m9DaaurdLXqLZU+Nxf7E35an3xKiLpRxZVlbGCy+8zc6dd7JlSwW6fgx2+02Epb9VtQS73WD06LkkJVkjRtuDD94amUuWlnYUNpsFTVuJLMfOegaDDRFBkvr6pVitrTz++ItUVmb2qrysq/3Xfg6Yre1fXRjGOxhGKrL8x3YqoboeRJIm4nQ+QCDwX3y+t/F4/o3P14IkXYHJVMvAgdH9WS6GD19AZubxrFt3HYZxBqI4G0lai6K8RTBYRTC4EcPYgCAcQyBwMN9/72XcuAJ0fW2/yn83NTXR1LSLb7/9ClV1tGU7WxDFIlJSZDIyBpGRMSUyA05VW3rsIwsL9kRnWntS3tyXMux767P25fMsFtHz/fZlxUBfHNODDx5DMOihunoHFksKJlMDtbVvtsu6h3qHTWRmHk5m5oy4HMqmpibeeusLRHEmDQ3umAGH3Wq0x6IoPmpqysjPz++yPDc19Uh27PjpCEklSJDgx02/OGkJfl70JZpaVla210peOtJX43F/srflqfvDqOvYJ/OrX/2Kyy+/ks8+cyKKv8brLewk1CLLQZqaviUpaTJbtnzHm2++1S7TGWsGVzSaVkdWViqa1kB5+WOIYg27dh3GqFG3YLEkRY6L3nfbt9/OJZdcx1VXXcyQIUMYN25clyVX0XPATKazATCMUuBb4AJCs7rCGBhGAKtVxmQaiiRdAxyCw/EMzc2rGTPmt2RkDI5pANbWfoCqDsVu/z1e79/wet+htXU0gnAOhjEQ+BpYBryNz9fCmjVBxo3LYe7cE/pF/nv16tU8/vgLtLS4EYSdmM2H4fe/gqJ8h66rtLbqVFYaOBw2hgw5GhhOQ8PyHg373s7o25N93jEblp+fT2lpaZfZsb4EkuLNtu3NEr542B8VA711TC2WX/CPf/yVzMxB1NaWUVX1OqKYhaK8gCDkYrVeiNV6LIKQjGG4UZTPKCtbSkXF24wYIXW770pKSli06D7Wri1DEAZSVlYcefZElw1Hq9GazXZ8vlJaWlpITU2N+b4mk/NnIySVIEGCA5+4nLShQ4ciCAIfffQRQ4YMYejQoXG9uSAIFBUV7dECExx49CWaOmHC+D6V2/X1x7K3xuP+ZF/0tuwNoy4lJQWPR+aggy7AZhuDpmkRoRZFqejUo6Zpbh566HnmzDmZjIwKiosXkZV1Nrt2/V+nYc+GobWdfymBwFq++uotVLUGw5iAxXIyq1Zt7tTDFVZW3LVrEzt3tnD99U+SmZlKerqJESPS8fmUmPtv9xywjxBFEV1/se3zj8IwjLaZZwaa5kEUDSwWKxAaO2CxOMnJOYWmpvVYLANiOmjhAeCCcCRu9zWo6k7gDETxNiTJiWGoGMax6Pp2RHELJpOBYfwPu13vlz0a3l81Nb8gO/sgysqex+t9AcgFzgOmA040rQWP50vKypYDw9m162Xmzu3ZsI93Rl9v9vl1193O5ZdfQEpKCk1NTWzevIVPPlnDrl0qPp8Xj6eKQEDFYknD4XBhs8ntsmNut5s//OEGamoOYeDAa3C5dqtnyrKLtLSjkKQkfvjhWWbPvpzjjjuc1auL48629bV8uD+N/31dMdAbx7S5eTUVFe/S0jIYi+VcBg4sprx8FaoaQNenAlfi95uRZTsmk4AguLBYTkOWf01z8/W43d9H+lg7Ena+N2/2omkDcDqnI4pyZNxK9ADv6HJmUUyO9Ld2RU/Z4wQJEiTYl8TlpOm6jhCyVGL+d1cYoXqaBD8h+lrmM3bswfu8hyJe43F/E+306rpIc3M9gUAjgcAWLBYRs9lJcvK4Pe5t6W+jbrfRdly77zRa5TDcoyYIyeh6PR7P07z+eiE5OX6Sk7+iqqqcjIxp1NQsx+u9EkmaAYxH01oBCAYfYdcuJxbLGZhMXyGKl2A2H9bJGIOiqM+8GKt1NJrWRHb2UNzur/jgg3/R2FhNdnYZaWnthSei50s1N9egaR8SGl4dMsB13Y9hBBBFA6czpBgaPXbAbvcBOsFgE6ExAu1xu9fj97tRlC/aDMTDgdsRRQcgIAgygpCNKGagaZnoejMm00h27vxXv/QxhfdXevrxbNiwEFXdBvwWuA9BsBOaSxfEMCQ0bQaGcQzwHS0tm5g2bX7cn9OTImE8wZ1AoArDkPn22yI2b34Yq1Wmvr4SXR9FWtopZGQMoabmKXy+AuBIFGU4mmYhOzsLr3cNTzzxH5566nm8Xh91dSOR5VNpbCzHbK4gK2sAKSkKjY3vRIIHqtpEeXkFW7ZsJDv7twwdehpOZ3aPmb14yofDPVfBYB1ebxEeTxXbtm3j0EMP3eN+ONj3FQPxOqZebwmbN99NIDAJWf4VLtcoHA4PFRWnoqojMJluRBBsaJqHlhYPycnOyD0VEtyZhab5Y+79aEd/0KAjaG5+BPABZgRB7jTAe/ToYZFyZrP5xEh/a1d0lT3eGz2NCRIkSNATcTlpJSUl3f53gp8PfS3zAfZLDwX0bDzuT8JOr8VyLiUlZVRWbsTr/QhN24RhCAiCgMkkYrdbyM4+EovlF7z11luMHXswkiT1ymDob6MultEWNtB8vvHtMmMAkpSGJB1Fdva5uN3/Ji1tJWeckc7KlV+iKC00NW3D6/0USCIpyQbciGEcxNCh83E4Kti69Rtk+ZhOxtiGDZ8DTxMMTop8pmEo+Hxr8PtFsrNPIyVlKl999Rs2bFjClCmXdXL+w/OlSkr+yc6dz6FpWUA5hpGKKApYrTIWizViTEaPHQATJpMXj2cl0FmUQNd9KEoVqjqwLXB1EoJgjRHokpCkYWjaBlTVg9V6HEuXvrlHfUy799dv2Lr1AXw+C6L4K3T9fGA7kEXIsbQgCCKG0YDfXwmA0zmFlSu/7pd7J57gTrRzLwg34PNZUNUlwDHI8sXU12+kpuZBTKZpJCXd3PY9h76LbdtqGTIkHbc7QHPzYAyjGpttDnb7EZEMS3HxZ2javzGZ8jCb5yDLQwgE7kAQjkLXz6OhIYjfX8Ho0XZcru4z2N2VD4czulVVH+L1lqNpCoZhRRB0/vzn53nuuXc488xj+6X3bl9WDMTb11pZuQSfLxWb7Xr8/k1IktQmCJKJKB6Orm9DELIQxVQ0TcPvb8Vk8kUNRD8Yn++0mD187QNavnbjQMIIgoTdPgyvdwO7dvki5cyGMTHS39oVLS3LmDVrd/a4v3oaE05eggQJ+kKiJy1Br+hrmY8kST961cU9JdYP9fr16ykvb6WpKROv93sU5UUMIxtRnN9mPFpR1TpaWr7E53sTUdyErnu4/PIHMJvtvTYY+tOoi2W0hQ20jg4a7FZqlGV7JCuYmprKW289E8l06roOwJtvvgXA1Kn3IIop1NWVR3pLwoSNsaamfwBOHI65KIobQRDbygh3lzZZrVnk55/Fjh2fU1HxG0aMGNPpfOz2AsaMuZuUlENZs+YKBOF1rNZzsVozkaRQOVUgUBdlTI7AbrdTXb2GrCwLivIpmnZWp72tKE1omh8YCnwPHIkoCkCsagQJQchA0+pxOo+gru61PepjCgdVFKUGr9cBKIji75Ckieh6Fbpe1taDF76mEBomDunpp/ab2EVPwZ2Ozj2INDVdh6IMwOkMOWSq+h9UNRfDuBxNMzCMegxDR5YH0Nq6jY0b/44gTMXhmIbbfR+GcQThTKXJ5MfrXYKqHophzMduT8fvfwhNcyEIl2EYQUQxFZ+vkc2btzF+/BjsdnuX6oxdlQ+HHc3WVh1FCWAY0xCEkzGMSciygcdTwebN3/D44+v48MNv+txjGs2+qhiIp681XNprMs1BUVojTpHb/TW6biM5+TyCQS/BYBm6Xgqo+HwKLpeN/Py0iOCO3d65h6+joy9JlogDJsu/QtMCGIaOIIiYTMmYTFnU1JQxduzp1NUtxO2+l6FD58csSda0IACDBjVGKgj6o094X4rkJEiQ4KdHwklL0Cv2RCXwx6q6uKd090OdnW2hsnIXoKFpS4ApSNJuBydUmZOHquYTCPgRhJHAJJzOM8jPH9MnYZH+Muo6Gm3RBlosEZBgsD5itEmS3E7xLtoJaWpq4sEH/w2AxeJAUdpL5QvC7jWq6kZU9TMM4xxaWsoj/y6KIAgeFEWJ/NvAgedSWfkepaUPk5//cDvhkTCaFsDrLSQ/34nbvRI4nECgMkqBbrcoit1ujwQUzj77VL7/fmu7vR3OqJSXv46um4FMQAdCDmSo3y2Wo5ZMKKu25yIGPp+PQEChsXF12wDxlW3z3uxI0jBEMR/DaAE0Qg6iE1HcAWwhOXkqpaX9I3bRU3Cno3Ov641o2ibM5sva/rsJRfkaUTwHTdtFU1NxZFwDgK6/C6SSknIdur4CQTARCNiw20NGu9+/BF1Pw2S6BV0P4PV+RyDwCrp+DlABaHi9IpIkEAwG2w0p70qdsePzLBCoYvPmu/F48tC0ncCvkKQ/ousqJpNKUpITUczH682ktXUaxcXv9uv8tL1dMRBPX2tYTdFiORK/v4zc3FRkWY4IeJhM2ciygN2ej6q2oOsBgsEiRowoIDMzM/I+sXr4Yjn6AwZMo7T0VRoargVmIwghoR9RFDCbXSiKSjCYhNOZia5/TDDop7r6tE4VBIHAMmAGd9xxPQUFBf3SJ7y3xaASJEjw0ycuJ+2OO+7o05sLgsCf/vSnPr02wYHJnqgEulyuH53q4p7S0w/1Bx/cRCAgY7F8ga6ntZvJFcYwdmIYjwCTgOuBzbjdob7QPREW2VOjrqPRtlvu+uhOx0b3cIUj2V0p3q1fv576erXd66Ol8sOlTYqyGrf7qjYp+ROBIYiinZDDWw1UsnNnBQ6HA5fLhd1ewNixd1JY+Hu2bLmMrKwzu9x/V1/9AI8++gylpctITb0UwzBFRFHC648OKPzhDzdz1lkNkb0tSaOoqVlOIJCBYRwHfAhYCGXPPOh6SDDEZJLaORuhAeAaJpOErrfucV+mzWZDVd0EAiKSNBpYSbjXLvozd/+/HnGCfT6h38QuugvuxHLuFWUthiEgy0cBoKrr0bRWdD0LUDCMPGQ5A0GQ0fVdGEYJcB4tLUFsNhlBkNB1N6rqQJK8BIMrEIQ5CIIVWIPPd0Pb+Z6KIBS0DTQ3MIxGdL0yMqQ8LS3UYxhrr3YsH/Z4Ani9LiANTWsGrkDTfEgSOJ1JkV6oUCmeD5PpPEpLH+lT32F35XN7s7Sup0BbyBkz8PnqsNvD5cCdgyyCICPLqYCBqpZ1ClbE6knu6Og3N69m27ZH0PU8BGErhvE0gnAycCS6ruDzFWEYn7BjxwbGj9e5+uqH2Lx5S8wKgnPOORKACRMmAHs+A29/DjpPkCDBT4e4nLTbb7+9079FP1SjBULC/x6OEiectJ8We6oS+GNSXdxTevqhTks7im3bCjCMGvz+j5CkG7qQoV+CYaQCCzEMA0lKw+1uQFGUiMOwt4bm9kS00ZaUNLlTSSIQo4crRFeKd2FjLJpoqXyz+QQU5Tvc7mvR9XTACuSiaQq67kYUTYATm20Mfn9Vu/K11NRfkpU1mGOOsbJ9e/f7Lzc3t83Bvo3k5BNJSTkGk8mE17uTiooXaW39kuxsL7fc8mcKCgooKCjgqace4Mkn/8kTTzyB13sUgnAuhrG5rX8qHVCBLxCE09ocVw1JagY2AF50HURxOLJsorn5QxyOJurq6li+fHmPkvOxGDduHE6nQHW1D5MpLGrixjBkdL0SXW/sIPBkYDaH1Sub+03prrvgTiznXlFq2voxQ1LpmlaMrjcAOQjC8Db1TRMhp3cLIALHo+syPt9QBMGEYXyJYfyubUi5iigejWGUoOsPAAVAIzCCkGOqI4oykI0gpKOqG9m0aSuHHDIBu93e5V4NP8+ee+55HnjgGQKBc9C0j4GLARAEA8MIZedCZbgSgiBhMmVRV1dGfv7xLF36IpdcMi+u69xdVn7atIMAWLlyy14rreupr7Wp6XsUpYqkpCpGj54UOadYQRZoP6w+mlg9ydGOvqI0Rspjnc6F6HoVfv9rBIPPoev/brv2OoZRjCyr3Hbbv5k+fTonn3xyuwqCcDm0KIr4/X6am5sxmUx7PANvfw4639sk+usSJNh3xOWkffrpp53+7cEHH2TZsmXMmjWLI488kqysLGpqavjiiy944YUXmDFjBtddd12/LzjB/mdPyxZ/LKqLe0pPP9Ru93o0TcJsnkAwuLath6Y9htGEYawAQlkAw2hGllNRlIZO8372xtDcnog22rZs+Q5Nc6Pr9UhSWkSwoWMPV5iuFDzDxlhHwlL5LS1XEwx+ha4PAWYBzwJim3OooGl+BEHFZLJhNocEBKqqqhg2bBiq6sZqtTNnzuxIT2BtbS1VVVXk5uaSnp4eMTg6BhSKih6jqakKr1cBHNjtDtxuJzfffB/jx7/CtGlTGTJkCH6/H0kaj8UyC0WRgREIgglB2IWujwTeaFNQrMcwXkVVvwbCZZkGhuHF7w9SVlaPy5XK9df/rUfJ+a6M75SUFKZPn8DWrd8ginmIogldX4quj8QwZAQhD0FII/RToGIYtRhGNQD19V+Qk9M/4j3dBXeiZ1lByKnXdR8mkwi0Ai4U5eu2ozMIOWRa1HgEH6GsWDKiaMIwdETxEAzjA+BUDMPX9tpkNO2fbQGP3wGPAc0YhgNJ2t0jKAgSgpBHIFDSbt905bAWFBQwcGAumpaEKGaj6xZE8SREcQCCYKDrQXy+AIFAC06nA5NJxmxOw+crxWz+BXV1z7J+/XoOO+ywbq9hd1n50tLFPPbYvzCMoQwZch55eSfttdK67gJt6ek6waBAUlJtu+dPxyBLOBgVXQIdpque5GhHv7V1a6Q8FkR03Yksz0aWzwR2YhhBVNWHLFux2V5tJ4DjcrkYNGhQO2dXkmTuvHM25557OcOHp1NV5WPo0KPjuh4ds6z7e9D53iLRX5cgwb4nLiftqKOOavff//rXv/jss89YtWoVBx98cLu/XXjhhVx99dUcfvjhnHbaaZ1em+DHT3+pBB7Iqot7Sjw/1GHj1GI5mmBwDbpeh2GkIgi7o8qGsR7DUAnN7PICGmazA02LPe+nv4fmxkN0NuGhh57H43kaSToqZg9XNF0peI4bN460tM6PJru9gCFD5rBmzdXouo3QsOlfAS8CnxEyyCUEwY4gBNpKypwRAYH8/Px2n9nY2MiKFSt7NDpuuGEBhx46hQUL7sTnm0R6+m/IzT0Bw2ihvPwFCguX8f333/Dcc9/gckFtbTVwHXb7CJzODATBRGvrany+r4DfA3cC1wC7CPWpXQAchSimIAhfoWm3oGkDgN8wYMA4du16oUvJ+XiM78suu5T//OcjvN73MJlG4fO9BNyLIIwGwnvNaFMTzUQUk4Bydu16hzPOGNNvhmNXwZ3oUjhIwustwm4vQNctKMpnyPJRbbPl7MBy4FQguprDRshJa0EU09B1C5p2JJL0BYryECZT6D4wjNK2gMdsQqXDJuATBOEURDE6kxOqApGkTGpqqjrtm46UlJTw978/g6LYsdmG4/HIbQ5ayPETRStg6SA5b2or07XHVVLaXVZeURqpq1uBIMwEfkdtrZ/sbBlZ3rNy6O7oLtD25JP/ZPHij9C009qtc/c8wkVtzpWpUwl0d8G9sKP/z3++TkNDE6J4Pl5vGcFgI7q+Oxssig7M5oHoupucnBQcjlPaOUGxnF2bzQa8h9d7Pm+//SSNjXVkZRnEkyDqmGXd34PO9waJ/roECfYPYs+HdObRRx/lnHPO6eSghRk3bhznnHMODz/88B4tLsGBS9gwnzt3JA7Hs5SVXcD27adSVnYBDsezzJ07kqeeeuBn+8AO/1CnpR3d5TFh41QUMxDFNKACTVuPrldjGAohw7mFUIkcCIKKKIqIotHlvJ+9MTQ3HgoKCrj11j9x7bWzyMgoZMyYXMaPH86UKRMZNmxYxEFTlCbq65dTXf0O1dWLOfbYyZ2cgJSUFGbMCGUVwqprYVpaNiOKoxCEXOAwQtmPicA7GIYPSRIwmWRMpiR0XSAQ8GM2pxEMGjQ378LtfpeTTjqCoqIi5s1bwOLF2/B655CX9wIjRvyPvLwX8HrnsHjxNubNW8Dq1aspKSnhL395jNbWXzJ+/L8ZPvwCFKWU9etvoLKyDElagNP5Ibp+H7W1oGm56Prv8PtDBjgI2GznYDK5kaSPgAsJORsDgVuAEzGZUhHFYjTtfuBIJOkpTKZp7NjxOD7fWByOx0lKmoPDMQ2/38W2bbUkJ/+aYcMeo7x8PAsX3t3laJTx48dz4YUnIorvEgxWA0XAa5E9FspKqQiCgSS50fXPAND1zfj9/l7tg6amJpYvX86yZctYvnw5TU1N7fbIokU3M2hQIUVF86mufhNFacbpHIssg9f7Bl7vBmw2NwcfPJns7CNR1aUoyioMQ0QUjweWYhg+BEGIOGmCMBYQEcUvCKk5mjAMG+npc7HZ1qMozwFN6PpzbQGPIwEHcAiwFElSO8wBDbaNXcjstG9iOayvvrqEuroUzOY0dr+Nu8NRApLkiOzJcJkfeDtl6FauXNnp+oWz8rEqF3aLrtyEwzEan0+mqqqq3THh0rrS0lSWLHktjm8yPsKBtuOPP57p06fjcrmYOfMs8vMbKC5ehKYFIseG5xHabIV4PFfidj+JxdJIdnY2itJMdfWbFBXNZ9Cgwi6DezNnnkVKyk5aW8vx+TLw+z0YRh6iOAlJmoIoTsIwBuH1NqGqzSQlJZGWdgx1dSrr16/v4Ow+Rnb2aciyK/L9Z2WdyKBB16OqMps2rY3rOdoxy3ogDDrvDd3ds9AxQND+moWDAPE8hw5Uejr/BAn2J31Sd9y+fTsnn3xyt8ekpaVRVFTUp0Ul+HHwcylb7Avx/FCH+zRUtaFNMr4CszkfTQvLU4NhlBGSTfciCCmIYhBdb+py3k9/DAHfE2bPnsWXXy6gvPzfbQZlKEIeVjqsrV1BIKC0lTn5WLpUxWq9v1OpzG9/ezobNmxg586Hyc29AUmyRAlMHIqmrUIQBqLrHgThdOAO4EFE8UYEIfRYEwQLgYAfq9WGrgepqHiYUaMamDZtaq+a+g85ZES7stWuZsGJ4vdoWmqb5Hseuu6NypwUkJR0M62td6Np7xLK5FyBIOzCMKpR1WbgCcCG2fx7kpJS8ftXEQzmYDZfFfmM6BlQ4VK8ePparr32Gr755hJWr16FYZyPrn8HXIFhnAAcgyA0Ai+hqsuQZQ24CcPI5umn3yElZQCzZ8/qNvsSbylUV6VyslyE37+EvLxDGTgwVBYry+Hy1mcxDANRvADDuAHDWIQg/BGQCQmtyIjiFOA9DOMEdL0MQfCQnX04qamHUVn5Gjt3rsLne5uQaIqBKPqxWs8kGPwThnE/hrEQ8GEYheh6PRaLo00Nc/e+iaU2G86Yp6efg9f7Gqra0FZy+RmC0FFYSYjsSVFsxmwWCAa/JyPDRHJyMo8++ldGjBjONdc8gsejRK7fscdO4t13V5KcfGnM8Q4dRVeiM8fRcvP7qrSuu0oLu30YOTnHU1X1b1T1c1JSBlNZaY27J7mgoIBTTz2WNWteQddTMZlGtGUqBUJBLQ3DsGMyDcNkqqG4uIykpNERJyieXrGUlENwOLLweNZSVZXHsGGdZx+GUZQmSkoex2wOlZ83NTXtkQIy7Luer3jv2Z9qf12ifDPBj4E+OWkZGRm899573H333TElpHVd57333iM9PX2PF5jgwOenXLbYV+L5od7dp/E5snwIqvoJVuuZyPJQVLWlzeDIwOt9D8P4FsM4BrNZQtPqGDgwlVjzfvpzCHhfSElJ4eyzT+Dxx19kw4atpKWdjs2Wwdatj+HzuYDTgOEkJ1sYOTILRYldspefn8+GDRvIzd0YMfRE0UIwqGIyHYLf/w2GUYkkJeN0Hoxh3EJr693o+nwE4UQE4RgEIQlNq8Hr/QBVfZasrCCLFt3HRx99HLfRsXXrJRQVfUha2p8ix8aaBReWiBeEIzGMrwE3kuRC09wEAn7sdgeyPJmkpFtpbr4YXT+UUL9VFfABgrARw6hCEC5F0xpwu0vR9U8RhIsJBsWIlDwQEZ7YbYj3bHwXFBQwb97ZXH31Y+j6UcCv0PVP0bQX0LS/YhiVwCjgVKzWY4FKkpJeob7+eRYvLuTLL7suZeptKVSs4E5zczOPP/4i1dWvYbEsBHZnXgoLryMYbMEwgsB8BOEh4GpU9XhgKqLoxG4/Ga/3GlT1eiTpAsxmC3a7A7s9leHDF5CZeTzffz8Hr7cRQWjG4cjBZBqO2XwTra1/QlWPwjBkQhk2kUAAgkE3hlFPSkoqixY9FtNgW79+PTU1AVyuw3E4tlJX9wmyPIVAYCmGsbv3KowomtE0L8FgDTk5DrzeZfzyl4O5/vo7qKnJ5M47hzNw4FMYRmrk+v3rX/+isbGK8eMndfr8WKIr4X63jj2rEF9pXX84CT0JRM2a9TtmzDget9sdd3AvvK5vv/0OQTBjs6WiqsF22brdg+eTEEUXXu8GKiq2YTKFysPj6RWT5RSysqZTXPwt1dVTOjm7sDvoVFPzJR5POcnJVhYseJz09H9y7LGTSEpSe62AnJyczH333b9PnIZ479lbbpn/k+yvS5RvJvix0Ccn7bzzzuO+++7jlFNO4a677orI1gKsXbuW//u//2PDhg388Y9/7LeFJkjwYyLeUQXhPg23GySpEkV5CFm+sU2eGiADRZmGz/cmknQYhtHcTto6mt4OAe/PiG3HqKTPJxIIrKGo6Ev8fh04HrN5DhaLhays6B61/G77ZR577C+8/vobLF36LMXFVQQCAWTZhigqmEwrcTh+11b2OZnk5AfaFN6eRdcXA2AYPgzDw8CBrSxe/CL5+fksXXpn3EaHyTSKsrJ1DBkSEnXpahZcWEFQki5EVb9D1z9Fkn4byZzYbCEnyzCaEYQcTKY5aNq3wD8RhAys1t8QDH6FKM4DHG3iHhqhkk4dVVWRZXPk8zoa4vEY33l5eWRmZmOx5FBb20gweByCUICu/xVBOAWz+Srs9lySkiSgEklKRZKOIjv7XMrL/x3z+9kTqfGOwZ1hw4Z1yr4kJ0/i4IP/wvffX4KiLEEUj8Rkmo1hfIau/xNRXIwoGqhqKxaLB01bjq7vQpIOxWodhWEYqKqbxsavMZn8QAOG8Toez28RhBQEoRVdNzCMcPnsZATBCXgxjG8RxU+w22N3BZSUlPDss89RWlqNKNai65MIBldgGGYEoQZNuxdJurGDo2ag62XIcjOq+hHZ2WWsWiVSX38YI0deD3yELCejKLtLyUCipuYutm6tYcKE9HZZ8o6iK0BbuWfsntXuSuv6O7PQm0qLpqYmCgsLYz6LotdVU+Nj586t6HoqweByrNZTkSQToii0qYGa2o20MJmyqKx8nrCJEm+vWG7uWdTWfkVr6zM0Nw8lPX338zY8sNzrHYCmzSApaQzjxk3BbA45Zi+9tBRdryAY/G/cCsiHHx5y1PeF09Cbe/b662/D7bb2WUTlQCQxHiHBj4k+OWm33347q1at4t133+W9997D4XCQkZFBXV0dHo8HwzA47rjjuO222/p7vQkS7HNWrlyJ3+/vlSMT76gCu72AkSMXsHbtxZjNOWjax3g8pcjyyZhMR6IoCro+FFF8Dbgdm202o0cf3KmcsbuG+47OmMvl4v33P+g3Y6y7qGRh4WV4vc3Y7eczZEg+OTk5naLS3ZXK5OfnRwy9F154gfvue43s7OE0Nh5HZeXHiOLphMUvJKkAh2MBNts8VHU9huEmECghNfVzLrtsCuPHj2f58uW9aupPShqNqgr4fAJ2e+zMBRBREBSEfAThFxjGuxjGiW2ZE1/EydqtNNiCYfwTQZiM3b4Ak+l7gsGvAVdbv5Wd0Fy1VHQ9gKZpRF+2joZ4PH0tNpsNm00mLy+DwYMH09LSQlnZUurqDiYp6R5E0dZ2pNJ2TqG+KVm2R7KK9913H6effnrkXujPUqjusi8DB4q43WvIyzsfi2UMkhSS06+o+BeNjZtQVRswAFH0oWnLkeU1lJV9jCjKBIPNNDZWYTZPID1dpbn5awzjcHR9PZr2d+AXwHysVhtms4YoAggEg6nk5Z1Kc/NrnYy18J7fsiWAYTixWochSYdiseTS0nInmmYAH2AYxQjCSQjCdEBH13cgCJ9it29kyBCNMWNG8f773rbrF9sZlGVXm1MeiJS4hok15L0rWXvouhx6b2YWuqu06MkxHDNmdNu8wtC6XC4zJtPjCMIh+P0f4fMdhySZI6qZna9dEj7fp4wfPwRJkuLuFbPbCxgz5k+sXn02ZWULUNWzSEs7hmCwgY0b78DrHYEozsTpFBg9egQOhwMgYuD/8MONtLQsZevWOxk58k8x743wMzsjY7ejvi+cht7cs4WFXxMINP9o+uvi4adavpngp0mfnDSr1cqyZct49tlnee655ygsLKS0tBSXy8WUKVOYNWsWs2fPjlkKmSDBj4GSkhJee+2/MXtE4nVk4h1V0NCwjEmTBnPkkZP49NPvKS7+mpaWz/H5HEiSRHKyhYwMmUBgNZoWxOc7Dbu9ZzXNjhFoj8eNqrbQ2tqCxXIIubnnkpc3Y4+Mse6ikmAQCPhwOOaiaQOprKwlPT09Zplmx1KZaCMy7GTm5OQwYICAoqwiL+8cGht3K8VFZytE0YXZPB2/fyeC8AYjRgQijmtvm/rN5jRAJxhsAtJiZi4ABCHs4DQjCKcjin9G1xchiqFqgvAssvBxmvYckIIozsdqdaFp4de7ARchxUKBkGiMhKIoWK22yOd1NMTj6UXsmN11OkU8nkIsljlRDtpugsEGzGYBk6me4uLF1NTs4NlnW/jww52YzSIpKTpVVTUkJf2x22yBojThdq/HMHJ58cW3mDnzLAYPHhzz2K6yL8nJyVx//R2Ulz9PTs5CWls3tvUFpmIyXYvDcTTgwOtdh832GcnJq3G5KjjllMN5++0vkOXzGDbsZgKBKgoLF+DzLUPTdILBwQjC/7V9Jxqy7EIUaVOYVBk4cCQWS3tjLXrPH3TQH1i9+lJU9Ssk6TTM5kNxOhfS2noPqlqOYRRjGJ8ASYSUHsFm83L55b/n9NNPZf7826Kyukq7axG+bsFgHaLoRVV/oKbG0q78Ltb8sViy9mFilUPvr8xCT47hE0/8h6amp3C5fsfo0bchSRbq6pZhGGCzzUZVb0DX/4GmXRnV+xmtjBvA53sQk2krU6eeg6qqBIMeqqt3YLGk4HQmx3wWhXE4hpObO5hf/zqFTZtCQYPa2iJaWoaQlHQ62dmxVWslycKoUfeyceNOBOEDiopqu1VAbu+o712nobfjAZKSptPY+Co+Xz12e8/tK/u7J7onfqrjERL8dOmTkwYh+eM5c+YwZ86cflxOggT7n7Dx0FWPSLyOTO9GFdzF5MmTaW5uZv369dTV1VFVVUVOTg5Wa2i4cF1dHStXfs369Yt7HAIePoeiIplg0IXXqxII2PD7azCMX+HxnI3PZ8Fq9ZOV5epkjF133e1cfvkFpKSkdJtB7C4quTvrdCyCkNRO7CIW0aUy4ZlRjz76V95++8tIlL2pqZqWln+Tn38QQ4ZcS3Hxw3i98zGZTkSWj0EQkjEMN8Hgx/h8zzB4cBUPPvhk5Lr0tqnfZhuMyeTF41mJouTj8QTRNBVF2YUsp0VKq0ymcYiiCU37CEn6NQ7HzXg896Jp84GjgBkYRjqimI9h7MIwlgJXkZyc1jbgeFw7wQlBGNeWLfsMOB5VDWIYu/vSOhri8fQidszudpUVDKNpdSQnV7Jp0yJ8vlQk6RoMYwAZGRNITjZRUvJ3Kir+S1JSJikpzZ2MGK+3hLKy56iu/gxFMQABXW/mtNMu4rzzftNtoCNW9mX3PL457NpVga4fg91+EyC1zeMrwW43GD16LklJVoqLF/H886+haYdw0EE3I0mWSJ/bxo2309RUBNzQJjwhoWlNeDxlSFJzp7l+0cZaxz0fPf9LVTfi8TyCYQxEks5D163IcgBZrkTX6wgGvyQz08zJJ59Ic3NzzKyuz1dKScnr1NauIBhUMQwIBqvRtNdR1UHU1dWRm5sLdJ4/FkvWfvf3Gbscen9kFuJxDFtaNtHaGkQUTyYQ0LDboxVxU6OEeG5E047G7z8Guz0Hw3CjKJ+iqu9isdRit6eycuXXFBbupLa2jKqq15HlozCbBbKyBpCTk4vLFbu/d+DAZO65524AVqxYwcKFi0hPP5fBgw/t1sEL7YsLkaTHOfHEfD75pHNf3syZRzBjxvEdHPWu6Q+nobfjAQYOPJ+ysqeprHyf4cMv6PH4/d0T3RM/xfEICX7a9NlJS5Bgb7KvFK46Em08dNUjEm9UuampCY/Hw6xZp3bpXJ1yymQOOug4du3axfLlyxk3blzkx6CrUqCUFINf/jKfadOmMnTo0E49HuFz2L49nZaWWvx+JybTXKAQKEWSHgZa8PnKWbt2IxMnQlZWFgCBQBWGIfPtt0Vs3vwwKSnpXWYQe4pKts86qYCd8vIqnE4nAwYM6GTkRJfKrFu3DoDnnivCYtkdZW9pWc+aNfPZseNvJCfPYujQW2lpWUZt7bP4/YvbZk8Z6HolgwerPP304+0c6Xh7BcO43WtISxOoq3uDmpohBIM2gsEgweAyJOkkLBYZi8WKJKUgy1NR1Xcwm3+F2fwLJOkBWlufRtOeQVH+g6IICAKYTFUEg8nYbEdF+sxEMQWz+XD8/rDgRAqCMA3DeAdR/DW6TlTJpNbOEO9NL2J0djcpaXLMrKBhhEooZbmU5uZnCAYntWUrzXg836HrOrLsIiXlF8jyCvz+HDZv3sb48WMiTk1NzTts3Phn/P5M4DeE5O4dGEYNFRU7eOKJdb0unwuXQ15++ZV89pkTUfw1Xm9hl/P4Bg36A1999QppaYe1258u12QKCi5gw4aH0fXB6Pqatr+oqKqf/PxBDBrUfvB62FhbsWJFpz0f7ittbb0RVd2Jrk9EFEPZXUHwYxh+bLYkfL4dpKSchii+y8KFdzNr1qkxs7obNtxCY6MTk2kOVuvRCEIyZvN63O4rUZQlbNtmweFwRL7r3fPH7sEwfhezZ7Wrcuj9lVnoyTFUlCbq6r7FZrsQv98RCe50zByG+1D9/pfw+Z7GMKyIooDZbCIn5whUNZNduzby4YcBBgy4hIEDC6ms3IrVehmK0kppaQ11dZuYMGFIp+vV8Z5KSkpC05wMHnxKTActnPnUdR+iaCM5eRLV1RaOPfZorr56fsy+vN6WX++p09CbSgJFacLn24nJFGTXrjfJyzsdiyWpy+N72xO9P+h4/oqi0NLiRtN0JEnslF39MZRvJvhps0dO2htvvMHLL7/Mli1b8Hq9bN++HYAtW7bwv//9j/PPP5+BAwf2y0IT/DzY37K47Y2H2D0iPUWV43GubDYbmzZt4eOPV/PKK9/22IvRsRTok0+Wsn37/1i06OZOP4ivvrqEoiK5zUGbiN2+EMPw4fU+gyjOaRtWnIQgZKKqG9m4cStOpxNF2dLWEO9C16/E6x3C4MGTcDol3O6vOmUQu4tKKkoTra1bUdUm3O6V6LoJXTfQdY3164uw2UyRKHbYGA6XyjQ3N/PII0/zhz+cw5Ah96Prjsj7JiePZ+LEh9m06S+43Q+yZcs0xo07GadzDG73Wjyebeh6FSNH5vHgg7d1cgDi7RWEkNFRW/scomjF59uMrr9JUtJtwAx8vs/Q9ZPx+VQCgRaSkmwYxhRMpo8xjL9iGDchinmYTGcwePBvSU9vRdO8gImSkoepq9uBYbQSDPoJSbMLWCxnEgz+MapM8iQE4SvgQQzjDxiGHcPQ8HqLsNlChnh3vYixCGd3r7vuz2ze/CXBoA+TqRqTKRVNa0ZRGlGUxrZrvQG3OyNSTmoYSrsSy1BWQ8BqzcDn80cM6Zqad1i79jpU9VeI4o2IYm5bVlBB00ppbc3DMA7lhx9e45JLruOqqy5myJAhcQViUlJS8HhkDjroAmy2MWiahiRJOJ3OToazx7MVw0intXUUiqK0+7sspyDL6dhsR6BprW2OqYGi7CA9Pb1TuVbYWNu0aVO7Pa8oCn6/k+zsy9i27SpUdRiiOJvQCFIDQRDRtF20thaTlKQxevTBJCUdQlHRfL7++ut2WV2fLzR2w+8/GLv9hnYlvLI8HqfzAdzum/H5HmXt2iOYNOl8rFYrra2bsdnSaGl5AVH8joyM85DlERHRlK7KoWH/ZBbicQyjs/CK4otSMm2fOQz3oVqtc/B6X6egII2UlCycznH4/dV8991vcThOZOTI+9qczAk0Ni7A53sIu30hZnMGXm8RP/ywe1yQpgXYvv12kpO3kpU1PRI868rBiR4vEs58hgIHJkSxiB07djB9+vSY12tPZ6r1NpgZTyVB+3EpAYJBB8HgKr788lry869h4MAhveqJ7ss69xbh829pqaauzkNNTSPBoBH1nQntfpcOxPLNA+VaJtg39MlJ03Wdc889l9deCw3FtNls+Hy+yN8HDBjA//3f/6FpGjfddFP/rDTBT579LYvb2XhQujy2q6hyT+fwySdLWb36WcBEU9PguHsxwvSUzQufQzDowu93RgxsRfkWXVcRxaMj7yUIEpI0HL9/PcXFX9PU9CAez3B0fSaGYSIY9LNhw442h+pgcnN/SXn5Y5HPjGVgRP/Ae701BAI7ga+AMxDFdARBw2y2oGktkSj26NEjcLlckVKZTZu2UF4+oO06m9H19tfe5ZrMhAkPUVLyD0pLH+C77/7WJpogYjIZZGWZOOywX3eSHw8TziYVFd1NauofMAy5UxRV0wJtzf8bSE2dycSJPfP86QAA84VJREFUJ7N16wP4fNchir9AkurQ9UcQhOvQtHqam7ficjkoKPg/ysoew+O5Ek2bhMMxhoEDw8pvn9LY+AZ2exFWq4Tfv41AoAVBSGubgTcASZqPrt+Pqv4BUTweu/0q/P5H0bT5eDy/RBQPxm53MGJEDm73si6N764oKSnho48+xufzoeulqGozzc3/BI4AQip5JlOol3jXrq8RxYsjzkLHEsvdc/6WYzIdRk1NGRkZOhs33oyqjsNkerBNACWEYehIUjo2G7jdL9PcvJbqajfXX/8kmZmpcQVidjsVx/VYrhrKaCShKPZOcvThsjnwRSmpGihKSUxVxLCxJggCqgrBoInS0u0RI0/XQVFSgeMwjCo0rTqqJ7uVjIw0RowY1a58srDwKQYMECNZ3aqqN4Hh2GzXEgh0dl4MIx+ncz6ZmRsoLX2SVaseQ9fNaJodSZJISnJisxXh9z/Mjh3PI4pyj/PHfD4fwaCG262g63UxswnR9EdmIR7HMDoLbzbb2ymZ7s4c7u5HlaQ0RHEiTucQUlMz0LQAmzbNxzCGcvDBt0eeoeFy11AwKlQmbbX+Ep+vFYCysmcoKVmMqjagaYO5664lkeDZmDE5GIbSzsEJKz2GeiN3Zz5DJdcf4fcv5rHHnmPs2LGR36xoI3vr1q0IgtbrmWrNzc19kuvvqZKg4/lI0miSkpoYPryFLVvuYMeOm6is/CVjx84kNTWvxyBAPEHXfRnIHzduHFarjzVrXkLXj8NkysNmS2sLIqkEg/Xtfpd8vgOnfHN/B7AT7B/65KQ9/PDDLFmyhEsvvZR7772Xhx56iDvvvDPy96ysLI488kiWLl2acNISxMWBIIu7p1HleM7B4TiI7747F/gFhx66iKSkAZ2OidWL0ZGusnmhuU0+vF4Vk2luxMDerSrYPmIrilZ0PY3y8ofQNAG4AFHMQxTTMIxWzGZzlEPVxKhRl1JaegtLlrzG1KmHtYvKRv/Ai+Jv0LR3EYQkDOMHIL3N2dLRdRGbLTsSxd68eRtjxw7D7X6XU06ZzMcfr8bpnNPttVeUBtzuIiTpaERxIqNG/RabLR2bzcDt/oo33ljKqlVdO/Rjxgzk++9forj4e0TxaEymQzCbk8jIkLFYthIIfIwofo3TOTWizjZ+/ANUVr5Gbe17qGoDgcDz6Pq3iOLRCMI4BgzIJzPzIFS187BeTfOiaTUEAjoNDV78fhNQhigOAXZhGPVomoaqCojiebhcq9G0p/H7K1HVFiCIqn6DKCbj85koKrJRUJDC3Lm/6nb4bzTtAwhXMGJECh7P5fh83yMI5yAIof44u90EfILPpxEMTkaWFSRJ7NTrFJ3VsNl+hd9vsGPHYvx+DUm6oJ2DFho0HECWN9La+jCaNgCYiyyPRdP8ZGcPjZmt7UhvMg+iaEMURXTd08nxiiW40Z0qYjiAMHr0aFT1Pdat+45AYEDEyFOUlQQCLgThbAxDRhRbsdlkJElCUXaQl5cXs3zyl7/M45NPlpKSMpW6um+A4QiCudPnh0tc8/PHkp6eR1XVuyiKk0GDziYt7RhSUnJR1SoqKl7E7f6U5OQa5s49n6lTp3Y5f6ykpIQ33niTyspKqqoKCWXXO2cToumPzEI832G0aqUoJrdTMo3laJlM0wntMQ/V1V/R2PgGilLCkCG3t3vGQijIs/tefpZAYDEmUwC4grKyR4DR5OVdR25ue1GlDz98nfr6HcjyUoYOPa/LofYAguBCEI7A4cjG7V7GwoV3c9tt17Bixcp2RrYgKFRX78DjeZmRIy/s8brW13+K1drK44+/SGVlZq+Dmd1VEnQ8HzDh9W5g4MA0srIOxekcRkXFfygtfYnCwhfIysrGapW7DALEG3S9554buz3n/qSpqQm3uxa/fwUu12WI4u7rLQgyFsvu36VNmzaSnPzWAVG+ub8D2An2H7HruXrgmWeeYcqUKTz++OMkJyfHVHEcPnw4xcXFe7zABD8PwmWGXakgwm7HpLQ0lSVLXuv3Nexp6UlX56AoTdTXL6eubhnFxY9iGBOBedTUNHR6z929GBdEejG6Ync27yuam5sj5+DxuFEUkOWjI8fuVh90d3gXAV2vQFG+xzBOxGSajChmIwhSW4N+6IfLbh+Lz5fMDz+UYrH8iqVLvyI/Pz8SlW3/A/8Yut6MrmciSY8hCE3Ao4AMyPj9IUl5QZCw24fh9Rps3Hg7+fkNHHTQKHbtUklN7bqUKvqznM5/IUnHYrdnkJaWht2eTnb2aQwb9hjl5eNZuPBuSkpKIq9dvXo18+Yt4P33feTl3cCQIdNwOFYAD+D1LqSkZC5lZX/imGMkUlMHkpl5Zrso/PDhC5gy5RkmTbqb8eNvJT+/gOTkLzCZ7qGq6gKKin6HKD7P6aeP4+GHb+Zvf7uO+fNPICVFQNPG0NKSgSTNxm6/GFFchyAMBkYiijk4HENwucZgtU4CJiJJNkRxMrJ8FXl5b3D00as45JAH2npDMrDbzfzqV8fGnUHbHUB4jOTkCWzb9hhwPLIsI4qvIElJ6LqMxxNo2zMWdD2VlpYWPJ5tkRLLaHJzz8Jma8DnexBNq6e+/gsgHUE4NuooA03zIAg7UZSH0PXxSNLfEMUz0LRcgkEDv1/s9nsLE12u1RPJyeOQZdD1VZ0cr7CDqapLMYzQ+XalihjutTnppCMYOHAgDQ078Xg2YbePxWLJRhBkDCNUtiqKmZhMAzCMVPx+G5qmYLFInd4z/OyYNm0q+fkNbN16M8Fg7Mx9dIlrSkqQzZvvxjCOw2S6hays00hKgtLSR1m79hoqKlbidlsoLrZw113/5J13ltLY2NjpPcP3wYcfehBFJ5LUiMMxBZttEpqWR2mph8LCTZHnSpj+EIaI5zuMdqJjOc9hRysvbySS9Cwez5no+mU0N1+Ow/Esxx/vICNjKHl5J8V8/+h7efz4hQwbFirRczpPZcqUFxk8eCayHBqHEQ6ejRz5T2S5gOLil2htbYw51D5M2KnOzs5m2LCb2bpV56KLrmXx4m14vXPIy3uBESP+R0HBKyQlHU5NzbusW7e20/WORtMC1Ne/gtvdSnX1ZIYNe4zs7NM6rbOne2jmzLPIz2+guHhRu0Hg0ecTctCK2t3zdnsBI0bcyBFHvE9qaj7HHpvHk08u5K23nuGGGxZ0Mz+x+3XeeuuDXZ5zf/Pqq0vQtINJTjbw+R6I3PvRCIKEzTYIt/t5JGlDXGXke5PeXMuuvvMEP1765KRt376dI488sttj0tLSqK+v79OiEvy82F1meFIvmte/6vYHrS/0xgCE9lHlWOfg9Zawffv9fPfdRaxffx/r1z9EefmHBINj0HUTVVV1KErIMAs7cqWli/H5mpHlIzGZsqipaYgcE4u0tGOoq1NZv3595BxEUUfX9XaCEGH1wZBaYDQG8CzgQhRnEp45puvBttK3ULI97FD5fDKBwCjq6lTKyso46aTDcbuXUlHxcuQH3jB8BIMrEISTEMVRSNLNCEIhMB9R/AhNc+P3+9D1ZoLBt9G0h1GUd7nllvmkpKSgqmAYIUXLXbt20dBQ3+4aRBsTouiIObg3lkPf8cdu8OBLGDnyFqZMeYYJE25m7Nj5DBs2C7t9Mp9+upJdu1TS0o7udM1l2UVq6nQGDbqQgw66i+HDLyc391BEsQJdb8Tvd/LFF9Xcf/9/uf32h3nkkWdobJyKzTYJXR+F3X4zNtt5SFIj8CiSZI8Y9ZI0AIvFjNv9PF7veCTpRlyuYxgxYiIORwaZmScwatTtjB27hOrqQ+L+Ue4YQAhfw6Ske0lKugVRLETXr0IQPkTTWtq+cx1BqERVtwN17dQOw4SzGhbLGoLBO1AUN+AAnISypn40zY0oqsjyuxhGWkRUQxTNGIaEpumR76+nQEx0uVZPyHIKdnsqgvAZDkfn7FTYwfR6F6HrXlS1hqys9qqIHXtt3n//A0ymVCRpDSExHNquVXQQRECSHGga+P1Vnd4Tdj87hg4dyqJFN5OWtpVgsBYAw1AIZYUUAoFqvN4N2GxuRo8eQWPjO217/ybATGPjclat+j3FxWsJBM7AYnkau/1tnM538fkuZ/Hibcybt4DVq1dHPru9ONI/GTToVDTtAwwjGMkmhIMymzdviwShop3VWMOoly9fzrJly1i+fDlNTU1dfi/xfIfRTnQgUBnTeQ47WpMnP0lGhovzzz+Ef/3rZt566xlOP/10BEHuMeAWvpfDz/ysrEu7DRKOGfMYgrCD9etvoqbmS0ymk2I6aNEOTiBQRWPjLioqJjJ48EOdjOxRo24nOdlES8vLbNq0MWYpaXgfStJGNG3sHgUzw32pgwYVUlQ0n+rqN/F6d1JbuwJJmkEw2Nhuz3W8563WTLKyLmbbtl1dZml7E3QNl7bvbcK/0Wlp5zBmzC3YbIV4vfMJBN5E15sxDANdbyYQeBOf7xqs1o0kJycxYMC+WV9XHAgB7AT7jz45aTabrUcDeefOnYlmxgRxES4zjGUQx6KjY9Jf9MYAhPZR5Y7n0Ny8msLCBZSVbUPT5mC1voAs34wgjABOJRgUaGnxsnPnt+0cuR07luD3N9LcvANVdeP3q7S0tHT67LBT19j4NS0t9dTW1kbOYcAAGV1vxTB2O5th9UDDWNoueqhptcBGQkZ1CoYRRNcD6LoPs9kUkXyHkKNmMmVRVxckGNTxer3MnHkWOTnVlJa+CvwaRQG/fzW6riAIR7d99iQE4c+IYgGi+DzwB3y+3+LznY8kPcvgwWNIT89HkiSamppoatrFqlXfALB5804KC4v47ru1FBVtp7m5ktraFRHjqLsStY4OfdeZzkYaGlZSXPw8ZWUf09zcyo4dHkpLq9m5szam0RTtgG/YcA8lJW/g8UygsvIsDOMuBg78D3l5L1BRkcvOnTk0NBxJVdXudUtSAUlJNyOKhWjaFRjG66hqKR5PFT7f8xhGCopyAjabL6ah1Jsf5Y4BBEVpancNZXkyyckPYLWORBCeA64GwDC2A29jsZgxm+UuS7FcrskMHHgi6elViGIAwwiiqmWoahOG4cVsFnA4FFT1m7bBzuFrL0QEO6K/v+4CMeFyLbd7abssQCw0LYDZHGTgwFrKyh7qdHzYwbRa19LcPAtR/JCMDDuGYaAozVRXv0lR0XwGDSpk0aKbSUlJYenSFeTkXIzd3ojXuyhyL3UOguhAJYbhJiMjo9Paop8dkydP5sYb55OSEgqI+P2FeDzf4fOtQZLKyM9PalPONCLfm6aVEQj8na1br8ftHoqiXIbfPwq3uxivtwiwYrWeg6ZdS2npwe2c+Y73QbSzGj6f6KBMVVVVl8IQJSUl3Hff/Zx22kVceul9zJ//GJdeeh+nnXYR9913f8wAQrzfYW7uWVitu/D57iUjwxGzT07TApSXP8GoUWb+7//+j+nTp+NyuXoVcAvfDwCybGv37+EKiPr65ShKE07nKAYP/j2BwDu0tpZjGKO7dartdjuVlUvQtBGI4mw8nmCnzw8Nzr4Fp7MCt/tetm59DkVp7rQPs7K+J/n/2TvvwCrL++1/7mecmZyTTUIgYSMyFRduHICjYqtYV91arcVV9/gp1qq4R2sd1brrrFarVXHjKCooW0YggySEkHHOyZnPuN8/ziCbgLj65vqnlpxxP+cZ93dc3+vyFZGff/R3LmamlVLPOmsUXu8TVFScQFvbOiwrt8M11xPNr7c9eFuLrtnZ0wAIBvtWHN1etN+jO3diY7GTiUSOIhY7GVV9gsGDR7HLLn8mFsva4XHGtuCnUsDux4+H7ZpJ22WXXXj77beJxWIZD6f2aG5u5q233mL//ff/zgvsx/8+vivNcEehM19f13uuYXSWG25/DD3PKsQAFUUZiRA2icSLrFnzNxyOITgcyaFzVV2Mad6KlDnEYlGkjBIMBjKiB52VxGzbxjTD3Hjjn1m7toLjjpvFL395KHPnPk88/h6adiRSym7UA5OS6lKmOwIallWLZflIdtck8biBEOGUxHwyiHY48olEVmCasUzQXlDgIB6PYtt5KEoN0IRt20jpRogokEBVS8nOvjJlyvs1sdgShg4dQWnpPmiaj7VrF7B48WJefPFtgsEALlclkI+uj0dKHdNsprq6gbq6DzCMOB7PgUDvxr3Qu3Q69Db4/w+i0fupqtrI5s2BjLhJ5/coymGY5psIcTCKchaqKqmtbaK5eSUjRxYSjQZwu08nGm3CMKL4fFsYCIqSh6aNxLL+jW1/BHiIxSTQihDnoWkG5eXDewyUOovXSCn57LPPWLlyJQBjxoxh77337jJr2Z0/Wlolz+0+G01bBATx+UZimotwOn+NYdR2Ed9ofy/E41/xq18dzptvrqC+3sY05wOHI6UgkbBIJL7EthOo6gHt3pk81u7OX28qgn01iV+/fi7DhxtceOH13Hvv4916FUaj1fh8TnJzl+PzBdi8+SMaGrr3H5w/fz4NDXH8/kMpLh5OTc19hMO/R9ePQNenoutTiMVeS9GZW1HVBJrmxDTNLmvrLFU+bdo0HnkkmWyPHTuMaFR0Ua1salpIImGiaTkEApdgWXUIsQeqeneqo2wiZROxWAOJxAqysoZiGDp5eedSXX09L774EmeffVaX+6C7Ga+056Cquqmp+SeG8S1DhgQ6CEN8lzmZvpxDp7OE7OwibPs9EokYGzfO7MVnsqNgRfuCW37+4b3KrAeDS4nFkoWwrKysXtUai4r2pqhoOoHAU4TDKorSSjT6dQd1wPZWEOkEUNdPxTQd3YrSwBYxpFWrbiAUupPKytcAtcN1WF5+CHPmPLXDlDjbG8c/+uij3H33vxk8eCI+X+8m39D7Hryts915efsBn7B8+fLvNWbsHGekO7Hl5WcTCi3FsiKoqofs7PHouh8pJQ0NP678fr+vWz+2K0m74IIL+OUvf8kxxxzDQw891OFvFRUVnHHGGQQCAS644IIdssh+/G9jWw2Gv09Z3PbBQ9InrSu6qyq3P4aeZhXaU6KkbAL+gW3vgaJcitOZDH51fQKK4kTKlQhxBKa5nJqajRQVDchI5LdPKBKJCA7HtyhKM48++jbz5l3K8ccfhtsdpKXlcYSYghDJQkoyKbgYw7gLy/o9cBCwBkgAAlgAHI0QAk1TkNIgGo0Tj4fIzvaiaTpCaJjmQrKzLQKBABdffD3r10tUNR+nsxTTbMGymoE4tl2LENm4XA48nqxUoudH0yYCqzCMNoLBJbjdZVhWhIceeo6NG3cFBpNIfALMJBSKEI/rOJ3ZuFx5tLUtxDDiqGocRWkgHq+mrCxnq2p0naXToeugfPtz5XYfSiz2KIqykWh0YsYHDDal3jMWXf8tsdhDWFY+QlyYuiZ9QElq8PwdDCOBx3MQQnxGPC5IJBzoOhjGItrabk4ltjehKLsg5Xosax5CvAvsi2WZJBK9d4vy86dSUXE/v/vd+Xz++Tc0NMQxTQ/tlS53330E0aiRCU46+tclkVatM81KLGs+MJFIJIxhLCORuBE4hpqaGlwuV4f7rv29sP/+x/KPf7yLZe2ElO+jacekrj2JadqpOZ0YqtqQUlPTgSaKi/N79czrjG0ziU8mCOPGjePFF1/ijTe6NxWeNesWcnNzu/WygmTH6IknnqS6eiOKsgnIRsrTkfIDDONBDOOR1FxaFVLehMt1MW73SGKxZR0C8546Ujk5OUyfnjRw9/m8ZGV56QzbjmJZEeLx+1KdGYmi/DplqZEUPhCiGCjEsipoa1uPrltIqWWS+XHjxnYb9HUW09jiOWgh5WoOPXQ6l19+XSYR+q5CT309hyNGNHPhhXexcuW3vZy7rsI5OTk5TJmyE48++hQVFQUYht6jzLphBFL2GBCNrmDJklu7VWs0jA+pqXmDxsYFaJrE7/cyYsQwYjGlRyuIdEHE6dwXy1rXbcc/DY9nCOPG3Utl5a+54IIjGTFiRIfr8J133vleipl+v5/dd98dn+8DfD5tqwka9L4Hb3vRNTvzvu8TPcUZacprZ/wU5Pd/KgXsfvx42K4kbebMmVxxxRXMnTuX8vJyvN7khlJUVERTUxNSSq677joOOuigrXxSP/qx7QbDO2J4vSe0Dx7Wr78MmI5hBJEyr9fqbfoYGhr+naIkndZlVqE9JcqylgMFKMoVJBISj8dGCKWTqfGBaNpgDKOaqqovCQTu75BQSGlhWZWUlpZRWjoVyzqSlSsv5LLL5qLro1NzRnMQIulVJaVNPD4GuABFeRUp78Oy1gGlwO7A2yjKEaiqByEEQqiAE8sKEwqF8fmyESKKbb+BqgY5+eSLiEQORIhJmOYrSOnG6SxBUXKJRF5HyoUIMR3TTAapllVJLPYiicSnmGYbVVUOamtVkp2jFSQSe6KqJ6PrIMQdQFJ9UkqdaDROLFaBovwX295EKLQEIVwoisWmTRJVXdurGl1aOr39Ztfb4L+qFqCqO2Oab5GdfQTR6Brq6+tJJP5GIABSTkt5p30CnAGYqKqKbcuUQuJwgsH3sG0LIXwIkYUQGvF4E07nplSCNiEzn5XEYKTcDHyDokzBslZkEvSeAoVweC0bNqympmYDMBmn8xg8noMBD4lEJXV1b/Lqqy+gKG0UF9eQn1/WQTnPtnVisToSiRYsayW2/RRu92BgIoryCFlZm4hEbsKy/sbGjXsTDrew886T8HpFh3vhwgtP4957H0fXh6DrHiyrFdu+HUW5AqhHyjeBjcByLCttiBtF1w0KCkZ2Oa7eAqS+mMR3Dt7bdw16SsSAbqvP6Y7Rt9/GkTIbl2s4qpqfkuzeC8NYi65/y+DB+ShKMxs2vE48fg+GMQ3IQ1EUDCPQa+cH4Je/PJply5ZRVXU3Awde1qW7pChuTLMe0yxFVQ9AytUZSnFHqKjqcExzKUK0oaoqOTnJCvvKlSt7DPq66ywoipvGxj9x9NEzO6x3a2bUsHU/yTTlrvfkOXkOjzzyyK2eu87n7JNPviESqcr4G6a7je1l1kePLmPTpldwOJLdzlWr7uxRrdHpnInDMYNI5GakXEheXjbB4Ke97lnpgohhGL12/NNInhedESNGMG3atA5/+z6LmTtyD972dYYy7/s+8VOKM/qKn1IBux8/DrbbzPqWW27hoIMO4s9//jMLFiwgFoth2zYzZszgggsuYPr06Ttynf34H8a2Ggx3pgrtaKSDh5df/icAtbVnE4kYvVZv08dw//3PEY9L3O4Du3xuOgGLRF5GyiYU5UxUNRvLCmCaJrqeFDdwuWaRSPwB05yLy3UpmlZMXd1jCJGL17slQeusvhWP1xMKbaKt7WCGDZtNefk6li+fQyx2PpZ1IDAZ8CJlGEXJx+WKEouNR9NUpByMaa7Gtu8ErgC2zA0pioFl/Ze2tgiW9TBSfktl5SCi0d3x+e4GDAKBeVjWF8Ri01CUAhyOfUkk3kFRjsS2bSKR/2Kad2PbeUh5Eqq6B1lZg5AyQDB4K4axDiGmkZMzAV13oqqXAbXY9hXANITIxTTvBjwkhSnq0LRfkJXlwrYDXTzX0mgvna5pH2Q2uy1zWV2TaUjKsev6wej634lG70BVT2XDhv8Qjb6EZZ2HopQhxLeAG5gOuDFNk2BwS9dR00qIRk1suxVNG4+qOrGsT4hEqlMdtM7JoUx9HkjZnEnQ0ybRnRGJVLJ06VXE49k4nceSnX1Nh89zuUbhdA6nrW0P4vGzWbLkefbc8/yMcl4s9gbx+ChsW09956vAvsBFwIckEtkkEjk4HFch5XO4XB/S1vYCixYlKC0tYuBAd+ZeSAftO+/8J5Yvv4a2tiLgGyzrBGx7M1BGcu6xBdgbCAPNqGobq1evY8wYtdvz1j5A6otJ/LBhw3oN3v1+/zbRgNp3jHba6bcsWnQupvkpqjqzk2R3ERs3BpkwYToFBQdTV/cSGzbci5QhGhtLCQSUXjs/AGVlZSxbtoyBA5d3210KhVZiWUGE2BuPRycSEXS21NgCFcjDtptTgZ4LywIp5VaDvvadBcMIEAh0nEfsixl1ZhXtKLnHHTeL6urqDia8fU2eoe/nLn3OmpqmMGnS9Rl/wzSN0+EYgKY5CIWeY9GiG5gwIYEQSSZDLJbbbdEmjeQ86RkYxleUllpUV/e+ZymKm2QnuYLS0pKtdql6C7K/zyRjR+7B27rO5ub5gGDs2LFbfe13wU8tzugLfo6JZT92LLY7SQM49NBDOfTQQ3fUWvrx/zG2Zc6kM1Xo+8CQIUO44ILZvPnmm9xzz0XEYrGtVm+PO24Wzz33Gg0NJm53V7oSgNP5KyKRlwCZMpZO2lfIJLcI227FNCuBcSjKO9j2Rmz7AOLxpbjd5wMK8fhGTLMBt9voICpRV/cisVgBbveVNDZuYsiQ6ey11zg2bHiajRv/QyLxJskqu45lrUdVTUaPvhrDqKK6+muczouIxe7Gsn6PohwODMe238K25wNB4vFmoAlVPYh4fDMOx6wM1crh2IdYbB6K8gts28QwDkeIOdj2bUh5NLHYbSjKrijKFdh2HJdLQwiIRjejKOtSNK1jaGuL4vNpuFwTgVpcrhHEYg9gmhXAAcCJwMvAO7hcM1OD/u4OnmtJkQVPh412ypQpFBQ8nNnsupvLao9EogmXq5TRo69hzZrbCAZ/RyLxNVAC/CrVDQqSFIjIRtM0FEXp0HV0ufYhGr2fWOw9vN5jcTj2Jhx+HcMII8RZXQLBpKLmWEDDtt/D6ZyJqhbT0FBDWVlZlwCvpuZJQqF6YFeczktJWhx0hBAqWVl7YhgHE41+RG3tEYwcuTO5uTuxfv2zwK1o2hhM8y6kLCCZoCfdwzUtm2g0hmWpDB16LiNGDKS1dSEbNtzBIYcM5ZZbbsbv93cI2rOzR2fmm0IhI6UMuS9wKvA88C9gCqDj8w3G6XT0et62xSR+7drXmDv36h0aVKWTz/LySwiH43i9E2hsfA1dn5YKwLeIbEQiyzIJ9dChszGMZUyb5uXoo2du9dnRHvfffxP//OcrXbpLut6K252PZY1FUdIUyiDQ3WdKIAtFcRCNRtG0BKoKO++8MwUFn3ynoG9b52Q8nmGsXLmKmTNPxzC8PZrwbu8MTXtzaLfbzfvvf9Chy9cdjVMI8HgUVHUzU6celHmGKsqhbClQdUWSvdBKbu7B1Nb+A5crwvLl1zN69LU4nVldXu/1jsK269C0BZSUnLfVY+ktyP6+k4wdtQdv6zpDoXeA6fh8faP0fRf81OKMreHnmFj2Y8diu9Qd+9GPHY3uZIG7U7hKK63taCPr3jBlyhSmTZuWUQ7r7RjOP/80HI4okch/icc3dlH+isfb8HgORFFMbLsa264HLGy7ira2W2lpOYlg8E9Y1mfouhP4knj8Zmy7AdP0d1F8S6+nvWKf05n0nmpp2UA0WkNu7h6MHn0ZEyZczsSJlzNx4jUMGjSLeDyL7OwpGMbuJBJVhMNvYllXpbpqd2Oav8S2PwT2B64H9kOIqTgcM4nFJNHorphmUhrf5ZqFojRj27elKJ3l6PolKcrl2UjpBi7GskwUxUCIViKRZTidtajqBoTwoWml2LYgHo9lftOk0bAARgGnkOykHQrUEY3OxTST3PutqdF1VpTrbi4rjbTH0YABeeTn78HQoadh20tI0kLzSSZqXiA3tbYQlmUjpURVvZlj2EKZ/A9SxnE6f4kQa7HtTQjR2cJEpl6ThxCjgLdwOAQORz6JhOyg8BmJVLJq1Y2sW/c4tu1Ayhm0tVm0tgaJRLoaNyd9f34DNFBdfTfxeFtq3mgdQryEbW9Gys+Aw4Fk8pyEjRD1JLteyQ5LYeFBlJScw4oVdZnP76xsmp5v8vkkQgxDUX6DooAQ+wP1CPEAQiRnePqiIvhj+QS1trby8svvE4nsysKFK1mypILNm3chkaimuflGwuHmzG+dVj5taGgmHm9LBYFtXH75ZX16drRHWVkZl112Kf/61+M89NAV3HffbB566Aquv/4SiopK8HpdGEYWiqJ2Y6kBaV86VVXQNA3LsjLB/957771N6pjdSe5vy5xMILCI5ctvpKVlaAd/sMGDnyYSOa1bi4C+ojtlybPP/hN33/00kciuxONbzK/be6KNGzebCROuYI89nmTIkCuZP39xZvYzkSjBts1uv09Ki7a2j5DyMcLh96ioSNDQEKOp6SU++eTXfPPNXwkG6zvsWdXV11FaapKbuxins+d5NOjd4iCNnjzO0kj6bL7HsmVnk529munTp3XzKd1jR+7BW1tn+njXr5/LoEFdffy+L3zfcca2WFH0FdvyW/4UEst+7Fh8p06aZVls2LCBurq6Hr2ctlWt5+OPP+b2229n4cKF1NfX88orr3D00Udn/i6l5Prrr+eRRx6htbWVffbZh7/+9a+MHLllrqG5uZnZs2fz+uuvoygKxxxzDPfeey9ZWVsqXUuWLOH888/nyy+/pLCwkNmzZ3P55Zd3WMuLL77IddddR2VlJSNHjmTu3Lkcfvjh23Q8/dg62ldCzz77OL79dhXvv9/3IfEfE52ruIcccghjx75EXd0yIhEn0Wh1F+Uvt/sQvv12MQDx+HpsewVtbS8gZQmKchIez4E4nUUoShjD+JBo9D6EqKekpISBAwd2GU6Hjop9tr2BePwpVq5cj5SiizrZwIGz8Pt3pbLyNZYtq8GycnG5LiUefxDbfhiYnOoUHQP8FkWxkHIjUq7E6TwPhyOHeDxtdJzsGqUl5ZOzVhcg5SEYxp54vdcQCp2JbU/Atr9OBdY6uq4xYEAebvcmVq5UUqIqIYRwEo/HkFJLHdflmOYG4DKE2AfQkDICqFjWA7S2novHcxQu16FbVaNrX0X1+/fJzGUJsSUg6kwjjUQqqah4GNsuAKajKF8jRBhFyQF2wTQdSPkJUh6JaVpompY5BqfTyFAmI5G5qOqpuN0HEYu9i2VVoygJhMhPHUsQIZqw7RBZWfsi5WPE43fg8VxOex+4tLJkKBTHsrxAAZp2BIrix7YTXYRe0nC5JmEYZyLlXFasOJNAoA63+3QSiQWY5lkk7Rr2QggbVU12dS1rJYpi4XSW0dKS9OvTdb2Lglh3Qbuu52BZOllZJ6Oq41K2DqVI6SMWewDLupx4/ChUddpWz9uOmH/aHrz88sssX16PlOPQ9cG43fkIsTtO50BCoT8SiVxMLDaN7Ozp6Ho+mqYRDn/IihV3UFzcwNFHz6KmpoacnJztsqPpTO+bP38+brdOcfEA1qzZRCAwFMv6F0JMywi02HYCKeMoiiQry4lhKAhhdqiwf9duQl/nZNLCPLHYWByOQyks3Dnz+r6Ii/SGnjqrjY1vUVV1K4YxjiVLOtKfOwtERCKVBAJLqa1dzYYNm9ltt91SYkYLcTgG4PEUo2nOzBxbPP4hlvUYmjYYOBtN81FePg6XayMVFXfT1PRnWloeoqCgEK/Xldmzpkw5hTlz7tkh3ZueBFcSiWY2bHia+vp3SCQiaBroeh6zZ1/foVu5NWzLnGBv6G6dPt8uRKNVJBJNtLWtxDRXMXRomBtvvJLa2tqtrq0v6Lwfjx8/vsu9t6OOsT16omJ37hZvD7ZVKOmnFB/147tju5I027a5+eabuffee2lubu71tT1JzvaEcDjMxIkTOeOMM/jVr37V5e+33XYb9913H0888QRDhw7luuuuY/r06axYsSJjB3DSSSdRX1/PvHnzMAyD008/nXPOOYdnn30WSPpxTJs2jUMOOYQHH3yQpUuXcsYZZ5CTk8M555wDwGeffcYJJ5zALbfcwpFHHsmzzz7L0UcfzaJFixg3btw2HVM/ukdvD7aDDtqFnXceg9/v3yaq0A+F3taen6/Q2LiAyZNPJhxOdFH+Mox8KivdmOZ6bNtJkr43BZfrMnTd286bLDmsbhgJDONWAoFGhg0b1u1cQ7ozZJprCYf/hGlmYdun4XYf2kWdbPPmS8nP3y0lna7i841DiIk4naOIxV4iGv0zUA4cBTQipUTXazAMBZdrKvAtQggUxcp0jTweb8ZvKxZ7iUTiWUzzYaLRNpJeZmMpKvJQUlKMx+PN/BaNjRUI4UspWn6IovwCy4oSj69LHVcBMBT4JUk6XzKBUNX98PnG0tb2CLHYg9j231O/W/dqdK2trdTU1HD00VN5/PF/0tCwGmglkXgXl+tXmUCsM4107doXiUQkMABVPQ5FWYaU8xFiJpCLEHunRDFmIKWKbVuoqgPLihKLbcpQJlevvpVg8CtyckaS7MZJDKMay1qHlBaKYuP1OigtLaKk5BAMYxArV95MOHw+tr0TUhYRDrexfPmNRCIjgTKE+HtK0c+HlCYgEMKFbSfaJc/J6r0QGoqyCz5fMZMmRfjggxBCTEbTRiLl45hmAFiPEFUZ6q3L5cXpHISi6ESjTRkJ/s4KYt0F7emiga7vTSLRTCLRgm1LIBcpT0PKt7GsR4hEHt/qedue+adzzjn7Oz0vKisr+ctfHieRcOP374WibNkqHY49yMm5n2j0BWKxpwiF/o7D4USIGKa5GMsaQDA4mPvuewtNe2uHBGqwZT4lEvmaCRMOparqaKqq/oRp3gCcmboWFFyuHFyubEyzEV03aG5+sEPw/12Dvr7OyaSFeVT1DDRtU7eiGduTXPemLCmEiqr6cLv3Ihpd14FG2x5bbDRysaxz8PkGA5CdPQLLaiWRqMQwqnA4HKiqiqrWoyhPoih74/VeBShY1tdomobPN4Fddvk7sdgmVq++iry81Vx11TlMmzYtcw3OnevZYUF25yRj9eq7aGiowzBG43TOZMiQQygtHYnDYW7VCqE7bMucYF/W+dBDD/P889eyYkVX5dnJkw8lNzf3Oydp25ok7ahjhL5ZUbz55gX85jczGTx4cI/JY2/4PhLLfvw8sF1J2lVXXcXtt99OUVERp59+OiUlJWjad2rKZXDYYYdx2GGHdfs3KSX33HMP1157LTNnJjeHJ598kgEDBvDqq69y/PHHs3LlSt566y2+/PJLdtttNwDuv/9+Dj/8cO644w4GDhzIM888QyKR4LHHHsPhcDB27Fi++eYb7rrrrkySdu+99zJjxgwuu+wyAP74xz8yb948/vznP/Pggw/ukGP9/xlbe7A9++wblJUt6fPG8kNia2uvqXmO1tZPWbPmZsaMub5LcKnrORQW7sG6dU+jacXAILKyOoo+pJE0+y3G5SogEllMfX1ZtyISiuJGygjh8B+xrAmo6vl4PIWZhK+jOtlcqqqeQEoTTatGiKT0t6oOwe0+i3j8I+DXKMpoQMG2BVKuQQgFTcsD0iqVHyHEdOLxGG53Up1yi9/WWbS1vUBBQRUNDR/g9RYzadKkLgmmorhRFB1d35V4/A2kTAoOGcZrwE4IcSTwMFsEEiSQwOHQ0PUR5OTcTDj8OYWFtRQX52bU6A455GBqamr4+OOP+fzz/7JkSQ2trWCaYNsgxGJ0vZW2tkcxzQEoiqNbj6OGho+Rciek/BqHoxxF2Tu1zhkpEYFZSHkpUt4GXIpt6yiKQEqJZW1iwIA8cnIG4feXk5v7Hj5fhG+/rcKy3sXh2A9Vlfj9PgoLCyksLGz3+yQpg6tW3UBb28MEAh+wbl0lodBQsrKOxuerob5exTBiGEZNu99HIATYtiQajZCVlZ26jkyECONyeTjooKmsWvUehYUTsW2bcFhn3bo/43AkaZxutwQa8HiGEoslE+P23bzO4gbdBe1JufgYsdgGpHQgxGAUJR8hNGx7Z4SYgKLUoeurGDw4n+zsgm5VBH8sn6AXXniRxsYcHA5Jku7ZMXBLdo4vx+0+i3D4NXy+SqLRDzGMPcjJOZHy8l/02TOsr+g8n1JeXk4iMZq6upex7aVIeSCwG/F4FlJqmOYH+HyfU1ZGl+D/uwR9fZmTSdOvVfUULKuV0tK8HkUztjW57q2zmlYuhXCXOcE02ltvuN2XEIutwO/PA5Yj5WJ8vpnYdpy2tpXoepgRI8oJhd6nrm4QHs9VqU75xi5qjS5XEWPHPkBFxWwqK6s6HMeODrLTScb06dM488xLMM1fUVp6MX5/QYff+bt0K7dVZKc7NDc389VXq1GUPSkrm4rXOwWHIwe3WxIMfsorr7zBkiXX8tvfHr/d3/Fd/Pq+6zFuzYrC55tIKLSCL774iq++up+iomLcbn27Cjc7MrHsx88H25VZPfHEE4wePZovv/yyA4Xw+8b69evZuHEjhxxySObf/H4/e+65J59//jnHH388n3/+OTk5OZkEDeCQQw5BURQWLFjAL3/5Sz7//HP2339/HA5H5jXTp09n7ty5tLS0kJuby+eff84ll1zS4funT5/Oq6++2uP64vE48fgWznAwGASS8rs90UG3hvT7tvf9P0VUV1dz7bW309g4iZ12uhhVTZ8HE4fDg8dzOJZ1CFVVd3Pttbdz//03UVZW9oOvs7vfvi9rHzjwEFatuoJg8HXWr28kL+8I8vL2Q9OyMc0Qzc3zEWIFubnLicWq0fXL0DQTTaNdFy2ZoEWj68nLc+LzHUhd3SJaWycDXVXC8vPH4HK1AqU4HOfi8bhwuy2gcydbweE4k5aWl/F6R+ByvY/TeThCJI8jkViCy6WjKIdl5rXSAbfH48DlakVRfMC+xGJvoygHYdsGmhbNqFMm1+5AiAkUFhYRCr3P4ME6yZi+43Wcnz8Gn8+NYRSjaSuw7dux7WPQtG+AnXC7fViWDjQjRDZShhEiTk6OD01LfpaiDMEwdAoLxxOLraa2toG5cx8mGDRpbKzHMEbidE6luPgABg8ega6bNDd/gq4/h6YtwuN5lfLyi/D5tgSS0WgF69ffQyLRgKJMxeVaiqI0oSjTcLm+Am5DVS9BiFJs+0os606k/ANwEIoyAdv+DI9nExCnqqqK0aMj3HjjYwwdOpTrr7+Bt95aRmnpCR2+M3XVZf4rK6uQvDwP5557GrvuugvXX38PhnECgwfvQmNjDY2NraiqTtLf7sh2n2GR9L5LziXpuoN4vAGP52sGD/YgpURRTFS1hfz8gRQW7klz8xNY1mKczsNxudJzhkbqXBpIaeN2y1Rn5gNKS92MGTMGwzDwer384hf78uSTb6Moh6CqDoRoRVWDKApo2miSaoPJ47OsOG53AS5XKdFoAa2tIYqLBxKLeXC5XB3ut0gkgqrquN1uTDNCW1ty/k9VFbKyutJ+Nc2NpumEw+HtfmYGAgHmzfuS0tLjse1/YVkf4nR2pLnbdgDTXIEQUTweg0jkv6jqnhQUHMmIEZNT69q251lfnvXHHPMrPvzwWtat+wNtbY3E4/nk5V2BbTdiGF9h258iZRTbDuB0buboow/myiuvoKysrMvnlpaWctFFF3LGGaezfPlyNm/ezMaNGykpKSE/P5+srKwe15JeR13d7ZSXt38OJhEKLUFRQNcH4fPFKS8fiq73fFzFxftRW/skixcvZsqUKT2+Ln1uCgpOwuVS6Ol5kj5nipJPIFBL+2dmU9PLQBF5eX8gkWjB55MUFhYBy9H1dxHiEIRw4HbvRDS6EsOoJxxeRFbWSTidClLGsO16Bg3yd3mm6bpCQcHhzJv3LGec0dRBDKPz752m5I0dOzbzum29Zt95Zx7x+Ch22eX6dueg42fousKoUX9g/frLePnlf3LBBbO36Tu2F+33yrFju14jfn/yvti48V4gGd8NHTp0u7/jx4glXnrpZRoaihg16g+oasfrMRhczOrVdxKL5ZKdfR2WlY/PN4DBgwtobv6Ep59+mw8/vIobb/wDEydO7PN3ejwe9txzzw7/1h9f/rywLb+3kGluyzYgKyuLc889lzvuuGNb37pNEEJ0mEn77LPP2Geffairq8vIjgMcd9xxCCF4/vnnufnmm3niiSdYtWpVh88qKipizpw5nHfeeUybNo2hQ4d2MOJesWIFY8eOZcWKFYwZMwaHw8ETTzzBCSeckHnNAw88wJw5c2hoaOh2vTfccANz5szp8u/PPvtsv29FP/rRj370ox/96Ec/+vH/MSKRCCeeeCKBQGCrqqbb1UmbMGECdXV1W3/h/2e46qqrOnTfgsEggwcPZtq0adstL2sYBvPmzePQQw/dqsfKzwGBQIATTvgdkchJDBiwdRGWhoY38Hqf5R//+Ov3LtFbXV3NK6+8yttvL6CpyURVda699kQeeuh5DjpoMocccjCXXXbzNq/9oYfmUlNTQzQapba2luef/w/19YVIWUxd3QKEuBPDaMWyTKS0EaIOTXsH216IbZtI6SUpxBpGyiBZWbtSXn48xcWHZLpz1dWPUFn5KlJeha4Px+sdQdKMuiOktAiF/oFhvIDLdS3DhsWpr3+EWCwXVZ0GOAiH/4YQDwAmUjaiKAaaFic//31aWhpwu29HCAeGsZhw+HZM04vHcxgu10EIkY1ttxIOP0tW1gLGj4eddhrIu+9GGTr09i7VVIBotJply64lFhuDZU3E4XgRy6rmb3/7A2efXUg4/EJK2OJGdN1JdvaWWavUUdHW9iaa9gSxWClDhvwWId6htrYis9b0sUej63G5QowbtxNutxvLSrB69bmMHt1GJKJTVxdi48ZqTHN/HI4JJBJv4PE8hmE8lTLTvh0hdExzFfAaivINUlopY+h6YBiKsheFhftQXj4mRetZQHPzS6jqt2RnFxCPuwmHgzQ312PbI8nLm8GQIUeSlVWU6bSGQu8waFBLpsr6/vvvc9llD1FU9CcWLjyJRGIkQlyLbV8DbCKpzPgHwEGSEtoMLAMCKMpS4FV0vZySkqPJydmHpqbn2Ly5Fk27AtsOoOvVSPk0pjmR3NzZ3H77h1x++aFEowrR6EoGDfJSVlaaMlpe3m1FevHixfzf/91JVZWHxsZKDKMc03SiKLelBGzSghaeDqImsVgNpnkJF1+8B1dccVmHz/z000854YTZxGJn4XQeg8ORhxBaaoawGctqxOUyGD16OD6fb4c8L15//XWuvPIRBgx4FNOsp7r6NhKJ8WjaQUQi92PbuQgxHSH2RUob0zwHOAxFGY/PBzvvPKrH7+5tfX191t977308+ui3OBwXsHlzBMOQGXEgXRcUFeVSXFyMw6Gyfv1lnHrqiB67J+lztmFDLtnZ08nL27ddx/8TQqG3O1yHnVFdXc2rr/6Lt9/+L5s3m+3sAgJs3GgyatQzZGcP2OpvbhhBamvP5p57Luq1k5a+D4YPfw6xRYa0A7Y8T8bidl9ENLqMMWPKKSgooLn5c1asuAeH40Hi8abMs8Dn0zjxxHk8+GAJy5bdnXkeatpehMMvIsQ76Ppfse2O11t3kFKybt3x3Hbbb5k8eTIrVqzIdM123nnnHUZN+/zzz7noonsoLX0EXd/6td7X33hHoP0+7/ONo77+VRobF2AYZrtrVaOwcE/Kyn7BmWeu5OGHn+fJJ+/v8337Y8cSvf3+69bd183+YxCLLWHs2GHk5uYCYFmJrd6j3yf+1+LLnwvSLLu+YLuStGuuuYZZs2axaNGiH3ReqLi4GICGhoYOnbSGhgYmTZqUec2mTZs6vM80TZqbmzPvLy4u7tINS///rb0m/ffu4HQ6cTq78vOTanbf7QbYEZ/xU8DKlSupq4syePCBGMbWjyc7OzljsnLlyu/Mj+8NHXntJ1FUdCButxv4D4HAr3nkkTd47rnXaWnRGTly29ZeW1vL/vvvT2VlJXfc8QgbNkxg6NAraG39gkTiS1yuEpzO4ZhmCMNYSFvbvUALQuyKohyDohyMlB6kXI9lPU4i8Qqx2NU0N/8NXXehqqCqzTgcKkOG7Ell5Qaam1ehaQNwOPLbBbVJYQxNM7FtQTQaR1HGM2rULRkfoXg8SjRaATyFqh6Iw5GHphWSSHxLdvZMWlpuorn5zpTh626peaynsaxnaG19MiVlvBmPp5mTTz6W3/42OeO5dOmlrF59Z7fqZpo2nLKyC/nmm98h5Rfk5u5GIBAAQFHKkHIm8fitCPEXnM7LiUTCqWRWSSkKCkKhd5AS/P4T8fvzWb78EyzrNBSlvV+djhCjaGlZRlVVY2pORScr6xhaW5/gySfv4JZbbuX11/MYPPj/8Hg0vvnmHSKRz9G0Y4jHL8W270yZUI/DsspwucIoyqdEow9g24cBs8jLUxg2bGxmri0UaqS2tppotASXaz923fVkBg4sJhRaSkXF3dTW3k99/YMdVOF+85uOMyqBQICGhnpWr55LPB4FjgVGA9cCVwLPAd+S9CTbDCwEokATUA8chMNxCtXVPqqrW5FyAonEJyjKY2RlXUEw6EXXZyLEy7S0XAVMJxxuo6WlBZcrgGWt5ttv76CsrJmbbrq627nI3XbbjQceuIXbbruNJ55oQsozicf/jpQ3o6oX4XJloesuTFPFTKmcSxknHH4Iy1rA6tU+7rvvPsaMGcPee+9Na2srf/rTn7GsEhKJZej6ucTj6WvHAXgQooSWlgoWL17PuHHD2bz5TY4+eg/y8/O3en92Rlp84NlnX6OqKkht7bcoShaKciSJxKMkEs8CR6Ao16MoXqQ0se03sKw24BCys4sIButYvHh9t2IV0LfnWW/P+tbWVl5//ROysk6juHg8JSUGoVCoizgRJGcvnc5pvP76E5x11pldkoPKykquuurWzPMofV8mz00+eXkz8fuT80xXXXVrt/NMw4cP5w9/uISzzgp0mJMZPHgwp5xyEa2tC3G5ehYXMYxWgsGlbN78Hh5PI+Xl5b3uc0kfPYNoNNqjsqSmDWfo0MtYufJmmpouxLZ3Ih4vJpHQaGtrIhhsQVXr8HhMhg4djab5MvQjt3uXDs/DtrYHiUaXIYQPj2c5JSVDGTRoEG63h54YS4YRIBIJ8Oqr/+Lmmx/c4Wp/acRiMcJhAynzMIzuE9b2kDKPSMQgFot977FEep/3+3P46qsriEbz0LST0PUDM0JW4fCHBAJv0NT0FXA89fWxbdrnf+xYoqff3zBaqanpbv/RiEQUolFBVlZ6vXqv9+gPhf+V+PLngm35rbcrSTviiCN4/PHHOeywwzjqqKOYOHFij5WJU045ZXu+olsMHTqU4uJi3nvvvUxSFgwGWbBgAeedlzSKnDJlCq2trSxcuJDJkycDyeqbbdsZHu+UKVO45pprMpLSAPPmzWP06NGZCseUKVN47733uOiiizLfP2/evO+9AvW/jm3x2AG6KMltC/oixws9D/8KkdyFBww4HL9/BsuWnU1T03JKS8GymjKzMdnZvm5vus5r7zzw7vONx+HQMIwPcTpnoihBYrG7gDhwHEJcgap6U2sB2y5H1y9D10/ENO/E613FpZf+hmHDhhEKhbj00gfIz3fj8+1MfX09DQ013VoAFBQcwbJlrxGNLkRVJ2V8hMrLzyYUWkpNzRM0Ni4hK+s8FCUrMyRfWDgWrzdpVByJzEZR9iORCFJUNInCwv0IBpcQjX5FSYmLO+54hAMOOCDzW/RFTW6XXQYwefIIFi78kkCgCgDb3oDbnUV+/rE0NT1IMLgEOBCYDHhRlAjwGZb1DllZ57LzzmMxzSU9GlVv8bPaYhCdFptYvnw5K1bUU1JyGgUFySJQUdHe1NS8gcMxo53FwGyEOByYQjzuRtdXYNslSHk0Hk+CnXeeAGxi7doXqa+fRyi0DimnIsSpRCImK1fWMH68v0+qcJAsIDzwwNMEAs3E418ARcChCKEDk5HyIeBvwEvAB8B4ksbfk4DHUq8/H9McgJQ+srL8aNouKIqHSOROWlvPx+3+BYnEEIqLL8Tr/QyAtraZQJycnHzy8rI44oitixsMGTKEo48+mnnzqigsnE4oNICamvswjGtR1SMQYipSJoO0ePx5otG/YlkbkNLFP/7xNc8/vzSj/FZW5qO6upzRo+ewdOnVhEJ/6qKAmvZZC4cXsXz5DUycuO0+Qa2trbz00ks88MAzbN5cSk7O2Xi9L2LbQRyO/UgkyjDND5EyB0WZiZQr2CJaXIMQoCg5uFweoHuxijS+y/MMugqp6LpOXl5ej6/vTUhlR1obdCfA0Ju4SCRSSV3di2za9BnxuEEi0UBursYpp1zUaxLTV2XJtFdfe+GdQEAlFmtCVSMMGgSDBnWfSHs8Qxg48FgsK8rGje8iRBaKEiWRWMLmzXmoqkJJycAeRxiqq//G5s3VzJs3hNzcbROy2Bb01Qohjc6CP98notEo0WiEhob7icUmpIp67VU4twhZxWK3AxCLRTP3RV/27h8ylugOPf3+7e1w2iMp3kQnFsiOEzvqx/8mtitJi8fjvP7662zevJlHH30UoAv1QEqJEGKbk7S2tjbWrl2b+f/r16/nm2++IS8vj7KyMi666CJuuukmRo4cmZHgHzhwYGZubcyYMcyYMYOzzz6bBx98EMMw+P3vf8/xxx/PwIEDATjxxBOZM2cOZ555JldccQXLli3j3nvv5e67785874UXXsgBBxzAnXfeyRFHHMFzzz3HV199xcMPP7w9P1k/UvghNpa+yPHm5ORkNoFXXnmV9ev9jBrVe7CSlzedurqFfPnlp2haQYfkZ8CA3C4bd/u1dyclrus5HZKAWOxFLKuFZAJyJVKmJecFabNjl8uJ270z4fD51NfPpaFhE6eccgqtra0UFDycCV6GDx9OWVlZj1V2jyePWOxDvN7zMutN+wi5XIOIRi8lGr0Lt/tSTLOBgQOTAhd+/66MHHkRa9bcTHPzNUiZxcaNThoabNzuKHvvPYqrr76py2bTN3WzpAJdIBDgmmuuBWDMmEEYRh1r1rwNjELXXVjWx0j5MVLa2HYbtl2BongZMWImfr+fxsaejaptuxVYSSSylNraTZSW7oOm+bGs5Fxq+wDYMAw8nkNQ1fm0td2M13tlO4uBJ5Dyb5hmG7a9ATgDj8di0qTxQAVLltxMNJqHaQ4EBqNp95P0Q9tIU1MdixcvZ+edR+H3+3tVhausrOSCC65j9eoRSKkCS0kaemenpPIFQoxAyrOBlcBOwGkk7QqqgSXAhWjabiiKhmWFaWtLyvN7PNNwOIYTCj1MPP4Qqpqgvr6NkSMHA2P5zW92Z/fdd2PYsGHbpCDmdrtxOBR8Po38/IMpKhqe6UzEYo8iZVJ4I5FYj227gYNRlCPIypqBpvlJJCqprX2ZyspH0LSpNDUFMYxjSCSeIh4/H0WZjss1tZ2X4AdY1gsYxpdce+3f+tyhSD8nXn55HsuXryORmIrDcSrhsBNN25m2tn/jcByGrrsQogkhjkdRdsLtlilzbhXbDhEMvobLFcskjp2LAO3xXQPlHRWY/hDWBj35sW2Rv89DVU9ByjJ8PpuddhpEJPJFr0lMX5QlIdnNCIcrgE0cc8z+HHvssaiqimVZ/OlPDxCPV+HxTOr2ve3XJ+XpZGeXU1j4X2prv8U0j6O6upXGxo4ebGmEQquoqnoUr/dwRo26rYva33dRW+yMviasaaQNzcePH79d37ctcLvdhMP1RKND8Ho7JmjtIYQTl+ti4F3C4QYCgQC33XZ7n6T0f+wktaffP22H03n/SSSauiiCwo5PHvvxv4XtStIuueQSnnnmGSZMmMCxxx67QyX4v/rqK6ZOndrhuwBOPfVUHn/8cS6//HLC4TDnnHMOra2t7Lvvvrz11lsZjzSAZ555ht///vccfPDBGTPr++67L/N3v9/PO++8w/nnn8/kyZMpKCjg//7v/zLy+wB77703zz77LNdeey1XX301I0eO5NVXX+33SPuO+L43lq3J8T744HM88shT+HxFxGJu4nGD+voKFOW3OBw1PVZIA4FF1NQ8j21bJBLVeL2HoKp6hkZYXd3QZeNuv/YlS5Z0KyU+cOAsNm++lHD4BhKJxanE7EiEcKdU9SRCgGWFURSJ0+lCCBVdH0wstif/+tdHnHPO2d0GLz1V2S0rjsORoLR0EzU1d3WhIHo8Qxgz5mpWrLiJQOA3uFxTKCw8CSklzc0fs2zZdcRiOXi9sykrOwyvtwiIYBgLqah4mzlz7mHuXE+XAKuvEsJ+v5+LL76IZcuW0dh4D5s2rSMWm0RWVnKzTyrrLUXKEPF4C5pWRTz+GtXVreTmRjIy3O2Nqi2rkljsRRKJz7BtE9uOsXatRl3d38jP3xUpIwghME1IJDSqq9fS0NBCIiExzWNTCcJvcTgOx+0+A5frLEzzc9raHgCSXlrjxk1C11tSCdoEXK7fEgyei6KcljIbBk0rxbK8hMMNHTycegqE7777HhYtEghxMqr6X2A5SfXGIGnZ/WSy9k9gADCHJK1TAnchpQ+YlZpPFKiqF8sKZrztNG14xsYgP38NQjzEuefOAOCuu+7cLgpM53u8c6c2EllHRcVDxOMFKMpM4CKgBcNYjGnGUdUsdN1NIpGFYeyDbRfi9++Cx7Mf0egLxOPPEok8TjQKLpeOy+WkvHwytt3QpUrdE9o/J8LhgUg5mJycZCKdSDQRjR6Aad5DW9vNOBz7p/zvZmDbAtvWcLm8SGkRDvtRVYmiLCDp5QcORz7RaHXGV649vmugvD2BKRisWbMm8/7x48f/INYG3fmxeTzDWLEiaXCtqmdgWa14PAZjxozC5/Pj8209ienNjDvdoWto+IRwuAFNM5g/32bt2oczQf5RR+3fY5IXjVa3k+e/lGh0DSUlWZSUDKWl5VKi0SdS/76hiwebZcVZsWI2Ug5j7Ngbvnfj9b4mrOm1tTc0/75RVlZGPG4C+/WYoKWRntmKRkPcd98TbNo0sE9S+j92ktrT79/d/iOl1aHY2R4/ZIezHz8/bFdm9eKLLzJ58mQ+//zzHZacpXHggQfSm+CkEIIbb7yRG2+8scfX5OXlZYyre8KECROYP39+r6+ZNWsWs2bN6n3B/dgmfJ8by9Y8S9zuwQSDcYLBkbhce7PLLidiGGvYuPFWFOUoqqvD3VZI0xt3PL4bbvceRKOfYVknpaTGdZzOYhyOQiKRiszG7XSqHdbeUwU8nRAtWXIJkUg9SRPp/TN/t+04kEBRJNnZ3kwQ6nDkE4lMprb2rUzg1FvwAsnqcmvrQurqnqCoqJ7LLruUv/71WZYtOxOX61Byc/cnJ6cUIaJEo9X4fE5yc5fj8wXYvPkjNmyI0NBQhW1PZdiwiyktHdJpYxmCZR251SpxX7xpysrKWLZsGYryEcFgCW73qSTFUyRCeJByBIaxBqdzA3l5NvX1biKRKPX19ZSVdaSRGsaiFE0xDyFOQ1H2R0qJy2VhWZ9RXf08bnc1uq5jmjEWL/6SeDwXTRuM252PELtjmlMIh58mkXgUw/gbDocTRZFo2je4XIOYNGlPvF4va9c+TDSah8dzBYbxBbZtoigHtjsyAQicziFEo6s70OI6B8JLlizhySffxLYvwu0enwq4C0nSYd8EjibZMWsFPgVOBVSEkKhqCNNcDGQBOe2YDiLl87TF2y5JAS2kpWU5Pp9NNBrt9dyk0RMlqad7PN2pbW7+nFjMAnbFtmci5T3AV4TDduqTI8BqYBCwJ7ZtkEhYeDxDycq6Ao/nXEzzG6LRCnTdZty4I8jOLmbt2gV9qka3f06Ulf2WRYvORde3JNLJ+3k6oVAc0/wrlrUAKeNI6UEIm1isDUUJYFmNeDxQVHQAjY3/QcrDEcKZmgHd4iuXxo4IlLclMI1EKlm16nra2tZx//1vIKWa6UqMHFlANGp871Sxzh30lStXEQwOxeE4FE3bRGnpFl/CNLaWxPRkxh0Or2XFij8SDnuAqWRlTWLnnSfh9YoOQf6FF55GWdmCbp+T9fWvEo3mZRIxt9vIrG/MmKtTCdxFqOoMIpEi6urqKC8vpKnpA1paXsEwKhk69AaysnJ7/V12lPH61p75kLzu1q+f28HQ/PtGdXU1Tmc+hjECKa1uRazSSHqBQjwuqK4ex9ixc/rcgfyxk9QZM6bz4otvsWzZdZSWXoTfX9hljEFKi0ikInMtdcYP2eHsx88P25VhxWIxpk6dusMTtH78/4Hva2PpbcYibWAai03C709WSBsbI/h8MUDF6RwJ2B0SLb8/WfFKb9wezxXYdh2x2DnEYrej61sMqNOzMZHIMmprKxHipQ5r760C7vfvypAhZ7Bs2VwsS5KkNrYCNkIIXC4nTqerQ5cgGQh6MU2ZCZx6Cl4SiWY2bHia+vp3SCQiJG9bN1dd9UcMQxCNGmze/F+qqrwoSjJ5GTDAw4wZu3PuuU9TXl7O0qVLefzxJ3jnnYHstNPdOJ3d+yP2pUrc11lBgNzcEgYMOJxIZBPRaANSgpR1SPk+QqzGMFQaGiwSiRrgMyor96KwsDBDI1XVnVIJ2oSU4IcT246hqjF0PQc4EsMYiK4/zTPP/IvNmyuJx1fg8/22Q2ChaSPx++dgWc2Ew2+h680UFDTh8bRiGDk4HGbGwFfTTkMIJ1Kmkx1fqisaJKmYGUMIZxdaXOdAeO7c2wiFPAhxOKFQFNuOklRyHA28DRwMOIGvSPrz7AdIFEUh2XGTgBtFaQO2CGkoigPLimKaJopSl+owfoppBonFEjz88Dzmzh3Ovffex7HHHtMl0e4Lnbine9wwWtm48UMsS8W2hwE3kEw8zyI5a+gD/kjSV00Am5Eyl3g8gdvtRggFRfHjcByAru9LJLKMxsYIbnffq9HtnxNJ8Z6u8yNCqGRnH0VbmxOH41lCoaVY1kcI4UXKBFI6KCsbkAq6Cmhru5RIZC4ezxWA0mX2ZEcFyn0tcgUCi1ix4iaCQZMBAy5hyJATOnQl3n77b7S0bKS4uIb8/K37Rn2Xan+6g37ccbOYOfN0/P5fU1i4c4Z+bRitNDUtxLajKIobn288up7TaxLTOfmrqLifuroqTHMqXu9pFBcXd0j+2gf59977OBdeeBr33vt45jlZXLwfAJs2fYqURxGNrsHtNhgzZmTmM9Jzbknq7lMkEs1UVYWQspjiYie7717Cu+8OY/DgI/r0u+yIWaSenvmd533Lypq7GJp/n4hGo3i9fizLSSRSgcczvEe14Wh0feq/xzBgwO+3qQP5YyWp7Z+BTU0GTU3/ZOPG5TidBzJw4CHk5OzGxo2vIeUkLKu1y7XUfm0/ZIezHz8/bFeWNXny5A5zY/3oB/Q9+P4+NpatzVjU1b2YSbTaB8jZ2XqGmqAo/kyiVV9fj9+fDF4aGxegaSchhBNFGYTT+RscjpeJRGajaYej61NTilVtSLmI6uqX2HNPnblz/y+z9q1VwD2eoTgcfuJxDUWxkNKNEAlycvwoSnebm4kQYTRNdHjwdw5eVq++i4aGOgxjNE7nTIYMOQSfL8y6dbcTDpcBe+D1TmL0aI3Nmx9n8+aFtLUJ4nGLt99ew/Ll13PEEXszY8Z01qzZzIABp/WYoKXRU5W4L8F953MdDmuMHXsC4CEUChEMfk1Nzd8xjCJ0/byMWhjcRDS6mGh0HxYvXs6oUdNxuxcQCMzGsspR1fRcRHq2LznvlwwgBGPH3sCyZYdhmh5U9WvAZIsBc/tjyyM7+9eEw4sIBudy6qmH8d57i2hq+hBdz+sQ8Kcpq5b1DVKaKYaABGzC4U04HH4Mw8zQ4toHwh999BH/+tcHWNZQVHUAilKPbT8ODAW8QAh4CLgEsEl2GfMAG9u2U4mZC9AQYj7Jrlsaya6aYSwiHr8j02GEclyuCEOHDgcW8OSTFbz9dsfZoK3RidtTkrq7x5PiMg3YtgZ8DuwOXJHpYiWLE98AZwAvpl4zDctKqvS2N0xvLwLjdH7dp2p0+jnh9Z5MINBGc3M9pmmR7Dh2RLrDGI97ESKMlF+RTITtdudySzc8Lagj5RQcjiEpM+jADg+UtxaYRiKVrFhxE6FQKT7fCYwaNQldTz4j0l2JnJy9+PTTw1i27EV23/28rSZfO6LaX11djWF4GTZsJrruJxKppKoqKR6SSGyRZnc4NIqK9qaoaDqNjWaPSUx7+vSVV17F668XM3jwjfj9Bd3SdNsH+StXftvhOVlb+yRwKpHIBhyO8hTFsaTL79KeutvS8jkbN97ABRccyUknncSCBQt47737f3Ahi77N+/Yu+LOj4Xa7cbt1iosHsGbNJiKRZT2qDfv9TQBo2v6Z67QndN5bfowktfMzcNSoAxkypJna2meoq3uNysrnUJQYEMUwFMrKLqa0tPsE7YfucPbj54ftStJuvvlmDj74YP79739z5JFH7ug19eNnhu0Jvnf0xtLbjEXnDgdsmRuBIR2oCe0Dv+HDS1LvN9G0fTCMJhKJzej6cMaOvZXm5jc6iCEIAU4n6Holv/vdDR1msrZWAff5xuN05pJIBElS16bicjm7TdAgOYQsxEIGDNAJhUK88847mcQ4HbxMnz6NM8+8BNP8FaWlF+P3F2AYtSxZchPx+K74fFcAGqHQayxf/lc0rQyn8wa83v2IRhtpba3H693Eo4++ywsvvJGxH+gLOleJtyW4b/+7pSmiyY5ikNWr/4ppTu4yjO52/wbDuBDT/CeRyCxWr26jrOx0WlsvBg5HyhYgD8tKoKoGQrQRiWzOVDidTkkslpwHdLm+zXRFup+nMLHtFzDNxRx99P/hcrl49NE38PmO6jAwnhQ2WQd8hBDHI0Q+UoKqWkjZSizWgJRRgsEAeXl5mUDY5/NxxhkXEI/7URQfipLAsl5GyjzgT8A1JBUbvyGZpA0hmaiFADdSNmJZNSRplZMxzTeR8rB2xyKRsppY7DaknISiXEEyIV1Ifr4PtzvZdRs69HZWr74zQy8CUudwLHl5v0VKnVDIJDvb7JGS1PkeDwYbMYzNJGma42mfoCWxlGSCfCRQC7wHHISUSrc0+CTtdy1NTf/ixBOT1ejeikXvvPMO3367kUQiD9OswDRbiMcTmOYGXK6CDh1rw1hELHYLppmFpk1ByrUoykVIGUbKGNXVTe3o0ckuS23tc1RX34HD4aOqquB7CZS3FpiuWnU9waCJz3cCO+88ttsEzOUaQFnZLNat+4ja2sMYOXLnHr9ve6r93Z2D9pTv9uIcmnYaLtcWaXbD+JCamjdobFxAVlZgq0mMlLKLKmtP6Bzkp5O8xYsX09LSQlFRPkOH7oPD0dXPsT103U9h4XQCgb8wYsQI/H7/jypk0dd53x8K6aJkJPI1EyYc2qvasN+ftDpyOnfpIqrRHTrvLT9kktrTSIWu+xk16lqGDp2dGil4nKys5fh8NbS03EMwmCzm/tgdzn78/LBdSdq8efM48MADmTlzJgcddFCPEvxCCK677rrvvMh+/HSxvcE37NiNpTfVs+4kcdNzI0JkdVBYFMKZSeDa2toAiMdbiETWpVTp4ui64Ntv2xgw4GjGjTsJ06zAsiKoqoesrHFUVf2m2/X3VgHX9RyKiw+kre0lLOsVVHUKTmdBt8cqpUU8vgBFeYpNmxxceukD3SbGb731NsHgMMaN+2Pmu6qqOnYULasSy3oa09wNh+NSnM6k0IHX6ycSiWGagxk+fGbGfqC8XKMvWhLtq8RbmxXsLrgvLS1Nfc6WoKdzNzSNtCiIlAGkfBXTXEUgsA+rVukIMQiHY18MowLLWk3SRFVH1zUGDNgyD9PUNB8psxHiEAYNOpS6ur900ykNYhgfYJpv4vFswu8vIRgMZs7r6tWvkEyAgth2C5HI/QgxBCmXI2UOyXkwiaI4EaIYKQswzeXU1GykoCAnEwi/9dbbbNzoweEYjGE4se1/I+VnwGkIMRoprwZuJkl1TADzgbXAI8DeQBwh8vF6XQhRim0vx7bntqN7JoB/Ydv5qQ6jhmmuQlXDlJePyfyuquroQC9qamrim2/AsqZRV7ehR3XTzpSk9vf4hx9+yJw5j2DbNjCjU4IGSW83SNIejyNp0H0/Uv4W6C6AszCMJygo2MCUKb/tVRlu553HcOut99PSYuJ274TbXYCUI7Gs/2BZXxCNTiMeD5Gd7UWI2hRNdiJC/BaXK0Asdg2WdQuKcj4ez0CgpNMcaglCJNhzzxH87ncn4/f7v7dAuXNgWln5IJFIECkTtLY2UVh4GTvtNKnXBKC09ATq6v5DdfXdlJV1T2FOV/tLSjZSXn5Ih2JQT3YmPRXsdt65BCkNQqGlGXGO3qTZw+H/Ixz+nI8//rjX7/yuIih+v58pU6bw5ptvkpXlRogoSR++3tE5yfqxhSygb/O+PwQ6FyV7Uxtubl4BwIABpX0SKuquA/lDJalbs61IJu8HkZe3DxUVs5k6tYC8vLyfTIezHz8/bFeSdsMNN2T++7333uO9997r9nX9Sdr/NrYn+N5eIYmtobcqZneSuO09S9IKi1u6Jw6khFBoCQCmGUNKP1IOQNMgK8uFZbWmFB1bGTNmPHl5ye80jECP1dGtVcB13Y+mNWHbX6Lrf0FRrqEz5U5Ki1DoZRKJG1KUqtMYOHB6l8T4zTcvIBSK4PPN7jAP1LmjGIu9iG3noyhXkEhIPJ72YhJbZqYGDjyVhobLqa1dw6hRk7Z6PtoHMNvjx3TRRRcC4PdDVdVreL1TqKv7CFU9s0NQ114URMrzUdUSnM7PiMffJ5GoAnQsq42sLAe5ubnk5ubg8Xg72BGkrxFQkdKL2z2s3exJx06pw6FRUrIPJSVXUVd3AZFIJHNeL7jgWjZuXIdpvoQQG7GsXFT1JkzzauAW4DI0zZMR8ZDSRNMGk0iszXh8TZ8+jdmzrycra18Cgc/R9V2JxZ5LdZEOBECIXZHyDuAp4H2S82gxYB4wKZXcq3i9EwmFvsTrvZRw+I6Uv9thWNYIhPgKIU5FyhYsqwFoZtCgolSxbYtLb7rz8PTTd1BV1UAsdj4u1/CUoMoW2lJnddPOdNf0PR4MBlEUg2TC1V1w6k79b5Bkh/BK4CbgShKJmWjatA4Js2G8jq5/xJFHnsicOff0qura2voITueeOBwtOBwehNARIheHYx9isXkoyi+wbZNQKIymPY9t56Eol2PbMTRtKF7vFQSD1yJENYnE0ej6VNzuYUQi/2X16ifxeBalKuPX99n/qn3Hqb1CcV/eV1NTw4ABRQwblkdT09qUIEwcw8gmEhlDfX0dJSUD0XWdUCjYxdfR4xnCuHF/ZMmSM/n22/MYMOCYLlSxpqbnUdXlhEJFzJnzVK8sia0V7ObN+ydNTesIBG7tttiSRrroEo8vwbYLePDB93nllcU9MjN2pF9Wfv72J1k/ZbXFHwOdi5K67uyidmpZcTZv/jdwOIWF3u4/qBN660B+n0nq9thWfP75E/zrX4//ZDqc/fj5YbuStA8++GBHr6MfP0PsSDPU74reqpjdSeK29yzR9TxGjpzNihU3EgyuQlUPxbY1Nmx4FfgNilKIlAtR1cPJzvaiaTqa1lXRMdmR6b06ujVqxjnnHMlHH33FmjUvEQyuxen8FQ7HIYCHRKKSWOwpTPMfOBwHMnnyzeTmFmU+u31ivHz572hqWsjkyXtk/t65o2jbrSQSn6UUD7OxrECHuZ/2UuI5OZNxODzU1s4jJ2cgQgh6M/JO/w6DBw/mjTfu3GY/pkMPPQSAjRurqKh4DkUJkkjEUNVdse0wTqcLqGknCnI5th3H7dbwePbF7T6DUGgusICkZYHG8OHDe+wsKIobsBAijKqqXWTj053S7Ozx6Lq/QzJeWVnJu+++h2GY6Hor4fCTJOe+zkTKPBTlTKT8K3AhUh5BUvAjG9vehMPxGbb9WsbjKxAIsHmzSWnpSTQ2folhDECIVpIUwGQQI2UlyXmtRSS7aW2p71sEPE0icQYALS27YdsPYZr/xuP5I4bxOrHYQwjRiJQmkIuiVKNpNl6vh2HDhnX723g8w1i2bD2mWYrffwqquiXQ6kndtCdRBE3TcLk0EgmFpIqjRcdCxHiS29KHwFEkDbnnIMTDqOoTxGJPdkiYs7L8FBaWMH/+EjZu3LXHYlEotIK2tgRwMrr+lwy9GcDlmkUicSm2fRuKcnnKqP7T1HkTCGFh263E4xpe7zkUFKwkEGjv+RYkFKrj7LNP5ZRTriYnJ4f58+f3OpvbXcfJ69W5/vpTexRs6fy+mpqmdvOmv2DgwIPJza2hre0hbHsnKivrqKqqRdMc2LbabeczL29/BgwoZ+pUF2vXdnweuVxtqGobljUZRTm6V5ZEXl5enwp2X3wxg82bv8DrvbXbBC1ddLGsXOA3OBzjsO0YxcXDCAY/7ZaZsSNphtOn78kjj2x/kvVTVVv8MdDXebHy8uRMWiSyEJdr0FY/98dSQ/yuHdufQoezHz8/bFeSdsABB+zodfTjZ4Yfwgx1W9BbFbM7Sdy0Z4lh1GaG1w0DbPsbEonPkDKMqu4JgMMxnHj8HbKzj0bTtiQk7RUd6+vrGTJkUJ+qo1ujZlRWVvLQQw/z/POv09DwBbGYF1DQNInX2wTszsSJt/co86yqToqKfkl9/RI2bQqTZiJ37iia5tJ2EvHp7s6WuZ/2UuKGEcTp9NDc/A5LluyBqrq7pbpBxwCmurp6mze21avv4vzzr+Lyy88lK+tcsrPfIBz+b0oxsYhoNEE8HkLTnmvX7TAzPnLJ3yAfTZuBqq5EiM3EYsM6yN13hs83HiFCwCKys/fL/HtaNr4z0oGCZVmcffalrF/vR9d/w9ChZaxbdyWRSAIYiZQVSJmHEGcCH2CaDyDEQyRVGG1cLg9FRXtkPL4ikQimCW53WYqG+xVu90m0tT0I/BcpI8CDJNUaZ5Cc2/qQ5IzXYGAZUj4ETMfpPATbziIavZ1g8Ft0fW98vt+Tk7OY+vp5qOogIILHY3arPJZGff0rJBIlqGoOluVFUZLd1vbofC8MGzas226F2+0mO7uQtjYD265LCeSMIJ2oCZGDlHsD/yaZzFpAMU7nyYwZMxBN25BJmD2eUVRXX0tJiZ+KiqIei0XpDrLDMYtoNAeXawSG8e8MvVlVh5CVdXUq4b8AKUuRMoEQu2Hba4BWgsGkX6GiDCQQKKOg4AiysprQdRspbQKBexgzZnSfZnN76jgJ0Qx80q1gC3TsVDmdhxEIvIkQB+P3/wHDaKO2tgFNa0hdWwamaWOaXhQlF7+/FE1zdul8jhxZhMvl4bTTTs34p0UiEQKBAA888AyRyFRGjtw6S2Ly5JF9KtgNGnQWzc03EYuV4nJ1lGa3rMrUORgP/B5VVfF6XSQSS4jFlB6ZGTuSZvjLXx7N229fsd1J1k9VbfHHQl/mxX71q1+ybNkyQqG38ft/uh3IHdmx7Uc/+op+Df1+bBd+CDPUbUVPVUxdz8nMnWnaVMLhdTgcYaTcyDffJE11Ne00PJ4DAS9tba9iWTeiqsljGznyZCoqbiEavaOdSmASaVrgxo0VWNaT21Qd7YmaMWTIEG655WauvPIKPv/8c1asSHL2y8rKuOeeJ4jHT92qD4+u+1FVDxs31lBeXo6u6106iu0l4tNKdVv8tLZQQqPRZVRU/IVIJBeoAObh8VxL2vi3qmoNdXUfMHhwAV6vj+bmdykvT/4OixYtIhSK0NISR9Oaeuy8pZFINNPQUIemJf0JBw8+Dbd7MkuWXEIiEUKIGhRlCKa5CcP4BEU5BduOd/GRk9JEUbLJzd2dpqb/oKrX0NCwKSN33xmK4sblMoD/oiize/1tLStOS8srjB7t5Xe/u4q6uonASZhmkiZrGCOBhSQT34FAATAZVT0cy1qLlJ+iqq0MGzaCYcMORtN8GY+v9l2BLTTcKjRtAJb1EVJ+BEwGpgJ/IdlJk8DJwNVANfA48CTh8JM4nS6cThvD+C+KsoCcnFFYVhQpwzgctZSUlHWrYgdJf8CKimdYv/5pbPtApFxHMLgRVfXjdOoZkQ3bbk2Zi0eBCPX1PkpK/N12K8aPH095eTEtLZuIxZZi226kDAPFCFFIMlk7nGTi+SdgNooSwemMAuuxLANFcePxjGTDhgcpLKyhsjKElMcRCLSRna10OL+RSCVr195GIFADDEJKk3h8N4R4jERiDtnZV6PrWej6rvh8dxCLvUQs9k8sqw3LWgFko6oluFyFuFxJi4pEoona2gbc7hzGjBmJz+ejoeFmbrnlAcLhkb3O5qal37vvOCWDv86CLUOGDOlCLV+//j7i8SI8nisRwonTmYXDUUg4bKSM118AjkLThmPbbSQSFpomunQ+ly17gTFjzEyBKP08uu2226mr6znxhS0sidWrz6GiYh75+ddttWDnchWiaXnYdoRweCm6XpxR/ItGn8M0fQhxXmpmyYumacTjWzznumNm9FagM4xWgsGlGXl/r3dUr0F+WVnZd06yfopqiz8mtlaUNAyDZcuWMWhQy0+6A/ljCsP04/9ffKck7dNPP+Xxxx/nm2++IRgM4vP52GWXXTjllFP6W7v/4/gpVpVycnL49a9n8MADz7Bs2Wry849mwIBD0TQfPt84TPMxmptnI8TJSBli9eq/Arvhdl+GpvkRAiKRCpzOFgxjMNnZvwE+p7bWYujQi1m//u5uxSSk/IRw+DGGD08wd+5tO2zz9fv9zJgxgxkzZgAwf/58WlroU2Ls843H7fYRjX5FKDSRvLy8Lh1FIbbM/9i2E0URHbwPE4kmVLWemppHiUZ3QlFORVU/QVH+RTg8G1XdHctqIJFYSDTaxvLlUTQtitfbxj777MuDDz7EW299QkNDkKamZShKVredt/bYsOFpDGM0JSXnk0x00v5E9/HVV2eQSLyGbe+PEF8jZQQpd8fj0br4yKXprEOGnEgkchXR6GNY1qEZufv2SG/+o0fnAtFeA4VQaBUrVszGMCr5978TBIMjkPLEVCBfgK43EotVkqQmlpCUdo8jZRTLEmhaKQ7HCUhZS0tLG4ahA1s283HjxnXoCqSl3Q0jgJQvAbsCJwH/B+xC8hHuB65OiXCMRMo5QC2K8jG6HmTEiJ3Izi5nzZrZjBuns+eeU3n++XnoejOlpVN7vIaWLbuWzZvbsKxiFOV8FOUGYBFSHkY0GicWW46uv4lpLsC2zdS7JNFolCVLChk+PN6lW5GTk8PMmQeyevXLSLkSmEE83oJttyLlmszrhPglQryEbZ+PlAaJRJwVK1zYto1ttyFlHV5vG7FYEXV1oGmDqK+v6HB9Gca3rFx5M6FQBCmzgVIggJRDkfIkbPtpWlrOxeE4HK93BppWjtt9NrZdRTT6DuAiO3scLpenQ+ewM71z2DCbzZvrkPLYrRrxXnzx1VjWZHbaqbfkx9ElEWlPLbftaJfZ0uRvpuL17kIsBrb9Mbr+O4RQ6Wxenn6t2z2IQOBjCgrUDglLe5aEbSsEAk1d5tm2rNWJpo2mpmYxQ4fu0+O1lIaiuHE4/Ni2TWGhSiiUVPyz7VBqLvBM3G5v5n6W0qCz51x3zIzOBbp4vJ66uo7y/iCx7TpKS02mTDmlxzXuiCTrp6a2+FPA1ubFbrzxD1x11a0/2Q7kT0EYph///2G7k7SLL76Y++67L0OPEkIgpWThwoU8+uijXHjhhdx11107bKH9+Gnhp1RV6jzfEY0qxONfs379Aurq7kTXBa2tm4BiHI5VKMo/sG0LKEOIK4lGLWKxShyOIF6vRXFxAevXKyhKDgCxmE5bW36vYhI+XxWzZ1/Rq2DAtpg4d4dtSYx1PYcBA/ajouJDDOMEIK9DR9HhmIGmjUdRNKT8ACmn4nLpmSBOSotEYhFwK7FYNlIeBDQCo7GsU1CUl7HtW4GdEGIqQkxGSoHfL8nJ+YIXXngSKYdRVnYKXu9r2HYQh2O/bkUm0jCMVurq/oOmHYVppv/NAHT8/gmUl/+a6uqVOBwnYRiVRCI6qurPmByn0Z7O6vMNZ8yYq1mx4maCwa9obDwuRVvtbvP/E0CPVfTq6r9RVfUoUg6juPh0amoeQ4hfpeTZTWKxONHos0g5BAiQnBE7AiFMhDBRFAO/PxtFUZFyZIYa6PUuzWzmfr+/Q1cgLe1eUXEfVVXPk5zZehnIBc4Efk9S9dFFUlnSStHyBiDEkSQS/6Wm5l0saxWRSJT33tvEmjWfkUg0EQr9A7//oC5d2aQ1BcRiY3E4JhCP34/bPQLYh1jsPyjK4cBaTPMmTDMPVT0VRZlKsiMbwDT/TUvLczQ1tVBRUdHlnjjuuFm89tr7fP31EoR4hby8SzHNCKYZAkDTstG0vQgGYyQStwGjsO1pCLEbQnjRtG8wjL8TDI4hGi1GUarxeg8ErMz1VVf3LyzrIUxzDxRlAFI+BTSmqJU+NG0PYB9M83ESiUcxzcdwOp2oqoJtrwZM3O563O796A7t6Z3ffjsH2x7N6NHXboXq91s+/fR58vP33CaK+HHHzepALe/JgBtAyhDJbmQztn07inJlxrw8kdiMEKtSHU8Vw3gXl6uVpiYXgUAgcy8uXbqU+vooQpSxbt03JBKyRyVPgKysMZimIBoVbO3xnrQacRIOf0Nx8WnstFMOoVCIlpZPqax04vEchqpuEZBoPzvcHp2ZGe1phsuXn0BLy2YsayS6fipO574YhoFpVqBpCzCMxcyZcw9z53p6fF7vqCTrp6K2+HPAxIkTf9IdyH5hmH78GNiuJO2JJ57g3nvvZdSoUVx//fVMnTqVAQMGsGnTJj744APmzJnDvffey6RJkzjllJ4rVv34+eKnUlXqTVGsoeENGhoeIxhcS3b2rxg//kYsazM1NU+xfv1TwNnAqhQFMAYEKS4WWNY6bDuMbTcDoKqFNDTUU1Y2qVsxCZerjI0bz+9ReGF7fOS6w7YmxkVFM6ipeZiGhj9TUJCs8HdWstT1vYhGX+0g+Z9UkHwNw/gTlrWRpBfXBJJCExpCrMayngJmoShn4vVmo2lOLCuCYSykufkLhDgOOJamphh5eZvYuPFNHI7DuhWZ8Hg8RCKVrFlzM5FIC5o2idWrN6TO71L8/nxKSgZm1h6NPoKm7YOi6Nh2CNPMyoidSGmluqHNuN2bqK9fTCxWR1HR3ljWfTidj1FT81Kvm393gYJlRdi8uRqv93DGjr2BdeuuwbJ8aNrxCKGl5veiGMZXwKkoSgW2/SYwAym1VDJsYlkWiqJ2oMnm57/eYTPv3BXweIYwcOAv2bTpG+Lxcmz7L8A5wBqSM1tTAQspbYQATUt+vmkuwLIeoKkpj6ysU/B69yMWq8DvH0A0+g4NDffwxRdXsMsuN3UQoKmvfxUYgar+hljsXYSw0fUYqpoU2LCsK5GyiqSoxx8AF0Joqd8/CxiP1zsYKed1q+o6ZMgQ7rvvT5x33mUsW/YCodBqnM5f4XJtEcgJBu/HNP+ByzWNiRNvRFVdqdnIWior30bKw8nOvpS2tlcxjMcwzVZ0PQ9Ni2EYbxEI/J2k8fduwAOpb95I0qLARAiBEKNwOP6EYVSjKB+h60GGDBlERcVtKYPveUg5s1uBC0gmaooiaGtbQnHxJVs1eQ+HVyNlAW1tozEMY6ty4+lE5N///ncHanl3arVpmOZShPAixHkI8Si2PRuYjGVV0da2HDCQMoqUQVQ1xMCBB9PUtLoDDX3JkiXU1jYCAl0fvFUlT4cjH7BJJFpJzkp2RGfKYW7uGEKhDxHiZHRdJy8vD8tKekKmC2PQsdjS+bfqjpmx6667cv31F3H66RdjmpNQlFMxTQeWtQ6HQ1BaWkJJyXk4nepWFYfT6E+yflj81DuQ/cIw/fihsV1J2l//+lcGDRrEggULOtw4AwYM4Pjjj+ewww5j/PjxPPDAA/1J2v8ofgpVpa1ZAAwadCLRaBWbN/txOI7FshQ8niEUFBxIXd3n6PoswItt12Ka7xGLvc/q1QqaJojHawgEngWGo6oewmGZocp1FpPYuPHVHhPQ7+Ij1xnbmhhHIusYPXowPt+3HTpDO+10FStW/JFg8HSkHI6q1qDrDyDEZcTjbSQSizDNu7DtAEmK2GmADyEkqqphWW+SnLW6Dtu2iMVsfD4fmpZNa+u7qGou2dlXARqRyDL8/n1xu7/uYBDdXmSioCDAihU3pbqdeWRlHYDHowL/wbJKO5gGp+l/kUgFSerax0h5XIoS10QisQgh3iaRWMbSpfVYloGUyfK+prnRNIW99hrMlCl7MWzYsG43/+4ChVdeeZV584YwatRt2HaUlpbFqSB5SxdKymUk58MOACYixJVIeRtwKbatpYoBW4RZdD2LYPBxhg+vYtas6zp8f+e5GCkliuLF43HR1iZIJh8LSZpYuwEbVRWpBFAg5Xps+24UZTfgXIRQsKwVmOY3hEJDKSs7juzsCXzzze9YtOgMRoz4DQMHziAcrqS6+kXgKkKhSgyjGCEgFHoHt3smHs8VhEJnprqFpwE6tm2jKAmkbMa261DVVsaOnUhOzl49qrruuuuuPP/8o9sskLN27ePE4wWZ68jrnU5Ly9+JRucBI1PKgF6gEDgdIdYj5UigDPgPUk5HCGe72UuBqg4A9iMe/4D6+s+Ix8MMHHgVkcgTvZqaSxnHMO5CSo3CwoN6uAu3IJmkZGEYHlpaWtA0tRONsOPr04lIMBjs0EHvTq12y5qiJP34puB2j8Aw/ko8fjswEts+CCEmp2jHDlR1NU1N85CyisWLF7PvvvtSWVnJ3//+Iqapk51d1kHJU8owQqxB09poa2th+fIQkybtidtdjqZFCIc/B7YI80QilV0oh0KAbW9EVevYuPF+cnOvR1Wd3czLJostbrdBSUlXg+qemBmfffY5irIL++57F+FwoosnVxo/hOLwTwXflcHxYyCdHKfXvmDBgp/E2vuFYfrxQ2O7krTly5dz1lln9Rhw+/1+jjnmGP72t799p8X146eNH7uqtDULAMNopbHxC9zuU4jFvBl1v7Qnlq6XY5pfE40mfbbgHGx7DzyeQcDN2PY3wHDa2tZiWUZmeL3z8fWUgO4oH7k0ticxPuusI5g169gunaG8vAh+fwVCrMYwHDQ1PUMg8CWath+6XkMiESMZcKlAFkJINE0lmRiljZW9SGlimmHi8RguVwLLWoHDcV4mqNW0AbS0JBg9+nLWrLmtw0yfqhaxYcOH1NQ8QDw+Dq/3EEzz36hqAkgGX07nAGy7o2lwmnZaWfklsdhTRKNlmKYbRVmFEP/AshzE4yZSTkFRfgHsg2UFkbKGioqFtLQsZu3a15g79+peiwbtA4U//emv5OZuoZuZpkzN9AVJzoTBFiPmHKT0o6pXYVm3IOWFSDkN2B3wYNuBlCn2G2jaB5x22sVdzntXs+IGEokQtv0lycTMhxDu1KxNEEXJzSRoyfP/IlCAEMdj2w/R1rYIsLDtOJWVOg0Nj1FUtDfjx99ORcU1hMO3s3r1X6irq0BRkkbiHs843G4/0ehSotF3iUQOQVGKEGIginI4Um5CygaktLAsBVUVqGqCsrIS8vOTHZXeVF23VSCnO58/Vc1H16cQjz+PadrY9kRgCvBnYHekfJZkMjkJuBS4AykvRUo9lRRUYtsvYNvzsawEjY3rEcJJIFBIbu5vsKzHezU11/UKTNOZMYHvDUmbB5N4fBMrV1pIqXWgEZaVdeyMpRORZAFkSwe982xpeySvSQmEEEJgWRsQ4niEOIXsbD+KoqNp2QihA5Ow7cMJBi/m8cdf4YgjjuCFF16ktbUcr7cV05yPqs7M+JYlEp91mD1sbY2zePFY/H6d7GyDUOg/xONH43RmEQgsShlW56Fpp+FyHYgQPmy7hba2J3G7XycQeInlyzdQVPQrfL5dcDg0Eol3EWIfTLMBt9voUXW0O2ZG+1k6pzMLZy+M0s5zbf+L4g47isHxY+CnvPZ+YZh+/JD43tQd26vE9eN/Ez9mVakvFgBbfMEOwjCiGWPmdNXWNJe289m6AiF0LCuAZVm43b/BMK4CwLKcJBJtqfmoLdhaAvp9+MhtT2LcG4UE4J133uGll15m/vyFtLSsJBhMAANIdmsWIUQITctDCIFtLyXpsXUgyYq9gpQ68XgCRfkaKQW6vsWiI+21JsSILjN9tm0Ti32Npk1k2LDZFBXlsHz5PAzjQ5IKf0l0lncfPnw4I0ZcihAaNTX34Pf/m8LCWVRXv4JhjMa2q4CDU0qcDiwrjKbp+HyDicUG0tY2hfXr3+xTYgzw2WefUV0dID9/HM3NTSmVSR+K4kTKDxEiHSinhVjakNKDELugaXdgWS9i248ixIMkEm5MU+BwaAwYMBnbLmfixIndfm/78/bkk09y1VV3E4s1oiiOlJDCPpjm35DyEyzrSGzbTCXSQWz7U2BfbPtqkkbsJwN7o6puPB6BaX5MTc0bbN68gMLCWXg8b2DbNm1te2OacQA8Hh+xmIbbfTyGcSm2/VcsazJSKimapxcpg9h2ELfbBbTidocpLy/PHENfVF37KpDT2ecvDZdrKvH4w5jmHsC5wGckE9l1JP3lDkx1Zy4HbgUuwrIOR1EKsKz7kdIPHA2MQoiF6PobSJlHY6Mbh+N0CguXEAx2b2rudO7NypV3k/R82xpsEol1mOa32PYJeDwDOtAIN2yoTx1nELc7P5OIHHnkkbzwwruZDnrn2dL2XT5NGw9IhPgU09yQ8hu7AI/Hi9PZ1SzYMNrwek+jtfUxnnzyKd57bxG5uaeh66upqXkDIQakjNDzSPopHgj4kHIplnU7TU1v09wMWVk52PYCPvnkYkpKZtHS8lcSiV06dCGltIjFNpOdvS/jxp1KdfWNKMp7KEojGzdqKEoF0ehjZGUVU1ZW3K3qqGG00tq6kPr6hznqqCEdOtPfRXF4zz337NN7fi7YkQyOHxo/h7X/1GmZ/fjfwXYlaWPHjuXll1/mj3/8I1lZXXn4oVCIl19+mbFjx37nBfbjp40fq6rUlw25/eyGw+HJGDOnK9Hh8F0pn610IJHc8KWUqOoQHI4/ALVI+WdseySBgJ+SkpI+JaB99ZFLz2uYZh4PPfQkxcUDMt4/3dE60onxJZfMYdmyM3G5DiU3d39yckoRItrrurqbr1i0aBEPP/w81dV5lJbeQUmJwbJlN2OaBUh5IlIuRsoPgV+SlJRvL9sPoAA6lhUnHq9HCIGmtTc73uK11tkgOhZrYNmyPzB48HGMHLkzQCb4lPKQDutMz3BtSbRtLGsFZ5xxNCtWrOebby4gHB6GquZj220oymVIKbHtYDt5fj2V7EXRtBOprr6n18Q4Xc196qlXqauLsGnTZhSlCSE2YJoSVZ2EYbyBlDNSFLrxqeP9EEhTFIegqhdj27tSWLiBIUNKSJtiNzV9gNe7cKtzmi0tLbz22kd4PCOw7UBK6v9jFGUmQuyDlP8BDkNKDdO0UJTFQBPwLlLuClyAbbtIJi6SeNyJ03kkDscMIpG5NDTMB2rwevdi2LDTWLfuLx2+v6OP2H+BCLbtTCmBZgMtWNZGsrKsLp2P7VF17Ukgp7tZLMNYRDh8N0kVzb2BBpLdXwVoTb0q2fEVYhdU9Q4s63ls+4FUMj8VOBVQcTrzEGJnNO1dhFiJx3MkkYibtraBjBt3JqZZ0cXUfMOGZ3C7oxjGQmBIj8cUDC5hxYobse0BCLEYl+v8VDdriyG405kDVLNqVQUjRiiZDn15eXmXDnrn2dJ0IiRENooyCin/TSLRBpyIqjoy/oHtkZ75Kisrxuv9Bf/8553EYtkMGXIgPt9EGhrOIxD4HUIchaJcRdKnsBXbfhTLeoYkFfpqYAiqqjNiRIC1a2+msvJipByD338BQjgyVOT23bGsLD+jRyeV/I44YjAHHTSVdevWcf/9TxIMvsOQIVd3eG6mqZMNDZ8QDjegaQbvvmuzfPnpmc7KtggrJZ+7SwgGG1mwYAE77bTTVt/zc8G2MDguueQGfve7k8nJyflJ0Al3NPvk+0b/zGI/vm9sV5L229/+ljPPPJMpU6Zwww03cMABB1BQUMDmzZv58MMPmTNnDhs2bODGG2/c0evtx08QP0ZVqS8bcvs5B0XxZZIFXc8jP38XWlufR1FualeJ7ugVpusTgVo0LQddf5n6+mcRohSHQ9lqArq1JDIddNTXzyMS2YBlJbBtB2effSd+v5shQ3I45piDutA6Kisreffd94hGo8Tja9m8+b9UVXlTcxdOhgzJ4ayzDu5TYtzdhtjY+A5COAAnmjYGy9oP2/4PhjEdXfeypVvUnuaX/O2kjKFpCtCW+Vvaa629hHZ6pm/Tpv8AfvLzt8jAbxEHuZukkuEWpLtygcBmWlsfoaysmYsvvppgMMjRR59BNDqGaPQDpDwdKaMoCrhcDlwud+b708leY2MNZWXTeOONZzJUvPazG9XV1Tz99OvU1w9AiCPQ9U9wu0cjhJd43I9pvgjkoCiLse25qUQ/ByH2Rso3gIMRwgtYWNZqNE0wevQv8aWcxdNea7vvXrLVeYt0R3bnnf/E8uXXEAhEse1/I8QMVHVWir53G3A5UqpY1ldAJXAQcAXJREoihI0QNtFonHg8RHa2F4/nCsLhs0kkouTnH0pOzmR0veu2kPYRC4dvIxb7FNv+BNP0AyaKEqOsbBCDBg3q0vnYHlXXngRyOs8tbTE/LgBGoqq/AWJYlo9kMeEbkolpK+BH0zSEGIaiXJHqhg5AiIsBFSF0PJ4BJBKBlLfeG+j6weh6Lm1tLVRVbWannfbsMNdkWXEikY/Ye+9RVFS8jWUd2aUgk77Pq6qeIBYrQ8ozEOLvtLT8Ebf7Mlwuf4drEyAalSxffgMTJ27p0HcnJrNlPjNJx9S0/YlGG/F49iQe/xOxmANN26uDf2AanWe+dL2AlStvRcoEmuZD1/34/aMJBFSkPALbXoKU72Hb75PsUB4I/AbQ0fUc4vEosdgIJk26n6++Op1YbFdCocU4nU4URcHhEAwcmNehO5amHL7//hNceOEF7LvvvowbN64LMyMcXsuKFX8kHPYAU8nKmsTOO0/C6xUdOivHH39Yl+vGMAxCoWBm9k/Tmtm06VU2bfqMeDyOYcT585/f5K23FvD7359EdXV1j4b3P3Wkn19PPPEkq1a52GmnS3osEMbj9Uip88UXFaxceTc5OQU/CTrh98E+6Uc/fs7YriTt9NNP5+uvv+bPf/4zxx13HACKomDbNpDsRMyePZtTTz11x620Hz95/JBVpb4oHbaf3XA4Du+QLGRn74QQOrZdhqJYgIptJzp4hUlppT5nFuPGnUVd3Rmcd97B7LHHHltNQHtLItPzGm1tNoYRz8xOSTkBVdVoa6tm5coFPPDAYubNW5ChdXSkgZzPLrsciJSS1tb/0tLyX2KxRXg8goMPPqhPG2x3G6KiuFEUBSEskv5dx6WSgNuxrMtR1fbdojTNz0LKGlyuwSiKs8OsTE8S2gAtLQtQVZWcnIGZf0sHn+vX3w6MJx5/A9tOzwKFMYyPqKn5hjFj4plO4fz589G0Avz+EqJRgH1T50+QSJgIEevgo+Zw5BOJLCcet1m/vp57770XKeH9979OWThE2LSpCtueSlnZhRQV5dLY+CWG8RFO50xcrtGY5iFEo18j5XkI8SC2PRshDkdRpmPbnwG3YdtnImUAaGbQoKJMgtbea+3dd4fx3nv3dwiQZsyYTiAQSF1DJv/618f4fGeRnT2aMWOuZtmyawgEPsWyrkVRrk/Nvv0JKX9HUoXzOZLdpKNIdpjSqo8aSasCJ5YVJhQK4/NlAyOxrC/Izt4bXc8hL283AOLxEIaRlXlfsqN2M6Z5MpZVidt9OJZVS1nZIEaNGtXtNbY9qq49CeR0nsWKxV5MzZIeBjyCopQghIKilGGa+yPlqtTv8ClwBLZtpyT2l5IUETkRKdsACyEEgUA9DodBbu6ebN58Hc3NF5PssinU1DQTDH5NcXEeJSUDMwqBZWXNXH31lcyZc08XCnL6Po9EvCQSucDJ6PrhuN3DCIdvJhK5mFhsGtnZ09H1fGw7CIBl/QXL+pxrr/1b5j7uiVo+fvzt1NY+Q13dnUSjf0TTJPn5+SiKQlWVgaq2YFkuVLWjQmPnmS8pJVIm73vTDAKSYLAKr/cUDKOOePwvSFlMUr2xFLibZPjQhGluxrJi1NY2kJ0dR1UHkpt7FpFIJfn5TgYPHtxFuCONznTYzsyMior7qaurwjSn4vWeRnFxRxpk+87KU0/9i6wsk6amD/H5DqW+vo6GhpaMhYBtf4thPI0QA3G5TkFVx+JwtDJs2DAikU8BmD37Wm666bKfHAWwN7Sf32poiFJdXYGU5xAOr+zWk7L9vKAQl5FIlDNkyD4pJsaPRycMBAJ9Yp9A9155/ejH/yK2eybtvvvuY9asWd2aWZ966qnst1/3/jL96MeOQF+UDtvPbkg5qUOyoOs5OByFGIaNZS1DiCJs24nb7QQs4vFN2HZyRmT06OG4XHk0NeUxbty4Lolod+pZPSWRkUglK1feTDg8GMtqPzulI2UAp9OLppUSiRR1mJ26/vqLmDPnnm5pIEVFMygqmpGZResLDaQnOmbSxyiXRCKIlB+iKDNR1asxzZuw7QtQlCOBMcCLSDkRiAMBVLWNsWMn09KyX2ZWBrQeJbQtK040upDsbCdCRAFH5m9+/66MG3cTsAxVfZZw+NGUQIaFqq7mqKOmc/nll2WOLy0ZblkG4EDTBqeSEYltJzp0joSoJRZ7gWj0bdavd2CaLdx8899RlJ3Jz/8Fw4bNZNOmp5ByFbp+LRs2tNLUVIfPtyuNjVtmgNzuX2MYf8A0P8Dlug5FeZdE4gls2yDpx7UYKRehKPuTlbUbQ4cOxTACHbzWhg69gcGDj8jMW9TVPc/ttz/GLbc8Ql5eOZrmIh5vorExwqBBZfh8Efz+Xdlll7+ybt09bNjwKpa1AiEOBI5FiP8i5V9Ids58qfNkoygilXi3VzT0YllB4vEYyaBbxzQdVFSspbl5NACh0F3EYr9HVV04nXoq0c3B6dyfSORjTHN3srMVBg0a1OX66m12aGvoSSCn/f2saXuRSHyGEKciZVqtMQT4EUJH007BMC5OXZ9vANOwbR0hFmKal5CkQx5F0itRRdMkllWLYXzGihVPoigDEWI1Uv4dIY5AyknE4zpVVVVs2PAqeXlLGDkykglk5871dEigPJ5hrFhxM7HYWGActv0wqroP2dleNG0Kun4/0egLxGJPEQr9HYfDCTiBUxk8eCei0dou3a+eqOWaBhMn+pkwYQJ77bUnhYWFLFu2jHvueQ1VjdLWVk00Wt1BpCTd1dL1BE1N80kkNgMmPp9OU9OH6HoeiYSJru9ELHYjirIPcAaW9XvgOIRIJv8wAFUtwbbXEg7X0tzcgJRJ2xKn0yYcrukxQYPu6bDtmRlXXnkVr79ezODBN+L3F3T7Oe07K8OH17F8+cusX19ILOZF05IWAra9gWDwVmx7L+D3xGIamlZFaWk+Hk8Bfv/hwJvU1Y39wWl030V9sfP8lt/vQFUfwOk8HdM0u9glpPefaHQCHs8VgEI0+jVtbW3k5eX9qHTCFStWbPdMYT/lsB//q9iuJO3jjz/G5/Ox33779Sdj/fhR0Felw4EDZ9HYeAnB4K0MGzY7s8krihtVdeFyDSKRCBONrkEIiZROotEkPWfQoGRy5fP5iES60rZ6U6A66KBdMlXd9klkXd2LqQpmEbYdzszD2XYs08UTQukyO3XzzbdSXT1wh9FAeqJj6noOxcUHEg6/jGUlKXWKsiu6fgeGcT+WdS1ShkkKMtwAnAgI/P4s3G43bnd6VuYWpDwWj6erhHY6mRw+XBCN5nSbaLvdZcAydt31rzQ3r8SyIrS2fkVBgcItt9ycqZy2lwx3ucowTY0tdEuBorhId46Cwc+A+1LdlzPQ9ZEkEtegaXui62fT0tLKsmXfYprz0fWzcDrLkXIQkUgFljURh2NRZgYo2VW6hmDweuLxDWRlHU1W1rFEIp/h8dSSk1NLOPwptv0oeXnvUlfn6uK11l65MBKpoL7+HSKR8VjWLrS27szEibsTDL7Dxo33sWGDoLk5HWwNYdy4eygrO4Oqqodobn4D01Sx7TjxeBTYC/gWiAE2tq1g2xZCWCiKklGBFMJJPB5BCIkQFuvXf4ttDyArazKwEE2rAK7Dsg4lEtmLWCybrCwrFaB/hhAORo++pcM90ZfZob4EfT0J5KTpsG1tV2PbCaTcHUUxAb2diIvEtgvRtIuR8hYs61PgeqQ8GdO8maQcfxMwNDVDqaTk8duAf2Kae6Cqs8nObsMwXiGReArTfADbdqCqCqZZh66bXH/9A5lOQ+cEauXKVQSDQ3E4DkVVv0bTVLKzSzNd+uT1czlu91mEw69RUADDhw8DWhg+/FJWrvy82zm+3qjlLS0tvPDCizz66Cs0NERpadmIlJ/idh9Afr6b3NwcPB4v2dnZGEYtdXV/ycjjG0YbqppAUdrYuPEpBg48ASkhHn8rNbd7JVJ+QTIxS9oNSBlHUcKp5C8Py2omGIxlKKlpenLauqQ79EaHlVKyYkU9JSWnUVDQVYa/PdKdlfr6OwmFviUc9uPzzUVRkp8bi72EbRegqteQLB6tAFrIzS3v8Dnl5Rfz7bcX/yA0uu+qYNgTXV1KUJR8nE7RxZMyvf9smWOUmTGANH4sOuG2zBTC9s279qMfPzco2/OmqVOn8vDDD+/otfTj/xO0trYyf/583nnnHebPn09ra+t2fc5xx82irKyZ9evnYlnxbl/jdJaQnV1EVtZ7JBK3s3HjqxhGgOzsceg6xONvA2Fyc12MHTuU8eOHM2HCCHbffRJDhw7NfE5n2taiRYs4++xLefTRNUQipzF48NOMHPkagwc/TSRyGs8+u4Hm5lo2bXo5s7a0hLiqHoBhfIEQR7TbKOM4nXqqA9R+diqMw7EPn322Gq93+jbQQD4lEAj0+LreNsSBA2elEoiF2PYtSBlHyhaSsyh7oig3oSh/ATYDTyDECoLBMF999TWhkKSwcApSvoCUV1JYuApdN5BSYhgBNm58lYqK2QwatIS77rqBY445iGDwjR7Pn677yMvbl7y8A5CykpkzD+xAbdkiGT4AKVtI+oG9j5RJkYwkBIrSiGnejWWNR4g7UNUjSCReB0rIyroGl6scj2cckUg94XAURdkvcx48nuEkEuX4/afhdi8hEplNPP4qqjocn+9OVNWDYdxBOHwMqnoHhYXvMGxYFVde+Ws++uglnnjieu67bzaHHDKa/Pz92W232zolaOnq9lgcjjm4XMcQiXiora3F4ShA17Nwu8uIRn2sXLkmE5T4fBMYP/4v7L33vxg58kRUNQzkkZzl8wIBoIqk4IuClALLkpimSdL4WsM0a9B1A2glFluNxzMOp3MAANnZN+F2j0ZV/4EQv8OyjicUOh4pn6GkRDBxYi2Njddm7qnW1oV8881FrF//NZHIVLKybmXXXd9j2LDniURO49FH13D22ZeyaNGiXq9h2ELvGzRoCRUVszPf4XaXM3LkbIT4AsuqB6JkZxfhdO6Nbf87pc4aRFFMfL69ycl5EJdrGkK8Cvw69VskCwKKknxdUmjGRNffRMoCNO3a/9femYdHUWV9+K3qvZN0QgIBQkKAIDthEQUEAUUWQcUNVxREcVTEhUFxGxH3XUfG7XNQUcdx1FFxR0cFAcENkU1QwpYECJA96b3rfn803aTTnaQTknSI930enidUV1fdun2r6p57zvkdhDDj9XYgLm4eNttLmM0X0K3blQwYcBsjRnyOqg5jzZq1YW2+5ZZ5LFnyNB07dqBLlwsZMKAPvXv3w2QyoKqVYdep0yVjMk2ksrIv8fH+MFOvt7zOPL5AaPn48eMZOXIkOTk5Ic+jLl3+Q2bmLFR1Kz5few4d0sjLK0Cn02G3b2TDhnnk5v6BzzcDk2kJOt1TpKe/is12E3b7FrZtexWfz4HbvbLKcyogGqRHiD+ATWjaTrxe/z8hPJSUpKDTgcezPEQ0qCZqC4cNLCSlpIyp8ftVSUk5hb17CzEae5CQkI/DcRMu1wd4vbtxu78DJiBEMT7fBnS6MhTFSH5+fohqr05njOr5ebTU9f6I5l4JhKtXXcSomrcJR55fDoeBvLxth0tYBH7PyDnDEP17pDGpGn0SDQ3Jd5VIjjUa5ElLTU3FbA5Xi5JIaqOxa59EWwKge/cibrzxSX77bWtImJDBkIPT+Q4ZGSfSqVOkejz+l7fP5w6phRatAtW2bbdRXv4Jv/9+Hz16/C0oIa7TJaNp3sNy1gKfrxJVFWEKbIGVaJ/PgsNhwWA4Pqp+iSYMpLacPqu1C/36PcDGjbdQVvY2Hs86oBgYg6rehqIIfL51QAqK8h2K8j1ebxxlZYKff3bTqZOZyy8fQ1JSEmvWvEtu7ls1Kn4mJyc3uNZeIGTTar2YsrKfKS394nCdrI/RtNNQFPPhUD8dPt+7QFuE+CtCaBgM5TidazEarzpcv8o/oTGZ2uByKbjdxmBx4YDBXFbmpl+/hzhwYGmwjIDfi7CHrl0TGD16GMOGDY1YJLt6rbWq7N79IqWlIMR4nM48wD952rEjD5/Phl6v4PWuPKw2eKQMQQCPp5i9ez/D6+0K7ARGAauAPfjrzW3CX9w5Gf8E24vHU3BYqbIQvf5LVDURg2E9QrjxePy5xZrWAat1LibTVNzuj9G0EjyeUgyGjdx00zkh9ffqkzsUbRhVbcqxXbqYyc11o9PtxuMpQtN6AF8ixMPVBDm6YLM9jdN5DmVls/AXGTejKC5gGao6GZPJgMHgpKLiexRlxuHPweVyYrFoeL1eLJZBZGQMDHria8uH2bNnDx5PHN26TcFgSMTjGVRjXTM4cp9XVFQAUFS0sl55fDU9j9LSLjgswrMEi2UeDkcemzatAF4JyuP7C87nYLV6SU/vg9U6kISEbH755WqcTr+3Ua8fhX/Bw4S/1MAP+Iu4Z6AobQ+PKTdwEI8nH0XJRFU/xGAYG9EACFBbjUmov2dFCI3ycg/p6ReRkTEqWO7D4XgUr7cSf23BrYCKphnRNC2Ya5iZeeT8TR1G1xgKhiUlJSxd+i2qegFFRWUECqJHqqEXeH7t2/chmubBYhkTPE5tOcPNHU7Yp0+fOlMYqtKQfFeJ5FijQUbauHHjWL58OUIIZD20PwdHEzcPR1/7pKbzDx48mCeeuJvnn3+B1aufZtu2Z9DrzRiNujCD4IwzzggJEyotLeW55/7F/v3vYjLNr7Htu3c/FWIgRKtA1bPnw2zevBtFWUZOzgGESDssXqAcloc34i9ELCIqsAVWojUNhFAJFHiuC73ehtvt4fvvv8dut0f8verK6UtMHMzgwYvZufMZdu9+/bDxMxJN+wn4HUV5C70+A7P5UQyG49G03fh8B3A6V1BZuZvt2w/wyCNXcdttWbUqftZsaPsNp4KCTzh0KHJJgY0bN5KXV0FJSSoOx2gU5XlUNRkhihHiSYS4BZ/PgM93CL94xDT8xqbncC02gcUyrlqfx6MoelyuQqxWa9CzGZhIe70pIWUEXK6DFBY+zhNP3BWs8xWJmsJLCwtXsHv3f9G061DVLFQ1IPDgwefbQ35+OaraFSE+xGicGFKGIGAwHAmhFcAuFCUVIboC3+AX1SgH9gF78U+2/V5GVU1Ar7fjcGwhKeki7PbvKSq6F4tlNgBlZb/jcHwE/HT4OyDEAcrL89m7tzdAg3OHog2jqim8LyMjg8svv4ny8hIslkH4fF1xOBLJy1uE03kLTucY9PqTUJREdDp/2J6iWEhMPInOnY+juHgkBw9+TXz8uaiqBbd7XZWFE1BVIz6fA4/HHTGvsrYJbHXjora6ZhBapgKgvPwLLrsssuESiZqeR1UVIB2Om9DpJlJe/j8UJZHExLm43cURi0YnJw/jxBPfYe3ak3G5KvD5NBSlBE1T8Rv+v6Eof8EvygL+MaWi03VACCtCTMHrfYzy8nuwWs+JaADUVWMSohOHqkpJyVp8Pitt2owKKfeRm7uY7dvfw+eLQwgrqtoBRUnBLxZVhNvtJC/vIOCvUWc2JzdpGN3RKhju2rWLRx55lPXrc1GUTuTm7gzmGrZv34Y2bYawf3/oWDMaUygv94c/B0pYBEowRMoZhuYPJ0xMTIwqhQHqNvAlktZCg4y0hx9+mOHDh3P11VfzyCOP1BhvLjn2aQzv19GsHNZ2/uHD/bVt1qzZyqFDXlwuM1CO2exi5MgBXHvtNWRnZ4e0pboCZVZWVo2euKKibwCFtLTN3H+/30CItv4Z+F+0qamXo9M9x6RJnXnvvWV4vWX4fFsRwomqHsBsbhuiPFiVQCiKqoKiaIfbpAvKSSck2IIv10C9NYdjJ4cOraCwcDv/+IcHo3F5xN+rrpy+QG5RcfE2/CIUo9HpdBgM+xDiXVR1JPHxd1SZcHYGQFVHIEQOe/Z8Efwt61qFjeQx0esNwHTi4t7k7LNPjFhSYOfOnezfX4Q/ZLE7Xm8HKioexOcDIb7CP6E8AziI30CxAbvQNIEQRSgKuN1GVNUX7H+9vj86nQmfbxVe71QMBr+gSfWJdKCMwP79H5CZmcrw4cND2lZ9UeHgwYNhXgG7fRdbtizA50tGr78cRalaX86AoqRgMnXC7Z6C1/swlZUPYbXOw+kUwTyfQAitqp6H2/0Kfq/G+/hD+p4FXsQvw5+J31jz4o9y1+H15qOqz6OqerzekWhaTxTlX8ADwESEeABNS8Jv3PZDUVzodCWo6vf897+b2bTJv6jSrVu3eucO1VeVLZJyrH/8LqNDB7/0vd3elYqKnuzb9zFO5wqEiANUFEUD9mE2pzFo0DDi4uJo2/YKHI55OByPYbXOR4jq9f/8CylO5w7i48PzKmubwEYyLmqqawZH7nO/oiqkpxfXaLhUp67nUWLi4GAR+f37F+PzbQFm4XBsxmRSw2TxAyQk9KRTp+ns2vURBsN2zOZsXK5VOJ3JwC+H26zDH6rtO/ycUtA0Bav1ZJzO/fh896HT7aKwcFrECIeaakwGiEYcqiqR1GINhkTM5nR8vgqEMB0u9l3VuNRhMLTDYmlLoEZdt27uJgujq+/7o/q9Eljs/O03Oz5fGxISRqKqhqBq5549BRiN/TEYfgwZa4qix+8J9eHx7EIIKy7XPqxWNx07Hhfx/LEIJ6wpF7Uq0Rj4tXG0C84SSXPSICNt2jR/8cOXX36ZN954g65du9K+ffswr5qiKHz11VeN0lBJ83O03q8ADV05rO38e/YsZtGifx5WybskRCWvsHA5X3/9Cdu331tn22oLqerUyQJcyqJF9wfDy6Ipol2VwIr7qaeOYfr0y5gy5QrKy00cOmQG1mE2n1PjdwOhKD7fHhSliG3b3kdRRoeotLVpUwmsprj4JxyOQlyuvQhxHIoyHZ1uEp069cJo9Eb8vWp6IVaVaBbiJIRwoddfjs3WnsrKB3G7O6DTXYfPp6Kv9gQJeJySk69hz54FDfaYVFZW4nQ6+fe/nyclJSXid9asWYvXCwkJ7VAUXbCWl9P5Li7XF/h8axHiC/whWhn4DZVEwACUoWn/o7KyELfbRkJCPHq9AVVNwmg8Cbt9GZp2JgHVyUi5G5FWc2taVDAYSigp8VJevh+bzT/h37v3HZxO62EhjiM5an78+XSqqiM+fjTl5QeA13A4bsbr7YHLlYIQbSguXoPdXoQQpaiqAiTh860ArgWSgAeBOcAk4JTD20qBr4HFqOr3QAZudzoJCWPQtGEIsfjwNbcDLj3cB2UoSjzx8UPweOLo0GEaeXkvM3/+g8yadUFMVNmqjt/k5PH8/vvjOBzJGI33Y7EMquLdXY2irAJcOJ2FxMXFhdUZ8xei9gGlCBGHEAcRIheTSaN37z71qv8WybgInG/z5oWUl1+Jqo7DaByFXt8Jt3sX4F9YgUnce+9fow77juZ5FPAq2Wx92bDhUYQYTNeu7enUqVONqosAXbpcT37+u+h0y/F43Hg8q9DpZqJp/rBSIW4BDPjLO+gQIlDCRAAbMJvdXHZZJuvWhT5X66oxGSBacSioXS22vHwrQnhQ1T1A1ZDxI3UxAx5zp9PAjh1LycpqmjC6hr4/Nm7cSHp6enCxMz19BKWlT+PPEzQSKIjuFwqxYDCcj9H432ANPUXpjNf7M0Lk4HK9DZyEqmp4vUb27dsbJtMPsQknjDaFoS4DPxKNnW4hkTQHDTLSli9fHvzb5XKxdetWtm7dGrafDIU8dmmMuHlo+MrhhAnjazy/x1PMwYPfoSgXAOdz4ICTDh0MGAxKvdoWoKaQqt69e7Nq1So6d+4c3PdoFKgyMzO55JLTWbz4Fzp2HEFe3mcIMSks/AmOhKIkJe0mL+9ldLo2eL2/kJBwLaoahxBeHI5v2LnzCaA9ZvN4vN5lKMpYhLgao9HF/v2llJb+Ru/ex9XYJ9VfiFWlw3W6mbhcn6IoCgkJHVFVO5q2EZ1uOkLEBetsVTVcAh4nIfRH5THxeDx8+umnwdpi1SkpKWHDht0YjVa83pXodP7JsE7Xhbi4eVgss3C5vqCy8lE0rR1+KXYbitIGvd4IjMDj+SfwEx7PaZSVVZCYaEOn02EynYPD8SVu9xMYjX5vYfXcjUirubUtKhQUfEx5+YP88subDBx4FVarOJzEPxKvdw3Vi4NXrdmnKCom0xjAQtu269m370UKCz+nosKKw3EQRXHTrp2VgwdVvF7wG2GP4/egPQ68CywBFgeOjt+zeAi9XsHl0hEX5zd0dbouh71noNPdiV5vwl/sOR5Nc+Dx+GuuGQzW4KLKl19+GRNVtsD4veGGO/nll7fQtMnExy8I3h8+nxFNs5GYmElW1rVs2HAhmza9wwknXIvVaq3mZfoGh+MPfL6XUJTRgAez2cOAAYMjjsHaJrCRjAu7fRcHD36Fz+dA07bjdq/F4YhDUVQUxU1amoErrrgcgAEDBkTdB/V5Hvl/33iEaENcXFytBhr4FVYTEizodL9gNKaRn+8CJqIoPRHiKWAOqjoJVR0L2NC0AxiN3+FwfI3VeoDExM6ce+45LFjQv9aQ59qoj2clklqsx1NCYeEvGAwn4PWGPm9D62L6vZiqmkhh4UfMmjW8ScLojub9UXWxU9McEfMcA0IhdruDDh0yMBh+ZO/ev1NWthPoiar2RFE2YjbPwmy24vOVhMn0Q2zDCWtbOI3WwK9OYy04SyTNTYPUHTVNi+pfbapOkpZNJOWo6gS8X3v2JPPOO+9G3KchCl0HD3p5/vkXajz/ERnh24mL643DYWDfvn31blt1qiumRZqcHa0CVUCR0u3ej063j/LyB3C7yw+rEfoRwofdnoPBsJ0DB+4HRtK//+skJLhxOJ5ECDealo/L9X8oyknAUzidB/H52iHE9ej1FuLiMrBa+4UoAkbqk8AL8aqrehAXt4StWy+irMwBjEOvP0CHDm0wm43odA683o1omhdFOQWdLg5NUw7X2aJK2494nAK/5caNG6Pqq/qwceNGSkpUOnYcj9f7CUKEqkOqaiJe7zo0rT1wF/7aYasPT4oVFCUZVR0JfI4/9A8cDr/R4PMlEB9/ORbLRuz2OTid7+HxbCc1tQ1gD1GoDKzmhi5qLKJDB79ohKL4Fw7S0y+lc+dpOJ3fsWXLZg4e/BG324vJdCmqGigOHuzFMLVPozEFn68jen03Bg3qxfPP38Izz8zh1lsvo3PnDnTs2AFFqUAIPXr9vSjKBvwetPXALOAVYDbQByhCVY0YDGfhclnR6014vSsB0LQS3O7vAdDp2qOq7VDVZBTFiKKYcDoPYjBAQkJCcFHlxx+3cqQIct1UvSeOVul18ODBjBw5EKu1DxbL2TidW6is/BGH4xd0ulw6d44nO7sP7dodR+fOU3E6V5Cfvyv4/YCXaejQN0lPH4fBsJ74+E6YTHF06ZIR8RkQmMBOnlzzBLaq8mxR0dqgmiLMxmb7jjZtfiIh4SF0upHodImkpaUyevSoel071O955BfI8aEolTWKeVTF6y0jKakjGRmHgC8xm03YbB2w2YZjsz2G1doLne6Nw6UNTkdRZmI2v0lGRg8GDHgKozERu90e9lytz6S/JpXPaNViA2JNVutcVLUITXvk8LMi/B4D0LTXUdVt9O7dM+o21oeGvj98Pt/hxc7J6HSmYJ5jpGdfQCikuNhKauoUdLoEdLpxdOp0PwMGPEBSkh1F+Qc6nYLJ1CHsPXG04YSNQWDhdOnSV3nxxfk888wcXnxxPkuXvsott8yrtwettmdzhw5TyMpaRF5eNvPnP8iuXbua7LokkvrSICNN0ro54v2afNSS7w1ZOXS7PaxevSXi+QM5OAEZ4cALqaCgKERKOZq2NYSqoUzREGnFvU+fThQXf4rdXozL9RmlpddSVPQmFRV7sNvzqKxcg6p+iD9ULZ1Bg+6nXbsB9O59R1ACvqJiAT5fIqo6H1X1oWnfoWmnoNPpgiIkVeWXA0ZspD6pSTr8hBMG0qvXRMxmIx7P8mp5O4E6W54QA7Oqx8mvtlbIypUrj6rUQiQC4yo9fRoWSxF2+yMhkxVNK8Hl+hI4DUUZCgwBPkNRqsptT0VRioEnAIHT6UbTvHi9BXTqdBIDBz5Jeno3PJ77UZTrcbuvJzd3GnFxS7jqqh689NLjwVXXaBY1OnW6GJtNUFb2OgcO7MJf9LczRuNJCPFJcPIYSe1TUfRompuKis+ZMmUMEydOZPz48Vx66aW0b2/C7S5Cr1cQwoGijEKvfxxV7YGiLMGfU3YeMBd4D/8ENQGvdy1erxWDYSBu90cI4Qoa4pHwt6EQm80S9MKkpJyC0xmH2eys857wezVWsmPHUwixn08++ZQpU67gmmseZc6cRVxzzaNMmXIFjz76WNQTJb+Rt4m2baeQldWNLl3a0atXRrCMRlZWVnCBpFOnizGbS9iz5ylcroqQ4xgMiXTvfivx8Q4cjoexWOxheWgQfT5MwLhISVnD+vUzqajoisXyJCbTWSiKFa/Xic/XicTE6ZxwwgeUlo7k7rufiOqaq1Kf55HN1h9FKUdR1kUU86hOYeE3dOpk4/HH/0Zq6h683v1o2m4MBhWjsQtG43QMhjvR6c4iPn4yffvOY+jQ1+nefR5GY3Kj5TNVX0jKzZ3G9u1nRbwXq5dl0TQHQvhzTePj70BVN+DzXY/X+xaKUoLRaELTSnG5PgHAZNpK27ZpTeY9auj7Awhb7ExLmxrx2Qf+RR23W7Bz52tUVBhITLyCHj36kpY2kL597wopJSJEBRZLN+x2J7///lrYAlRdNFZJnUgcjYEfoLEWnCWSWFCvcMc1a9Zw55138uOPP6IoCkOHDuX+++9n6NChTdU+SQw4mrj56jkm9VXo8nrL8HjK8HotpKWFnz+wMmo2H/mstqKpjS0jXN88iaohI1VDLjIybsHlOkBBwbfY7T/j9X6H3e6XjE9KstKlSyLFxQrx8ZfTpk0qcEQEIDf3dXbufB2YhaZtQIhfAA+KMoyEhLjDoht+jhixRxQBa+qT6tLhh684qEyn1194eJs/NC+ggOf1ejEYjMEQzbZt7eze/TQFBd9SWVnJ889/xRtvfEdSkkZ2dibDhw+ja9euR5WwHRhXRmNySG6RXj8Jg+EU3O7v0DQPMA4hKoCzgL8hxGMIcdthA78LOt0d+HwPIsStaNrJlJf3Ij5epV07K2Vl3yPEDoYOzWDatLPIyMiIGK4VbUiv1dqFPn3uYv36mzhwYD2KYkTTCjGbz8ft/is+3wPA9eh0xjC1T02rxOtdQseOBSHGwZHxuIKkpL5UVPwMFKMoXdDr5yHELDTtXXy+N4DBwFmHw9N0GAwf43Y/j9M5CSGeoaLiQYzGE2povQ9Ny0FRKmnT5ogwg3/xxcCQIRmsXFm7CM2BA9/hcnlwuXagKBX8/e+/kpJyJt26TSEhoUO9Q4+qq9xBbojKndlsDgnp85eWuI8NG65k69Zrad/+vJB8l7Ky9cTFgaYtIy6ulLKyczEYGp4PE/DybdsWh8/n9/JVzSetKtphs80nL+/mWo8Xifo8j1TVgtnsAdaiqnNqPW7VZ9fo0aN5+eVnOPvsmRw48AGlpSfg9QqE8BdF1+v7oNMZ8HhS8HgMGAyNn89UWxHv2tRiFaUL4EOIUvT6/pjN83E6/40QizEaX8fl0qEoYLP58497957P3r1/O2rjsiZxioa+P3Q6XdhiZ/W8ysCzT1FsCFGJ2/05BQXvYDbPok+fvsFrqhrmW7WUiKaVUV6+l1mzpnP55XWP72Mhx+tohVokklgTtZG2ceNGxo4di9N5JLzpq6++4rvvvuOHH36gb9++TdJASfNzNHHz1amvQldh4TfYbAoOhzni+QMrowEZYQhX3ou2bQ2lIQpUNeX4de1aGpRydzj2UFKyhrS0/cyePY3HHvsvaWkTQo5rtXahbdsx7N27BoNhKhCH15uL3W4GkhBChLWluhFbU5/U9LsfUab7H6qqHg7Nm4QQZQhRhsfjQqdrg8OxG4NhI0VF/8XtbocQ52G1ZtKlSyf27/8PGzZ8wU8/fc9rr31Phw7JpKfHN/hlXn1cVZ90uFw5+FXcUtHp9EB3FGUuivIMmjYHRZmEopyCogxCp7sbn+8JhLgXTTMTH5/GoUPmKvkPtU9Y6rOokZg4mEGD/sGWLRfgcLiprHwFnW40ev3ZCPEGirIHs9lvSAlhO9y/3+B0vo3V+iOPP/7PsLZccMFUPv30RrZtS0FVS/F630Kv/8th9b1iNO0zYAwwD0UxAG50Oi+qakVRLMTHD8du9+D1Po/P9zMGQ2BVXiCEByEKEaIAVXWj15uwWuOC5w6EY02YMJ7du/9TqwiNTnc5Pp8eWIRePwyD4UqKi0vYsiWf3r2tJCZGn08ajcpd9TwbgOTkUbRvn8kpp5jZvj083+X660cwfPhc1qxZe9T5MCUlJaxZs5UuXWaQknIi5eXl+Hy+w97uhBADUqczkZAwHvDLwNcklhOJ+jyPevZsAzjqrZ6XnZ3NmWeO5KWXVqAoo7FY0jAYUtDrzSiKL6TPe/bs3GT5TJFUPqtTNadp6dJvyM39g/LylzAYRmM0KqSnz6ZdOytebw4+nx2dzkpycm9gFXb7rqMyLqMxXBry/sjNzY242FmTweUPa/0Vq7Uj/ftfgs0WXguzaikRn8+OEBqlpU9z6qlj6hzfx0qOV2MuOEsksSBqI+3hhx/G6XRy5513MmeOfxXu2Wef5b777uORRx7htddea7JGSpqXhni/agptacjK4dixA1ixIjfi+VXVgqKAEGUoiv+zSMp70bStoTREgerRRx+LqHAZkHI/0gfXkJMzh9WrV9doKGuaA78nJPOwOE8qiqIiRPlh2fFQqhuxNfVJTb971RXbkpI9eL2LgRT8Cmo+Kis17HYPRuN+dLq38fmGHC6e+wdJSbv47bdncTiS0evnkZBwMg7HQUpK9hEXd4DFi//XoJd59XFVfdKRm/saeXlr0On0qKoVn68Ms3kIJtMTOJ3v4nYvQdMWB4/nz/uo5OKLR3LppZfWS+CgvosaCQn9SUk5jhNPTGb58g106HAxBkN39Prhhwtlv47T+UrQ62IwqCQkFHDVVVMZPXp0yLECk8KysjLKyzejaT6EWIrHMxhVzUCIfyNEEv5QR1AUBzqdID7egsvVDrNZj8+3ioSEs6ioMGG1fonb/T8AfL51aJqKqiqYTMmoqh6D4UBIqFzAYzJ+/PiwchbVRWh8vhJU9WUMhgzi4+9EUUwIkY7dnsNvv/1BdrZfRbGuempVFzxqV7kLPS74x7bZbGXGjOn071+zoMXIkSPr9NrURdUJosFgqLNUTXLyycAqNm/ezKhR0een1e959ABAvdXzdu3axc8/b0NRCtDrP8Nqvb2K4JEa7PPKyt/45Ze7GDQon6lT74j6Ghqbqp43fw2/9WRkTKtWw+9IOKvB4A+DDtSoE0KwcuXKesm018dwqe/7IykpqcbFzkgGV0nJT+h0hbjdbUlI6FBjm6u+f4QQlJY+W+eCZmOJijUWtUnqN+aCs0QSC6I20lauXMnIkSO57777gtsWLlzI8uXLWbFiRZM0ThIbGuL9qm31sb4rh9dcczebNy+IeH6brX+YqlV15b36tK2h1EeBqiEhFz/++ASKkhCVoarX90dVdfh8q1CUqWHHrG7E1tQntf3uiYmD6dp1Bhs33oHXuxl4B7gFMKPTgV5fgde7FLc7CZvtJhyOPIzG3ZSWvorbPSikNlRcXCJ2uxOvN4OsrCkNfplHGleBSYfHU0Z+/jcI8RU+38RgjldV9UevdyNC2FEUKz5fDj7fb1x88cWMHz8+6jZAwxc1zjzzDPbt+w95eS8fbn8yNlvoZAv0FBX9j8xMA3/5y9UhxwmdFN7E8cd3JS/v3+ze/RY+33No2hnAF8BMFMWDTqdgNhsxmQw4nbuwWi0kJp4cLHxrNA5GiHZkZPjLAcTFdcRgSECvTwBU7PZNtG9/pPBt9XDe6vfEb79to6ysK0ZjQIRGz4EDOxHiyuBYOKJGt4l9+/YFS13UFnpUP5W70ONWHft1eWWi8drURv0niAnB79WX+iri1Vc97+233+HgwQwGDlzA778/HiG8zu/xhU+A1Rx//PhmD3WrabI+f/6tbN8+j7y8l2jTZn7E7/p8bgDats2jsDCRKVOuqFcIX0MMl/r8BtEsdgaefT6fi+Lidxk9+vgaFzsjEe2C5tEW424sovFaNuaCs0QSC6I20goKCrjooovCtg8dOpTvv/++URsliS1Hk3cVifp6nrKzs2s8f0DVKjfXP7EEPV5vAWlpyVSXlG5qGeFo8yQaEnKxa9cLQTGGugxVVU1CVbPx+Zah050bdryqRmxtfVLb726372LnzlfR6c4nKelUKioexee7A4NhIgkJpwOJlJb+gRBnUVa2lcREQWLirxw82C6seG/1PLmGvsxrG1cJCX3R6Xx4PP9Brz+ZhITkEE+rqiZiNAZWkF04HM+RlmYJFqWuT8HThi5qRPI+HWl//+B9kZkZngNV06SwT59s2refyJYt92G3v4jH40RVhxMfb8Fg0OH1FuF0FmCxeOjd+zgMhraUlvqLLFssc3E6BTbbGUAuPt/r6PW34DfQcrBYjhR1rklAI3BPXHDBVKZMuYLExAtp164PCQkJlJWtZe9eEZJPCpHzJiFy6FH1BQ9/wfgjz4Paxpmqas0qK17/CWJ58HsNIdrnUX33rdrnycnDIobX+fPs9HTsOAKD4QR+/fUzSktLj7qfo7kPo5ms1/X+cbm+ACbg8Wi8/35hvUP4Gmq4RPsbQOMudkYimgXNlpLjFa3X8q675jTqgrNE0txEbaR5PB7i4+PDtsfFxYWp6kmOfRoSN18b9V3pre38R3KkHkKI87FaPWFKbE0tI1yfSXxDQi6qizFomkp5eRk+n4ZOp5KSMpS9e48Yqqo6DLP5JxyOx0KMooCYR1paMqqq1dknNfX7kbIH8wE9BsNNGI1LMRrfwuX6N15vIT5fJTpddxTFTWKigbKydej1MyLWgaueJ9fQl3lt46p9ez0FBb9iMDyHThc59EoIF3b7Q+h067nwwrMpLi7mxRf/r17J8EezqNHQmkC1TQpTUkZz/PGZ/PHHA+Tn/4ym5eN07kfTjGGCFZAYDGUNFMpWlCmHf6NfKSy8AjiBuLhB9Oo1EIPBw/79H9QpoBFJhCZSPmmASOI/kUKPIi14HHkePBK2IBA4bmnpIUpKXmpWWfH6Gu9FRSsBpcb87mifOfXxAEazb/U+jxRep9NZSUjoj8GQiMdTSm7uR0eV1xOtKEV9Qgxru88mTOgHQHn5MLKybqlXCN/RGi7R/l6NudhZnWgXNFtCjld9vJb337+I4cN78f77jdcHEklz0qBi1pLWT0PyrqI5Zn1Wems6v8HQhnbthrN792KE+Il27S7GYDgOIUSD2xYtDVG0amjIxYQJ49m69VV++ulWvN4L8HgMwVVrna43QnxLZeWDwFTi4lLp2vVOdu58KhiKpNePwuE4iNlcjF6/lZycR+rsk0j9brMN4sCB79DppuF2F+P1FhAXZ6N373uxWqG8fCOFhSvZvfsr4uNH4vEUUVj4IZrmwWIZE/E81fPkjuZlXtO4stlszJp1M5s2fURl5V4Mhslh4VkezycI8T1duliwWMxMnXolxcVdaNOmfivpR7OoUZ/7AqKbFFqtXUhPv5yionyESECns9O7dxfatGkT5nEOiA/k5b1BXt6LFBV9DVxDmzYVmEx5KMrv6HTLOHjQQFFRdAIakRYmIuWTBogk/hMp9CjScetSufN4VpCbu57evV2N/jyojfoa7+Xlfm9O9dpssVbRq2mRqXo+bYCjzeuJ1vC68cYZ/P3vr9YrxLCm++yll/4JQGbmzWha/UL4mtNwaczFzgD1WdBsCTle9fVaDhmiBMsyNEYfSCTNSb2MtDfeeIO1a9eGbNu+fTsAkyZNCttfURQ++eSTo2ieJJY0dJW/LqJdOazt/KmpeqZMORuANWveJTf3rUZpW200VNGqoeFwqampeDxOKiu/xOc7iMl0LkbjaYAVtzsJj6c3Pt+/MBh+pF27S0lOPoP4+MfIz/8Xe/c+gcNxH3q9ICkpheTkeCZPjq5Pqvd7Ts6jVFRUYjC0wWTKreaJgeTkkQghyM//DnBgNKZQXu4EtIheEwjPk2uMl3mkcfX8849xww13sm3bRpzOrXi9/4df9dGHEAeBAxgMBioqOvDII6/h9Z5CXNwMjMb22GwGDAalzpV0aJxFjWjvi2gnhTZbf0wmEx7PdrzeNCoqytHrdSQk2MIMNau1CzZbPwYN6sWdd87G7Xbz3HO3M2DAgOA56yOgEWlhIlI+aYBI4j+RQo9qWvCoTeVOp/uds86awK233tKoz4NoPFv1mSR37Voc9llLUNFrzrye+nhJbr75Dny+4+nVq34hhtXvs5KSEpYt+57jjuuOTmdE0yIeKni86p6w5jZcGmuxsyELmrHO8WqI13LNmiUsXHgT99+/qNEWnCWS5qJeRtr27duDRll1Pv/887BtfuU5ybFMQ1b5I01c6hMeWN/zl5aWHpUKWzTUNXlISRmNThfPtm1LmDnzBm666SrS0tKC11rfsJPTTuvN/fcvoqxsNCeccCEFBR9x4MC/cDqXBL1p8fEqipJGQsIOEhLeCBqqej0MGJBIdnY2w4YNpVu3bvXuk6r9vnjxYp566mMyMgZgs4VP8KH6BPwswIRfwj3cawLhYi9NlbA9ePBg3njj+cNy3MvJzy/G6/Xh8zmw2ysxGE6gY8cLcDq3oSh7sNmewuOpiCjhXlcyfFMtalQn2kmhx1OCTuempGQJmnYTO3YcQK8vDNYR69gxLdjfgXF31VVjOO200/j0008ZPnx48Leu74p/pIWJ6vmkVcMSq4+HmkKP/DlrlezYsZR27SaHGJw1qdy1bavy0EMPNtozoT6erfpMku+99zby8/NDztMSVPQaW0iqNqL1kqSn/4XVq/9DSsrQGvfzeEooK9uIpjnQtPa89tp/6d49i7Zt24a8fzZu3EhhobfK9zwhoeXVFzWqe8JiZbg0xmJnfZ9LzTkWItFQr6VOp2uWZ7NE0thEbaTt3LmzKdshaeHU9UKoOnEpKHBQWVmGqmrExfno1KkNZWU6Kir0DQ7Vqe38R6vCFg01TR6qFup1OsvwePaRl1fB1Vc/RmJiEm3aJNCxo4Xhw3vRrl1+1CEXQqSEnC8hoWfEHBBVNZOTM4fJkzM49dRTGt1QTUxM5IQTTsBm+wabTR/RQIPQCbjBMBadrjs6na4Gr8mRPLnA8ZoyYbu6ob9jxw4WLXqNsrKzycq6A01z8OOP/0avn4GqxmMyxdco4V5XMnx9FzUaQjSTwkB9sspKG4qSh6L8D7P5LgwGc1gdsfh4c6OH+tQU6hcpf6z6eIgUelT1+bJv336Ki//D3r3dMJlMYQZndZW7KVPGNFrfN8SzFe0kuVOnTiFGWktR0WtsIamaqI+XpLLyd4RoS0VFTzweT8hzKdIz2edzI4SeK654iNTUZDp2tATfP4FFD4CdO3ewZ08ZbrcIKTxedYxV94TF2nCJhsZ6LjXXWKiJo/FaNsezWSJpbKI20jIzM5uyHZJjmMDEJSfHgNudiN3uxeNJwestxuXaz9atbTAYRtK37wV07dq9xRW8rIvS0tKIk4eqhXoV5WQ8nm/x+bqhKGPx+XpRWSnQtFIMhr28//5ykpKc2Gyr61xRv+uuOdx999Nh56spB8Rmm8TXXy/hxhtvaNDLJpKXEwhu83q9JCVR5yQkMAGvqFiIxXI2bduODIqbVBUyiaQU2BwJ2wFj/rvv1lBW1o2srDvQ6UyUlPyA2+0NUR2sScIdosspacqFg7omhXb7rsPjMpv4+Pk4HCtwOh/H7Z6LEP68PIOhL3b7r6xf/xJt224mK6s8GOrTWEJQkUL9queP6XQT8XozsVg02rWzRhQlqW4Y9erVlc2b78Xp/BKvdyZ79pSEeT2bIsfkaDxb0UwQq/Z7S1HRC9DYuU2RqI+XRNMcqGo8Ho81RGym5mfyRITohtOpUVhYjsGwl8WLl/Pll/O46KLT8XqdAOTl2fH5MrBYUg7nSYYXR7daCfGExdpwqQ+N8VxqjrFQE43htWyORd1jnYZGPkkaHykcIjkqAhOX7dvbUl5+AKczAb3+KgyGrrhc96KqY4Er8HgOsmlTLnq9jfbt2zd7wcujYcuWLWGTh6oTYZPpQsrL70TTBqPTzUdRDPh8pZhMFlyuPRw4EE+/fqezf/8iUlLWcO65bVmzpuYV9dzc3GZJRI8UtqVpdny+AsCMXt8WRTGg14PDsZPy8teJjx9FfHybiMezWrvQo8c81q+fiU63E7N5PCbTWuz2h7FY/orHU4HXe0T+3Wq1NnvCdqTJb02qgzVJw8e64Gldk8LqSpxCtCcz804Mhh+ryaYLvN6d9O7dlWef/Uej3381hfrZbIPo0+ducnKepKjob6iqgfj4dhw6ZA4LPaq51EBAkfIBdLqJ2O2ZbNnyO337pmO3f98kOSaN4dlqaN5hfUPwGpumEJKqTn28JKpqQVVVNK0yKDZT1zMZSrFYQp/JeXmLeOmlf1NYuA8Ai6U3qmoOnidScfSOHXPCPGGxNFyam+YYCzVxLHgtj2ViLVIkCUcaaZKj4u233yEnx3DYQBsYDGGqrHwMTUtGVe9AUUyoagZe72Y2b/6dhIQErFZrs4TqNAaRJg9VJ8J2+zOHrzUg/y0O76UEvTEFBUXBa01OTmbp0ldrXFH//fffmzwRPVLYVmXldrZsuY/KyvbAicTFDaRPn4HExSns3fsfCgqe5ocf5jNo0P20aZMadkyns4C8vJfo0iWOQYMs7Nr1ERUVpRQUvE5p6Q+YTGPo1GkcnTr1xmj0RiXl3thEWq2vTXUwkjR8Uxc8rWsVs6SkhC5dMomL+5TNmxfQs+ddmEz+8igeTwkHDnyHXj8D0Ae9lpmZJ2C1jg4LmbXbd1NZ+S5t2kQ2vI+W2kL9unfXc+qpF9G7dy8SExMjhh7VZBiFCoW8js/noaysgK1b9fTu3aHRc0ya07NVWlrKDz/8QFlZJQcOVFBZWcChQ6X1CsFrCpo657I+XhKbrT8GAzgcP6PTDQRqfyZrmhNVVTAYjBgMoc/kH3/8FCEC97Iv4vkCnvXKynXs2/cOl10W6gmLpeESC5or/7Y6x5LX8lijJYgUScKRRpqkwQQmLm53Ik5nQtBA07QS3O7vUJQjNbIURYdO1x2ncyN5eXn06NEDaJ5QnaOl+uSh6kRYCEfYtQaMNEVRwrwxVa+1phXv2iYrVZPhVdWCzdYfUOplNETyTtjtu9i69SFcrsHYbH4PjN2ew9at28nO7kNm5tUkJGSzfv11rFs3k+7dLyMtbSJ6vY3y8o3k5DxBUdFPqKoBRWnHL7+UkJQkmDChH927TyEnZwcbNnxLcfG37N0bu4TtSAZ3baqDkaThm2p1tq5VzJNOGs53360Jfl5R4aOw8F1WrdpISsoZdOt2Nh7PH7hcLnS63tjtm0K8lhAeMpuQ0J/c3LeazAMDDc+Hqcswqi4UcvDg/4iL+5rXXvs7nTt3btRraCqZ9aoGeUlJCSaTiYsvvo4//shj//4y9u79GWiP0dgeq7UDer0pqhC8pqIp83rq4yUxGJKwWpNxOpcTF3dtHc9kgRAuzGYDiqICBJ/JHTvacDoNmEzjAHA4nkJRbgmr7ahpJXg8P+PxvIDTuZbhw28Ka1OsDJdYEascrz+T17K52LNnT4sQKZKEI400SYPZuHEjBQUO7HYvev1VwReb17sRTfOiqmNC9ldVM5qWwv79B+na9Uiyd1OH6hwtffr0CZk8lJVtDOYweb0bwq5V09yoqoJe77+9qnpjornWSJOVqsnwbre3yoq6HovFRnq6K2qjIZJ3ouoqdOB3rJ6TlZw8jBNO+DebN0+nsvIxcnPfoLKylEOH9qJpPUlJmUO3blNISOgQXH37+utP2L59DY88cgdZWVkxT9iOZADXpjpYXRq+qVZn61rFfPbZJTz88EskJAwjNfXI534D+SkKC/9BcfGLxMWpeDwCo7GETp1SQkolRKI5QzfrmwsSrWEUMDz9BufP7Nmzp9GNtMaWWa9ukFdUlGK3F/LPfz7Irl1jSUnpTn7+tUAeqnra4XBHJwkJOvT66ELwmpKmyOupr5fEaHTTqdMBcnOfJDFxRA3PZIHPV4mqCkymI2GMgWfygQM/IEQCijIGqMBs3kxx8ZFae5pWhNP5Bi7XF2iaHUURuFxJXH/93Vxyyelh4V9/RnGK5s7x+rN5LZuD99//oEWIFEnCUWPdAEnTU1JSwsqVK/niiy9YuXIlJSUljXJch8Ov4ujxgMEwJrhdCMfhv6pPaBSEUHA6fyE390MKC1fi8ZREPVFsquuoi8TERCZPPomysk/w+VwhOUzh1+pftTWZjqzaVvXGRHOtgclK4HylpevYsGEeubl/4PPNwGx+A6v1Q8zmN/B6L+fAgWIKC4vJycmp81qOeCcmBx/GR1ahJx9W2/Pg8RTi8RQBVvbvPxQUNUhI6EmXLrfRsWMHbr31fJKTdaSknM/Ikf9h4MBrsNk6oihHaotlZS0iLy+b+fMfpLi4mJEjRzJ+/HhGjhwZk0lLVQO4KmlpU7FYirDbH0EIV3B7VWn4plqdDfVsLqJDhykYDInBfrTZBlBZCZWVE6isvAabbVzwc5stm0GDXmHEiG9ISTmexEQvqak2Bg3qRlZWVp2elaYO3TwaWkLh3AAWiwVF8XHw4C4OHjxIUVFhrQIrtfXrunXrmDVrHosX/4HdPoO2bR+gsjIVuACAkpIT2br1QyAJ+OVwFIINTdNTXn4kB+uIuI1g3753mDz52A/ruuCCqcHCwz6fK+I+gfswK8vDU08tID19A3l5T+DxVAAWhLAjhEDTjPh8Zaiql4SEuJAafIFnssdTCeiC4Y79+t1PRkYPdLolVFaeSUnJOByOtcAUzOaniYt7GFW9nMLC4fzf/21i1qx5rFu3LqyNAcMlls+61kzAa3nVVT2Ii1tCbu40tm8/i9zcacTFLeGqq3rw0kuPy7C8KFm27PuQOUFNHIl8Wk1paWkzte7PjfSktWKaOgnUYrGgqhqaFlq0WFEsgA9N24WixONfCyhC095HiJV4PHZ27DCh1+swGvWkpAxGCHuNE8WWkMxaNcQiMXEE4MPj2YXP50IIH1ACJB1etfWgqm7cbjuKogZznnQ6XdST4sD5tm27jdLS3SH5fkeIx+fri812G0J8GlUYQiTvRMAzaDCcSGXldtzuYjQtkFcncDgq2bp1a3DSH/AGrl37PZWVx9G378JjZvWtptX66qqDev0k9PpReDz7ad/eQGHhJ022OluXIMXeve/gdLbFZnsEh+OPMLVJALM5lb59n+P336/GYNhMWdlqrNbYJ9YfjUpYrAvnBti1axdff/0N+/dvZ/fud9HpRkfMC6tKTf0aKdR4+/bHcDqTSU6eB/wPkymNoqJtwKWo6rdo2iOo6nx0ujh8vjJcLidWa1zgqtG0t/F6f2XChLsb9bpjQX29JIMHD6Zfv348+uijLFnyHQ7HKny+XQjhRFUPYDa3xWQyhxhocMRDbjDEAT4UxW/YWyyd6d59Hqmp4/n117kIcS4Gw/n4fF/j8TyJ2+1B01wUFhowmw2UlTm44YY7eeON56XHppn5M3otm4rCQi+pqWOi2relRz61NqSR1kppjiTQ/v3706aNgQMHKoKiCz7fLtzub/D5tgPvAqOBrcAbQBpwGYoyFLO5A3q9E49nOXv2/AeLZU9I3k9zXkc0BCYPN9xwJ7/99iEORyEOx7vAYDTNhaZ9gqKciqIUIoSDysqq3/ZgNHrQ6/UUFn4d1aQ4cL4LL5xBWVkXLJbp+I1dEcxJOaKU2Jf4+OOjMoQieSc0zYHP58TpzEMII4qSgaoekaD2+XZTUFBGZaU//8Vms+F2e1i9egs2280tQiK8PtSU01BVjKKg4BXKyx9Gr3cjRCpxcZYmySmpK++qaq6Nqlojqk0G0OlMtGlzDoWFP1Nc/GFME+sbY2GlJSi5VX3+xMefhMezFat1DqALywurKv9fU79WN8ir/r6KYjz8/W2H771zMBiG4PU+habNQVEmAcNxOo2YTG683hV4vZ9itR4gMbEjZWVljXbdsaS+uV1dunThwQcfZMOGyygs3Etc3Fj++OMjYB1m8zkRzxHwkKemnsiuXQ+jKL8CRxY+DhxYhtfbDbP5XCorH0XTklGUGcAwdDojVit4vd9SWfkxv/yymqeeepq///3pJu4ZSSSkpP7R01IiFiThyHDHVkhd4VPVw9B27drVoPMkJSVxzjnjUJRDuN1f4/Gso6xsHi5XHopyEn7jLBH4ABgGPAqchqomYDAYUNVEjMYz0OluxmCYxP33LwppS3NdR33wegU+XycUpTdCrEeIvijKycCnCPEHmuZG0zqgKP1Q1SGo6kCE6IjXG8/mzZs4ePC9qMOSunXrRnJyJ9q3n4RefwCH4xcqK3/E4fgFnS6Xzp3jyc7uQ2JiYtRhCFW9EwE8nhLc7oNomopO1w9V7XBYstovfKIoKZjNfXA4bPz22x+Ul+/H4ymjvFxHSsqYqPotJeUUDh70snHjxqj2b0oCBnB6+gZycuawf/8HeDylCCEwGNoQH9+d5OQ2ZGebefTRK3n55btYuvRVbrllXqOvlgc8mzX14xEvp/9zozEFt1tQXl4ecf+UlFPQ6drTps3uqELGmiKxvno4X0bGGxx33IdkZLyB3T6DxYv/qDFMrCrVw35rI2AYNWbIX/XnT8+e92C1lmK3PwpomEwdsFr7Be8Lu91ea79GCjWu/vtCIFxcQVHa4fX2JSHhUUymLOCfCDEDn28qlZWXoNMtISOjBwMGPIXRmNiqJk0BL8nSpa/y4ovzeeaZObz44vwa78OkpCTOOmsUmvYtqakZpKWNxuf7LCR0OUCgeHr79smYTDbMZg8m04/BzwOGs6oOobLycTQtG1VdhKqeBZgxm43odG0wmaYQF/cPNG0yr732CRs2bGjiXpFImobqc4LaaMkh8q0RaaS1QgKrtTUpH8GRMLQ9e5J55513G3yu6dMvp1MnHXb7i1RU3Bd8oen196AopcAcIBm4HUgB9GiaQNNEsLCx1arQt+89YW1pzuuoi1WrVnHhhX9hw4YMvN5bMBhmoSgFKMrT6HTpwErgLaAjmhaP1+vC6y3F661Ep2tDQkJPysv/TVnZWoYPHxbVOTdu3EhFhZ6+fS/mhBMGkp3dnX79upKd3Z0TThgYlnMUjSEUKServHwrQnhQ1T1AaFhQQATFYDBitWbhcBjYsWMpNpuCXm8+Zlff6spp+Mtf+vHOO68ye/bsJs0pqSvvqnoNt0hqk1XR623odFZmzDgnohHq8ZSyf/8H5OTMIT19Q6OHbjb2wkp9cpQa2+Cs/vwJhMRaLBuw2+fgcn2AEBVYLN2w2538/vtrtfZrJIM8Uo0+f7g4qKoTn8+J3e7B4zkVTZsLnIMQE1GUs2jb9m7S0q7DaExutZOm+uR2VR0r7dufFTHHNPDOsVg8tG+fzM6dj9CzZxuOO86fW+zzuYOGs89XUEXG3xhRgERRTMTHL8BuP44XXnix6TriKIlVPrfk2CAlJTxPuyaOxdpzx/L4l+GOrYzmrOcD/hXPp556kKlTr8DpPAmdbs5hL0wmqjobn+8vwOlAMdAGRTEDHiorc9HpSoMS4fHxiSFtEUI063XUxq+//soVV1zH7t1dsFjuwmRKQ1H0uN2dKCubh9f7CtAD2AMsOHy9oxDCDBTi863E4fiGhIRi4uL6sWbN2qjCM6pO4BVFCdbpqon6iJIEcrI0zUFh4S8YDCfg9X6GEJNCSglUl67W6ZIoLPyI8eN7s3ZtQczzhY6GlpDTUFfeVfUabtXVJqsT6OcBAwYwefLkZpcDb4yCz1WJlZJbTc/R0PpsRwqDa1oZ5eV7mTVrOpdfHrkdkQzyqr8v+O8Nvb4PqqpH0z5D07ridltQ1Qx0uhRgDIpShKo6yc8vpKhoC+3abSM19diaNDUFVcfKnj15tGs3nIKCldjt16PTTQCy8XrtmM0ltGuXz969/3d43DyApmnk5+ezc+ctOJ2p+HwuvN6fUZTph0VIylBVESZAAqCqcSjKKaxa9QmlpaUxD+euSkvI55a0fCZMGMpLL7W+2nOtYfxLI62V0VT1fGpj5MiRZGX15o8/huL1/o7Xm4JfmcwBZAIjgN3A7sOTfR9er5POndNJTz9Sw6lqW4QQzX4dNXHHHQ+Rn6/HYrkCszkzuF2nSz1sdKYCVwP9gQ+Bl4GXUBQVRVEAL4rSkx495uHxbIvamGwq4YTqIihutxerdS4VFfcGRQoirRwL4cLnexlV3cbJJ09l+/alMc0XaiximdNQV95V9RpuVdUmI1G1nxMTE5vVCG2qBaJY1J+q7TlavT6bz2dHCI3S0qc59dQxNbYj0v1c9feFSQCoaiJ6fS8cjjeBB1DVvqiq/1XtL8qsx2pNAzpSWfkbu3b9mylTso+JSVNTEzpWVuHxlFNS8gd2+zdAPHFxcSQlJZCaamHy5CPjxuPxkJ+fz/Tp3Xn99ffxePbh83VGUQaj0zkxmw0RBUjAL0Ki1x9PefnnLUpMoaXkc0taPuecczbLls1vVbXnWsv4l0ZaKyMWstV+oyqRYcOuYP/+cvbvP4jbfQCf73eEEOh0x2Eyqeh0blQVQODx7KBt27YhBkX1trSUZNadOwWqmobReGrIdqfzHYQw4TdEzwDMqOotKEo5QvyM1aqh1yei0/XB6cylpMRI587RG5NNJZxQdcX5t9/W4vE4MJt7ER9/OxUVD+D1XouijEVVRxIf3xFFqcDl+gav91PM5iLi49NIS0urV02jY2n1rTmpqzZU1RpuBsM4vN4C0tKSw0RDoOZ+bi4jtCkXiJrb6xnNc7RqYXAhBKWlz9b6/Il0P1f9fYU4rdo3coD/oig98b+qQz3bQrhQlHeBHUD20VxuqyLSWNE0DQBVVWsdNzfcMIfzzz+PU0+dQm6ul7i4DhgMRyIJIuFfOIlHrze3mHDuSCqiAWRxYkl1Onfu3Kpqz7Wm8S9z0loZkYQhaqMxwtACE5qEhA706NGD4cOHMHhwL7p3z8JsNpKYCHFxiZjN7TAa/f9ADcurqdqWWFxHdQICHGbzQPyJ/FUVEUtwu78DjgcUIAlFMSKEHlVth6IMQ68/DaNxJDpd8mFVviKEsERtTDalcEJgxfmss7qg0xXjcKzC7fZhMFyO2ZyA2fw6RuN1uN3n4XROC4oU9O17N3FxiVit1pjmC7Um6urHtLSpmM2HKCubj9lcSceOHcP2aQn93BwLRM1Vf6opnj813c+BGn0Ox1MAaFopXu9vKMo0VHUjmnYDmvY+Xu9eFEXDYHDhcn2A3T4Hi2UTmZlXsmbNb7JuUTWqjpWJEycyceLEqMZNZmYm48efhKJUotNV1mqgBURI2rUzYjSqLSacuyXlc0uODVpT7bnWNP6lkdbKqKlYb000Rhha9QmNwWAgOTmZzp1PxmIx4fV+G7J/TXk1VdsSi+uozpYtWwBIShpSJW/Ej9e7EU3zoihDD28pA1SEEAjhX7X1hzr6CajylZTsrZcx2ZSGUEC6etCgDDIy9tKvX1cGDhzFqFGPc/LJ/2HgwNvp128O2dnzOeGEV+nefR52+45gP9emktjUAhWtibr6saxsPXFxEBe3jLi4Fygr+6JF9nNLWFhpLJrq+RPpfg4IkpjNmwFwOP4Pr7cCnW4aCQkPo9d3RNOeQ1GmYzBMw+OZHlw0yc5+nM6dr2oxyqmthWuvvQartZyKircO18EMp6oIicm0rcWEc0dSEa0JWZxYUpX6qqq2RFrb+JdGWisjFrLVNU1oAqE8Xu8nIQpbkfJqqrcl1vLb4PcMACQmnlAlb8SPXyYbFGUYiqIHqn7mV0TU649EEwdU+YqLV9TrZd7UhlBV6erkZBvJyf5QukAoV7t240lOHonBkBixn1vT6lssqasfr7/+JD788GWuvz67xfZzS1hYaSya6vlT0/1ssw2iV6/5AHi9S4AC9Pp8fL5S4uLOoHv3xxgw4Days28MWTSxWru0OOXU1kB2djaXXz4JVf2Uysp1uFz7EcKDP+TUg8u1H7t9ExZLGT17dsbl+qrR3z8Npa6yHtVpSeVRJC2D5opYaApa2/iXOWmtkJqK9ValMcOjasurSUubyqFD87DbH8FqnQ/ow/JqampLc19HdSwWC06nE0VRg3kjRuNEFMUUlMn2i4OchBCfIMQE/N40NyZTaB6DEF7AjdP5v3q/zJtaOOFo+7klqCS2BqLpx5EjR7bYfq4rv64qx0KeYlM9f2q6n61WAzCdCy8cw6efbqV9+/aYTG1ISEiImIMYoCV7JI9lbr75Jn7+eTa///4GXu8FOBx7DpdLAKNRIS0tmfbtk9m/f1GLCueORV66RNJSaG3jXxpprZBYyFbXNKEJhPL89tuDVFZej883iLi4PnTo0B2Pp7TWtsRKfjtAnz59WL16NUVFq8KMTb2+P6qqR4jl6HRTEWIeQjwMXIdOZwyppQPgcu1F05aQlVXeoJd5UxpCjdXPsVRJbE3U1Y8tuZ9jvbDSmDTl8yfS/Ww2mykuLuaBBx5g69ZZ2O2bSE4+tpVTj2W6dOnCM8/cx/z5D7Jz58vo9WOIjz8JozEJi0VQVraKvXtbnphCU6kCSyTHAq1t/EsjrZXS3LLVtU1orNYsOnYcz759L+P1riApKZO9e81RtSUW8tsBAsZPefkyEhMnBo1Nu30Oev0kDIbBOJ0fo6pjUdVZ+HyPoyjbMZnORlHGIYQNIcpwu7/C4XiVzMx9PPHEi0fV1qaaoMeynyWth1gvrDQ2TX1fVL2fPR4Pn376KYmJia3KI3ksE/r7v8fBg29TUdGyn4tNpQoskRwLtLbxrwghRKwb0VopKysjMTGR0tJSbLboXK/VCby4J02aVGvIS22UlpY2W3jUrl27Dr/QVnPwoDdkQjN58ggmTBhPWVlZg9rSnNcBR/r+xRffYufO3nTtOh+Xa9/hQrarcTrLcDp3I8QpwIWYTIdo3/53yst/we324r+zBJq2l06dvLzyynMt1gNSlebu50g0xriXNIzG6Pu6ngMtbWIbDU19X1Tt9/z8fGbNmkdeXnadHsn09A0tWkL6WCCaMd8SnovR8uijj7F48R9kZS2q08jPyZnDVVf1qLWofFMin/Wxo7X2fUsf//WxDaQnLQqeffZZHnvsMfbv38+AAQNYtGgRJ554YqybFTXNGR7VlGF5sQrzuvfev3L77Q8HPQOZmbPo3PkqSkrWsm/f+xw48BWqupcuXS6hc+cbEUJQUrKW4uK1OJ3ryMrK4IknFhwz4hktOZxOcmzQGvMUm/s52po8kq2BY+m52JrCjiWS+tKaxr800urgP//5D3PnzuWFF15g6NChPP3000yYMIFt27aRmpoa6+a1WI6lF1pdDBgwoMaQp27d9Fx66QUArFnzLrm5bwU/S0vTM3nyqGPSayCRNAat6TnQ3MgQZElDkUa+5M9Maxr/0kirgyeffJJZs2ZxxRVXAPDCCy/wySef8PLLL3PbbbeF7OtyuXC5jsg1l5X56wV5PB48Hk+Dzh/4XkO/L2k4Vfu+U6dO3HTTjcyceQWbN2/G4XBgsVjo27dv0F1dVlZW42fy96sfctzHDtn3sSFSv0fz3JG/09HTGsd8//79eeGFR/jgg6UsW/YmBw68FjTy27bVc9FFwzj77Cl07tw5ptfdGvv+WKE1931LHv/1OZ/MSasFt9uN1Wrl3Xff5eyzzw5unz59OiUlJSxdujRk/3vuuYeFCxeGHefNN99sscoxEolEIpFIJBKJpOmx2+1ccsklMiftaDl06BA+n4/27duHbG/fvj1bt24N2//2229n7ty5wf+XlZWRkZHB+PHjj0o45Msvv2TcuHGtKrHzWED2feyQfR87ZN/HBtnvsUP2feyQfR87ZN/HhkCUXTRII60RMZlMmEzhCYoGg+Gob4DGOIakYci+jx2y72OH7PvYIPs9dsi+jx2y72OH7PvmpT59rTZhO4552rZti06no6CgIGR7QUEBHTp0iFGrJBKJRCKRSCQSSWtGGmm1YDQaOf744/nqq6+C2zRN46uvvmL48OExbJlEIpFIJBKJRCJprchwxzqYO3cu06dPZ8iQIZx44ok8/fTTVFZWBtUeJRKJRCKRSCQSiaQxkUZaHVx44YUcPHiQu+++m/379zNw4EA+//zzMDERiUQikUgkEolEImkMpJEWBddffz3XX399rJshkUgkEolEIpFI/gTInDSJRCKRSCQSiUQiaUFII00ikUgkEolEIpFIWhDSSJNIJBKJRCKRSCSSFoQ00iQSiUQikUgkEomkBSGNNIlEIpFIJBKJRCJpQUh1xyZECAFAWVlZg4/h8Xiw2+2UlZVhMBgaq2mSKJB9Hztk38cO2fexQfZ77JB9Hztk38cO2fexIWATBGyE2pBGWhNSXl4OQEZGRoxbIpFIJBKJRCKRSFoC5eXlJCYm1rqPIqIx5SQNQtM09u7dS0JCAoqiNOgYZWVlZGRkkJubi81ma+QWSmpD9n3skH0fO2TfxwbZ77FD9n3skH0fO2TfxwYhBOXl5aSlpaGqtWedSU9aE6KqKunp6Y1yLJvNJm+iGCH7PnbIvo8dsu9jg+z32CH7PnbIvo8dsu+bn7o8aAGkcIhEIpFIJBKJRCKRtCCkkSaRSCQSiUQikUgkLQhppLVwTCYTCxYswGQyxbopfzpk38cO2fexQ/Z9bJD9Hjtk38cO2fexQ/Z9y0cKh0gkEolEIpFIJBJJC0J60iQSiUQikUgkEomkBSGNNIlEIpFIJBKJRCJpQUgjTSKRSCQSiUQikUhaENJIk0gkEolEIpFIJJIWhDTSWgjffvstZ555JmlpaSiKwgcffBDy+YwZM1AUJeTfxIkTY9PYVsRDDz3ECSecQEJCAqmpqZx99tls27YtZB+n08ns2bNJSUkhPj6e8847j4KCghi1uPUQTd+PGTMmbNxfc801MWpx6+H5558nOzs7WMR0+PDhfPbZZ8HP5ZhvOurqeznmm4eHH34YRVG46aabgtvkuG8eIvW9HPdNwz333BPWr7169Qp+Lsd8y0YaaS2EyspKBgwYwLPPPlvjPhMnTmTfvn3Bf//+97+bsYWtkxUrVjB79mzWrl3Ll19+icfjYfz48VRWVgb3ufnmm/noo4945513WLFiBXv37uXcc8+NYatbB9H0PcCsWbNCxv2jjz4aoxa3HtLT03n44Yf5+eef+emnnzj11FOZMmUKmzdvBuSYb0rq6nuQY76p+fHHH3nxxRfJzs4O2S7HfdNTU9+DHPdNRd++fUP6ddWqVcHP5Jhv4QhJiwMQ77//fsi26dOniylTpsSkPX8mDhw4IACxYsUKIYQQJSUlwmAwiHfeeSe4z2+//SYAsWbNmlg1s1VSve+FEGL06NHixhtvjF2j/kS0adNG/POf/5RjPgYE+l4IOeabmvLycnHccceJL7/8MqSv5bhvemrqeyHkuG8qFixYIAYMGBDxMznmWz7Sk3YMsXz5clJTU+nZsyfXXnsthYWFsW5Sq6O0tBSA5ORkAH7++Wc8Hg+nnXZacJ9evXrRuXNn1qxZE5M2tlaq932Af/3rX7Rt25Z+/fpx++23Y7fbY9G8VovP5+Ott96isrKS4cOHyzHfjFTv+wByzDcds2fPZvLkySHjG+Szvjmoqe8DyHHfNPzxxx+kpaXRrVs3Lr30Uvbs2QPIMX8soI91AyTRMXHiRM4991y6du1KTk4Od9xxB6effjpr1qxBp9PFunmtAk3TuOmmmxgxYgT9+vUDYP/+/RiNRpKSkkL2bd++Pfv3749BK1snkfoe4JJLLiEzM5O0tDQ2bNjA/Pnz2bZtG++9914MW9s62LhxI8OHD8fpdBIfH8/7779Pnz59WL9+vRzzTUxNfQ9yzDclb731FuvWrePHH38M+0w+65uW2voe5LhvKoYOHcqrr75Kz5492bdvHwsXLuTkk09m06ZNcswfA0gj7RjhoosuCv7dv39/srOzycrKYvny5YwdOzaGLWs9zJ49m02bNoXEa0uah5r6/uqrrw7+3b9/fzp27MjYsWPJyckhKyuruZvZqujZsyfr16+ntLSUd999l+nTp7NixYpYN+tPQU1936dPHznmm4jc3FxuvPFGvvzyS8xmc6yb86cimr6X475pOP3004N/Z2dnM3ToUDIzM3n77bexWCwxbJkkGmS44zFKt27daNu2Ldu3b491U1oF119/PR9//DHffPMN6enpwe0dOnTA7XZTUlISsn9BQQEdOnRo5la2Tmrq+0gMHToUQI77RsBoNNK9e3eOP/54HnroIQYMGMDf//53OeabgZr6PhJyzDcOP//8MwcOHGDw4MHo9Xr0ej0rVqzgmWeeQa/X0759eznum4i6+t7n84V9R477piEpKYkePXqwfft2+aw/BpBG2jFKXl4ehYWFdOzYMdZNOaYRQnD99dfz/vvv8/XXX9O1a9eQz48//ngMBgNfffVVcNu2bdvYs2dPSA6JpP7U1feRWL9+PYAc902Apmm4XC455mNAoO8jIcd84zB27Fg2btzI+vXrg/+GDBnCpZdeGvxbjvumoa6+j5SyIcd901BRUUFOTg4dO3aUz/pjABnu2EKoqKgIWTHauXMn69evJzk5meTkZBYuXMh5551Hhw4dyMnJ4dZbb6V79+5MmDAhhq0+9pk9ezZvvvkmS5cuJSEhIRiHnZiYiMViITExkSuvvJK5c+eSnJyMzWZjzpw5DB8+nGHDhsW49cc2dfV9Tk4Ob775JpMmTSIlJYUNGzZw8803M2rUqIjyzZLouf322zn99NPp3Lkz5eXlvPnmmyxfvpxly5bJMd/E1Nb3csw3HQkJCSH5rgBxcXGkpKQEt8tx3zTU1fdy3Dcd8+bN48wzzyQzM5O9e/eyYMECdDodF198sXzWHwvEWl5S4uebb74RQNi/6dOnC7vdLsaPHy/atWsnDAaDyMzMFLNmzRL79++PdbOPeSL1OSBeeeWV4D4Oh0Ncd911ok2bNsJqtYpzzjlH7Nu3L3aNbiXU1fd79uwRo0aNEsnJycJkMonu3buLW265RZSWlsa24a2AmTNniszMTGE0GkW7du3E2LFjxRdffBH8XI75pqO2vpdjvnmpLvsux33zUbXv5bhvOi688ELRsWNHYTQaRadOncSFF14otm/fHvxcjvmWjSKEEM1uGUokEolEIpFIJBKJJCIyJ00ikUgkEolEIpFIWhDSSJNIJBKJRCKRSCSSFoQ00iQSiUQikUgkEomkBSGNNIlEIpFIJBKJRCJpQUgjTSKRSCQSiUQikUhaENJIk0gkEolEIpFIJJIWhDTSJBKJRCKRSCQSiaQFIY00iUQikUgkEolEImlBSCNNIpFI/kT89a9/xWaz8euvv8a6KRKJRCKRSGpAEUKIWDdCIpFIJE3P559/zplnnsnSpUuZNGlSrJsjkUgkEomkBqQnTSKRSP4k7Ny5k7ffflsaaBKJRCKRtHCkkSaRSCStDCEExx9/POPHjw/Zfu2113LOOec06bnHjBmDoigh21599VUUReHVV19t0nMfLV26dKFLly6xbobkT8by5ctRFIV77rknZPvJJ5/M0KFDY9MoiUQSc6SRJpFIJHWwa9cuFEUJ+xcXF0d2djYLFy6koqIi7HsBg0VRFD7++OMajz906NDgfsuXLw/5TFEUevXqVa/2vvbaa6xbt4577703ZPuMGTNQFIW1a9fW63iSoycwEVcUhSFDhtS432effRbcb8yYMc3XwEZECMF7773HueeeS3p6OiaTiYSEBAYMGMDNN9/Mli1bYt3EY4J77rmHH374gbfeeivWTZFIJDFAH+sGSCQSybFCVlYW06ZNA/wT0YMHD/LZZ59xzz338Pnnn7Nq1Sp0Ol3Y9/R6PS+//DJnnHFG2GebN2/mhx9+QK/X4/V6j7qNmqZxzz33cPLJJzNs2LCjPl5jcM455zBs2DA6duwY66bEHL1ez88//8yGDRvIzs4O+3zx4sWNNhZiQVFREVOnTuXrr78mKSmJcePG0a1bN9xuN5s3b+a5557jmWee4auvvjpmjdDmYuzYsQwePJgFCxZw4YUXhnmoJRJJ60YaaRKJRBIl3bt3DwtJcrlcDB8+nLVr17JixQpOPfXUsO+dfvrpfPzxxxw8eJB27dqFfLZ48WJUVWXChAl88sknR93Gzz77jF27dnHnnXce9bEai8TERBITE2PdjBbBhAkT+Oyzz3j55Zd5+umnQz47dOgQH330EZMmTeLDDz+MTQOPAq/XyznnnMO3337LtGnTePbZZ7HZbCH77Nu3jzvvvJPS0tIYtfLYYtq0acydO5evv/6asWPHxro5EomkGZHhjhKJRHIUmEwmTjnlFMA/yY7EzJkz8Xg8vP766yHbPR4Pb7zxBuPHjyc9Pb1R2vPKK6+gKArnnXdeVPsHQjlnzJjB9u3bOeecc2jTpg1xcXGcdtppNUr1r1q1itGjRxMXF0dKSgoXXnghubm5EfetLSdtx44dXH311XTt2hWTyURqaipjxoyJuO+3337LmWeeSdu2bTGZTBx33HHcdddd2O32qK41wNKlSznhhBOwWCy0b9+eWbNmUVxcXOP+brebJ598ksGDBxMXF0dCQgInn3xygwyp9PR0xo0bx7/+9S/cbnfIZ2+88QZut5uZM2dG/O7vv//OrbfeyuDBg0lJScFsNtOjRw9uu+22iOG2+/bt48Ybb+S4447DYrGQlJRE7969ueaaa0KMpPoetyZef/11vv32W0aNGsWSJUvCDDSAjh078vLLLzNx4sSQ7Zs2beKCCy4gNTUVk8lE165duemmmygsLAw7RiB3sKSkhOuvv56MjAz0en1wzATCjJ1OJ7fddhudO3fGbDbTu3dvFi1aRCRRa6/Xy5NPPsmAAQOwWCwkJiZyyimn8NFHH4XtW3U8f/TRR4wYMYKEhIRgPqPb7WbRokVMmDCBjIyM4Lg+99xz+eWXX6LuT4CpU6cGzymRSP5cSCNNIpFIjgK32x3MNxo4cGDEfYYNG0afPn145ZVXQrZ/9NFHHDx4sMZJeX0RQvDNN9/Qs2dP2rRpU6/v7tq1i2HDhlFUVMTMmTMZN24cX331FaeccgoFBQUh+3711VeceuqpfP/995x//vlcffXV7Ny5kxEjRtRq7FRn1apVDBo0iH/+85/06tWLuXPncu655+JwOPj73/8esu/zzz/PmDFjWL16NZMnT+aGG24gPT2dBx54gHHjxoUZPDXx2muvcfbZZ/P7779z2WWXMX36dFavXs1pp50W8Rgul4sJEybw17/+FSEEV155JdOmTWP37t1MmTKFf/zjH1Ffb4CZM2cGvWZVefnll+nbt2+NYhHvvfceixcvplu3bkyfPp1rrrmG5ORkHnnkEcaNG4fH4wnua7fbGTFiBIsWLSIrK4s5c+YwY8YMevToweuvv87BgwcbdNzaWLx4MQB33XUXqlr79MJkMgX/XrVqFUOHDuX9999n7NixzJ07l8zMTP7+978zdOjQiIsfLpeLU089lS+++IKzzjqL2bNn0759+5B9LrjgAv71r39x7rnncs0111BRUcENN9zAvHnzQvYTQnD++efz17/+FafTyezZs7nkkkv49ddfOeuss3jqqaciXsM777zDueeeS2pqKtdddx2nn3464A/5vOmmm3C5XEyaNImbb76ZMWPG8Omnn3LSSSfx448/1t2Zh0lPTycjI4Ovvvoq6u9IJJJWgpBIJBJJrezcuVMAIisrSyxYsEAsWLBA3H333eK6664TWVlZwmw2i8ceeyzse6NHjxaA2Ldvn3j88ccFIH744Yfg55MmTRIpKSnC5XKJv/zlLwIQ33zzTcgxANGzZ8+o2rl582YBiEsvvTTi59OnTxeAWLNmTdi1AeLhhx8O2f+uu+4SgHjooYeC23w+n+jWrZtQFEWsXLkyuF3TNHHJJZcEj1WVV155RQDilVdeCW5zOp2iU6dOQlVV8dlnn4W1NTc3N+S69Hq9GDBggDh06FDIfg899JAAxOOPP15Lz/gpLS0VNptNxMXFiW3btgW3u91uMWrUKAGIzMzMkO/ccccdAhB/+9vfhKZpwe1lZWViyJAhwmg0ivz8/DrP/c033whA/OUvfxEul0ukpKSISZMmBT//4YcfBCCeeOIJsW/fPgGI0aNHhxwjLy9PuFyusGMvXLhQAOKNN94Ibvvwww8FIG666aaw/cvLy4XT6WzQcWvC4/EIg8Eg9Hq9cDgcde4fwOfziaysLAGIzz//POSzW265RQBi5syZIdszMzMFICZMmCDsdnvYMQP3Xc+ePUVJSUlwe0lJiejZs6dQFEX8+OOPwe1LliwJ9nfVfti9e7do27at0Ov1IicnJ7g9MJ5VVRVffvll2PmdTqfIy8sL275p0yYRHx8vTjvttJDtgbGxYMGCiH10zjnnCEDs2LEj4ucSiaR1Ij1pEolEEiU5OTksXLiQhQsXcu+99/Lcc8+Rk5PDaaedxmmnnVbrdy+77DIMBgMvv/wyAHv37mXZsmVMmzYNo9HYKO3Ly8sDCPMoREPXrl255ZZbQrZdeeWVACEr/6tWrWLHjh2cccYZjBw5MrhdURQefPDBiMIpkVi6dCn5+flMmzYtLPQNCAn/fPHFF/F6vSxatIiUlJSQ/W699VbatWvHv//97zrP+cEHH1BWVsbMmTPp0aNHcLvBYOCBBx4I21/TNJ5//nmysrJYuHBhiHBDQkICd999N263m/feey+qaw5gNBq59NJLWbZsGXv37gX8XjSDwcBll11W4/c6deoUcaxcf/31APzvf/8L+8xisYRti4+PD/FkNeS41SksLMTj8dC2bVvMZnOd+wdYvXo1OTk5nH766UyYMCHks7vvvpvk5GTefPPNiF7ORx99NOL1Bfjb3/4WkguZmJjIXXfdhRCCJUuWBLcH/n700UdD+qFz587cfPPNeL1e/vWvf4Udf8qUKRHve5PJRKdOncK29+3bl1NOOYVvv/02au8kHLmfA/e3RCL5cyCFQyQSiSRKJkyYwOeffx78f2FhIatXr+bGG29kxIgRfP311zWGqqWmpjJ58mTeeustnnrqKZYsWYLP52u0UMdAewCSkpLq/d2BAweGhagFDKWSkpLgtkCO2sknnxx2jMzMTDIyMti1a1ed5/vhhx8Awmq5RSJQMmDZsmURw74MBgNbt26t8zi1tX348OHo9aGvxG3btlFcXExaWhoLFy4M+04gZDCac1dn5syZPPPMMyxZsoSbb76Zt956izPOOIN27dqxf//+iN8RQvDKK6/w6quvsmnTJkpLS9E0Lfh5wOADGDVqFB07duThhx/m119/5YwzzmD06NH07t07TCWwPsdtbAI5WpGUHuPj4xkyZAhffPEF27Zto3///sHPzGZzyP8jEel3Dmyrmhv2yy+/YLVaOfHEE8P2D+Sbrl+/PuyzSPsHWL9+PY8++iirVq1i//79YUbZoUOHolY7TU5ODn5HIpH8eZBGmkQikTSQlJQUzjrrLKxWK+PGjeOuu+7iyy+/rHH/mTNn8sEHH/Df//6XV155heOPPz6iDHtDCXgVnE5nvb8bSeQhYLT4fL7gtoDgRGpqasTjtG/fPiojLXCcSB6H6hQVFQFE9HbVh9rartPpwrx0gfNu3ryZzZs313jcysrKerdlwIABDB48mFdeeYXOnTtTUlJSp8F+ww038I9//IOMjAzOOussOnbsGPSILVy4EJfLFdw3MTGRtWvXcvfdd/PRRx/x6aefApCRkcFtt93Gdddd16Dj1kRKSgoGg4HCwkJcLleIp642ysrKgJq9vwFDJrBfgNTU1Dol6SMdM7CtqnBKWVkZGRkZ9Tp/bW3+7rvvgiqv48eP57jjjiM+Ph5FUfjggw/49ddfo+rTAA6HAwCr1Rr1dyQSybGPNNIkEonkKAl4z+oSBJg0aRIdO3Zk/vz55Ofn89xzzzVqOwLy/gHjoikIhI8dOHAg4ufVRUZqIuDty8/Pr3PfgAFZVlZGQkJCVMePRG1t9/l8FBYWhhiNgfOed955vPvuuw0+b01ceeWVzJ49m/nz55OWlhYUnojEgQMHePbZZ8nOzmbNmjUhE/b9+/dH9PR17tyZV199FU3T2LBhA1988QXPPPMMs2fPpk2bNlx88cUNOm4k9Ho9J554IqtXr+bbb79l3LhxUX0v0Mc1jZuAV7H6IkI0NcMKCgro3Llz2DYgJAzSZrPVOJ5rOn9tbXjggQdwuVysXLkyJCQY/F7hmhRTayJwP1cv3yGRSFo3MidNIpFIjpKAomHVELFI6HQ6Lr/8cvLz8zGbzVx88cWN2o6+ffuiqirbtm1r1ONWZcCAAQCsXLky7LPdu3fXKMNfnUCo2BdffFHnvgEjOBD22FBqa/uaNWvCCkj37t0bm83GTz/9VK8comi55JJLMJvN5Ofnc/nll9eaz7djxw6EEJx22mlhHpVI11MVVVUZOHAgt956azB3L1A+4GiOW51ADuODDz4YUea+KgFP0qBBgwBYvnx52D6VlZX89NNPWCwWevbsWa+2QOT2B7YFzhv42263B0NwqxJoV03KrZHIyckhOTk5zECz2+2sW7cu6uME2LZtGwaDgV69etX7uxKJ5NhFGmkSiURylDz55JOAPw+oLubOncv777/PsmXLGpQ7VhtJSUlkZ2fz008/1WkwNpSRI0fStWtXPv74Y1atWhXcLoTgjjvuCAmNrI2zzjqL9PR03njjDZYtWxb2eVUP23XXXYder2fOnDns2bMnbN+SkpKo6k9NmTIFm83Gyy+/zO+//x7c7vF4uOuuu8L21+v1XHvttezevZt58+ZFNNQ2bdpUoxemLpKSkli2bBnvv/8+N998c637ZmZmAv5Quqq/bV5eHrfffnvY/ps3b47onQpsC4h71Pe4tXHZZZdx8skns3z5cq644grKy8sjnn/WrFnB3M4RI0aQlZXFZ599FiZQcv/991NYWMjFF1/cIHGd++67LySssbS0lPvvvx9FUZg+fXpwe+Dv22+/PeQ3zs3N5cknn0Sv13PppZdGfd7MzEyKi4tDQmR9Ph/z5s0LKX0QDW63m19++YUhQ4bIcEeJ5E+GDHeUSCSSKNm+fTv33HNP8P9FRUWsXr2adevW0aZNGx555JE6j5GamsrZZ5/dZG0855xzWLBgAWvXruWkk05q9OOrqsr//d//MWnSJE477TQuvPBC0tLS+Prrr9m3bx/Z2dls2LChzuOYTCbefvttJk6cyOmnn87EiRMZMGAAZWVlrF+/HrvdHjS8+vXrx3PPPce1115Lz549mTRpEllZWZSXl7Njxw5WrFjBjBkzeOGFF2o9Z2JiIs888wwzZszghBNO4KKLLiIxMZGPP/4Yi8USUchh4cKFrFu3jmeeeYZPPvmEUaNGkZqaSn5+Phs3buTXX39lzZo1Nebo1UU0hj34c6POO+88/vvf/zJkyBDGjh1LQUEBH3/8MWPHjiUnJydk/y+//JJbbrmFESNG0KNHD1JSUtixYwcffvghZrOZ2bNnN+i4taHX6/nggw+YOnUqS5Ys4cMPP2T8+PF07doVt9vNli1bWL58OR6Ph2nTpgH+8fTqq68yYcIEJk2axNSpU8nMzGTNmjUsX76crKwsHn744ajbUJUePXrQr1+/YGH3//73v+Tl5TF37lyGDBkS3O+yyy7jvffeY+nSpWRnZ3PGGWdQWVnJf/7zH4qKinjiiSfo1q1b1OedM2cOX3zxBSNHjuSCCy7AbDazfPly8vPzGTNmTESvYU2sXLkSl8vVpM8MiUTSQomh/L9EIpEcE1StJVb1n8lkEllZWeLaa68Vu3fvDvte1TppddEYddKEECI/P1/o9Xpx7bXXhn1WW5206dOnRzweEep1CSHEt99+K0aNGiUsFotITk4WU6dOFbt37w5ec1Ui1UkLsH37dnHllVeK9PR0YTAYRGpqqhgzZox47bXXwvb94YcfxEUXXSTS0tKEwWAQbdu2FYMHDxa33Xab+O2332rvmCq8//774vjjjxcmk0mkpqaKq666ShQVFYnMzMywOmlCCOH1esWLL74oRowYIWw2mzCZTKJz585i4sSJ4vnnnxcVFRV1nrNqnbS6qKlOWnl5ufjrX/8qunTpIkwmkzjuuOPEfffdJ9xud9j+W7ZsETfeeKMYNGiQSElJESaTSXTr1k1Mnz5dbN68ucHHjQZN08S7774rzj77bJGWliaMRqOwWq2iX79+4oYbbhBbtmwJ+86GDRvE+eefL9q2bSsMBoPIzMwUN954ozh48GDYvjX9TgECY9DhcIhbb71VZGRkCKPRKHr27CmeeeaZkHp3ATwej3j88cdF//79hclkEgkJCWL06NFi6dKlYfvWNp4DvPvuu2Lw4MHCarWKtm3bigsuuEDk5OQE78GdO3cG962tTtqMGTOE0WgUBw4cqPFcEomkdaIIUUfguEQikUiOKS677DI++eQTdu/efVRCGxLJsciYMWNYsWJFnXlxLZ3i4mIyMzM5//zzg/UVJRLJnweZkyaRSCStjPvvvx+Hw8GiRYti3RSJRNJAnnzySXw+H/fdd1+smyKRSGKANNIkEomklZGZmcmSJUukF00iOYZJTk7mtddei6qWoEQiaX3IcEeJRCKRSCSthtYS7iiRSP7cSCNNIpFIJBKJRCKRSFoQMtxRIpFIJBKJRCKRSFoQ0kiTSCQSiUQikUgkkhaENNIkEolEIpFIJBKJpAUhjTSJRCKRSCQSiUQiaUFII00ikUgkEolEIpFIWhDSSJNIJBKJRCKRSCSSFoQ00iQSiUQikUgkEomkBSGNNIlEIpFIJBKJRCJpQfw/kmpvCc6nHZ4AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "age_avg_charges = df.groupby('age')['charges'].mean().reset_index()\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(age_avg_charges['age'], age_avg_charges['charges'], color='blue', edgecolor='black', s=80, alpha=0.7)\n",
        "plt.title('Promedio de gastos en salud por edad', fontsize=16)\n",
        "plt.xlabel('Edad', fontsize=14)\n",
        "plt.ylabel('Promedio de Charges (Gastos en Salud)', fontsize=14)\n",
        "plt.grid(True)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 571
        },
        "outputId": "064b7a7a-3499-44fe-9054-8998ec1ebb9f",
        "id": "7uN_zybWIXgb"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "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pIWEhEAkEhnUVqPRGPMWREREREREzZJRSdqSJUsqTdKKioqQkZGBo0ePIjw8HH369KlzgERERERERM2JUUnasmXLql2/e/duTJ8+Ha+++qoxuyciIiIiImq26qVwyMSJEzFkyBAsWrSoPnZPRERERETUZNVbdccuXbogPT29vnZPRERERETUJNVbkvbDDz/AyooV/omIiIiIiGrDqDFpOTk5lS5Xq9W4cuUKtmzZgm+//Rbjxo2rS2xERERERETNjlFJmq+vb7Ul+AVBgL+/P9566y2jAyMiIiIiImqOjErSnnnmmUqTNCsrK7Rs2RJ9+/bF2LFjYWtrW+cAiYiIiIiImhOjkrQtW7aYOAwiIiIiIiIC6rFwCBEREREREdUekzQiIiIiIiILYlB3x/bt2xu1c5FIhMzMTKO2JSIiIiIiao4MStLKysqqreZYFUEQar0NERERERFRc2ZQkpadnV3PYRARERERERHAMWlEREREREQWhUkaERERERGRBTFqnjStvLw8HD58GFevXkVpaWmF9SKRCK+88kpd3oKIiIiIiKhZMTpJi42Nxfr166HRaHTLBEHQFRjR/ptJGhERERERkeGM6u6YkJCANWvWYMiQIdi9ezcEQcC0adPw6aef4rnnnoNEIkFERAS+/fZbU8dLRERERETUpBn1JO3DDz+Er68vvvrqK1hZ3c/zfH19MWnSJEyaNAmRkZF4/PHHERERYdJgiYiIiIiImjqjnqT98ssvCAsL0yVoAKBWq3X/Hjx4MMLDw7F69eq6R0hERERERNSMGF3d0dnZWfdvBwcHFBQU6K3v1KkTfvzxR6MDIyIiIiIiao6MStLatm2LvLw83Wt/f3+cOnVKr83Fixfh4OBQt+iIiIiIiIiaGaOStAEDBuDkyZO612PHjsUPP/yAZ599FikpKVi0aBG++uorDBo0yGSBEhERERERNQdGFQ55+umncfXqVfzxxx9o164dYmNj8eWXXyIhIQEfffQRBEGAr68vVq1aZep4iYiIiIiImjSjkrSQkBCEhIToXrdo0QInT57E559/jszMTLRr1w6jR49md0ciIiIiIqJaMnoy6wdJpVJMnDjRVLsjIiIiIiJqlkyWpKnVasjlcgBAt27dIJVKTbVrIiIiIiKiZsPgwiFZWVnYtGkTfv311wrrvvzyS7Rt2xZ9+vRBnz590Lp1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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tras realizar estos dos gráficos de dispersión, podemos sacar conclusiones interesantes. Encontramos que no existe una relación apartente entre las variables *BMI* y *Charges*, lo que significa que, pese a tener un Índice de Masa Corporal más alto, el gasto en salud de las personas no aumenta. Por el contrario, a la hora de contrastar las variables *age* y *charges*, si encontramos una posible relación directa que notifica que, a medida que la persona es mayor, sus gastos en salud aumenta. Cabe destacar que se han utilizado los promedios de gastos en salud según IMC y edad, con la finalidad exclusiva de hacer el gráfico más comprensible y fácil de interpretar."
      ],
      "metadata": {
        "id": "IFrGE0y3Iu2k"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Exploración estadística de variables categoricas."
      ],
      "metadata": {
        "id": "nvRN8nbUK6Zs"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploración numérica"
      ],
      "metadata": {
        "id": "2d12FJxFLEVf"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df['sex'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "tUkCybWsLDtt",
        "outputId": "a46098cb-3ded-4fa7-d7a5-572dff132f7c"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "sex\n",
              "male      676\n",
              "female    662\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>male</th>\n",
              "      <td>676</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>female</th>\n",
              "      <td>662</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 44
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['smoker'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "ZmICMlzwLeO9",
        "outputId": "e4eba67b-53c1-4e18-88a2-56fa4d6b8f69"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smoker\n",
              "no     1064\n",
              "yes     274\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoker</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>no</th>\n",
              "      <td>1064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>yes</th>\n",
              "      <td>274</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['region'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 241
        },
        "id": "3bQmo58pLpKN",
        "outputId": "23ced82a-a744-4d56-c850-7a553bf34baf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "region\n",
              "southeast    364\n",
              "southwest    325\n",
              "northwest    325\n",
              "northeast    324\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>southeast</th>\n",
              "      <td>364</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>southwest</th>\n",
              "      <td>325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>northwest</th>\n",
              "      <td>325</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>northeast</th>\n",
              "      <td>324</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 46
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Exploración visual: Countplots, piecharts y gráficos de barra."
      ],
      "metadata": {
        "id": "snqPRwjMMgCy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(8, 6))\n",
        "sns.countplot(data=df, x='sex', hue='region')\n",
        "plt.title('Distribución de Sex por Region', fontsize=15)\n",
        "plt.xlabel('Sexo', fontsize=12)\n",
        "plt.ylabel('Conteo', fontsize=12)\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 572
        },
        "id": "a8aSgpttNb8c",
        "outputId": "ecd417f3-41c1-4a5f-f958-cba6c728979a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este *countplot*, se aprecia la cantidad de individuos femeninos y masculinos presentes en cada región comprendida en el censo. Como conclusión, vemos que la predominante -para ambos casos- es la región sudeste."
      ],
      "metadata": {
        "id": "wlLMMuhfN23K"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "smoker_counts = df['smoker'].value_counts()\n",
        "plt.figure(figsize=(6, 6))\n",
        "plt.pie(smoker_counts, labels=smoker_counts.index, autopct='%1.1f%%', colors=['lightcoral', 'lightskyblue'], startangle=90)\n",
        "plt.title('Distribución de Smoker (Fumadores) (Sí o No)', fontsize=15)\n",
        "plt.axis('equal')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 523
        },
        "id": "EeRQSc_hOOrf",
        "outputId": "f39ee701-a9e9-4c94-eb6d-cff690056a98"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 600x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Este *piechart* es útil ya que la columna \"smoker\" cuenta con dos variables posibles (\"Si\" y \"No\"). Este gráfico nos muestra que casi un 80% de la población censada no consume tabaco, por los que nos da un parámetro acerca de su estilo de vida."
      ],
      "metadata": {
        "id": "cs8pv_cJO12q"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Limpieza de datos.***"
      ],
      "metadata": {
        "id": "7QLn0Ay9aVAy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.isnull().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 304
        },
        "id": "6EtDS3DVa4tW",
        "outputId": "4b79ea89-b494-4891-915c-987429831538"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "age         0\n",
              "sex         0\n",
              "bmi         0\n",
              "children    0\n",
              "smoker      0\n",
              "region      0\n",
              "charges     0\n",
              "dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>children</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoker</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>charges</th>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x9UWd1oHa_jZ",
        "outputId": "ab8bade9-c580-4a36-f503-083582da7a24"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "1"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1=df['age'].quantile(0.25)\n",
        "Q3=df['age'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "outliers = df ['age'][(df['age'] < Q1 - 1.5 * IQR) | (df['age'] > Q3 + 1.5 * IQR)]\n",
        "print(outliers)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "DmbZeU6DcH3l",
        "outputId": "6e5d0edc-9f95-45c3-90ff-e55d8ec403b8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Series([], Name: age, dtype: int64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1=df['bmi'].quantile(0.25)\n",
        "Q3=df['bmi'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "outliers = df ['bmi'][(df['bmi'] < Q1 - 1.5 * IQR) | (df['bmi'] > Q3 + 1.5 * IQR)]\n",
        "print(outliers)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Rv-UFxPQcwPD",
        "outputId": "82022b35-1b9e-4174-f63e-9a92ff56f8a3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "116     49.06\n",
            "286     48.07\n",
            "401     47.52\n",
            "543     47.41\n",
            "847     50.38\n",
            "860     47.60\n",
            "1047    52.58\n",
            "1088    47.74\n",
            "1317    53.13\n",
            "Name: bmi, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1=df['children'].quantile(0.25)\n",
        "Q3=df['children'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "outliers = df ['children'][(df['children'] < Q1 - 1.5 * IQR) | (df['children'] > Q3 + 1.5 * IQR)]\n",
        "print(outliers)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PFNqyGnOc9a6",
        "outputId": "844c81aa-d83b-4a55-cf1f-b9737421e78b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Series([], Name: children, dtype: int64)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "Q1=df['charges'].quantile(0.25)\n",
        "Q3=df['charges'].quantile(0.75)\n",
        "IQR = Q3 - Q1\n",
        "outliers = df ['charges'][(df['charges'] < Q1 - 1.5 * IQR) | (df['charges'] > Q3 + 1.5 * IQR)]\n",
        "print(outliers)\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "sDezU5XtdDq_",
        "outputId": "5ff76ba4-c7fd-4e1c-d85c-9a12f0b24d83"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "14      39611.75770\n",
            "19      36837.46700\n",
            "23      37701.87680\n",
            "29      38711.00000\n",
            "30      35585.57600\n",
            "           ...     \n",
            "1300    62592.87309\n",
            "1301    46718.16325\n",
            "1303    37829.72420\n",
            "1313    36397.57600\n",
            "1323    43896.37630\n",
            "Name: charges, Length: 139, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tras aplicar esta sentencia, con la finalidad de identificar valores extremos que perjudiquen el análisis de los datos y la posterior funcionalidad de los modelos de *machine learning*, podemos concluir que existen outliers en las columnas *BMI* y *charges*, corroborando lo que previamente arrojaron los *boxplot* que fueron realizados."
      ],
      "metadata": {
        "id": "NEWH7S0ydT9Y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Manipulación de limpieza."
      ],
      "metadata": {
        "id": "ZiAJLQVpfXVP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df.drop_duplicates(inplace=True)"
      ],
      "metadata": {
        "id": "6fyTi5e3fa37"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean = df[~((df['bmi'] < Q1 - 1.5 * IQR) | (df['bmi'] > Q3 + 1.5 * IQR))]"
      ],
      "metadata": {
        "id": "fpxiYN1EgmCG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean = df[~((df['charges'] < Q1 - 1.5 * IQR) | (df['charges'] > Q3 + 1.5 * IQR))]"
      ],
      "metadata": {
        "id": "igY5V_Y5g0rg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filas_original = len(df)"
      ],
      "metadata": {
        "id": "ERlWekS9MeXU"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "filas_clean = len(df_clean)"
      ],
      "metadata": {
        "id": "2ZqBYjROM9Yj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(f\"Número de filas en el DataFrame original: {filas_original}\")\n",
        "print(f\"Número de filas en el DataFrame limpio: {filas_clean}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4MyXoyhyNC14",
        "outputId": "5c9256aa-7192-4dc2-a9d8-2b02869ab068"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Número de filas en el DataFrame original: 1337\n",
            "Número de filas en el DataFrame limpio: 1198\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Eliminando los valores extremos de las columnas *\"BMI\"* y *\"Charges\"*, se podría hacer un análisis más representativo del posible gasto en salud en la población estadounidense, teniendo en cuenta valores de índice de masa corporal (BMI) dentro de los límites estadísticos inferiores y superiores."
      ],
      "metadata": {
        "id": "faBGGFvYhl3F"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean = df[(df['charges'] >= Q1) & (df['charges'] <= Q3)]\n"
      ],
      "metadata": {
        "id": "TQEG8fwJNeZF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean = df[(df['bmi'] >= Q1) & (df['bmi'] <= Q3)]"
      ],
      "metadata": {
        "id": "bJmL8wWAQC0x"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df_clean['bmi'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 452
        },
        "id": "nO-kLh-_jPhV",
        "outputId": "4d0a3f13-ebd1-4731-b3f2-4963e3f142ae"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: >"
            ]
          },
          "metadata": {},
          "execution_count": 50
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "sns.boxplot(df_clean['charges'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 428
        },
        "id": "PQmsGhQujVLf",
        "outputId": "0061898f-4493-4898-b2c0-a04d17fe687e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<Axes: ylabel='charges'>"
            ]
          },
          "metadata": {},
          "execution_count": 37
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAk0AAAGKCAYAAAAR/3XJAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAoq0lEQVR4nO3dfVjUdb7/8dewCGMWA+QBnF0gu/Emw5vEZXG9qSNHNI5l69FMutlrOVKbtJleaqay1qauqJVmZeypo52jm7ln5TJLk6MVHSVUijXRUFtWPLkD/RaZEUpE+f7+6Mf316xmHwmbAZ+P65prnfl8Zub9da+ueTrzZXBYlmUJAAAAFxQS6AEAAADaA6IJAADAANEEAABggGgCAAAwQDQBAAAYIJoAAAAMEE0AAAAGiCYAAAADoYEeoKNobm7W8ePHddVVV8nhcAR6HAAAYMCyLJ08eVJut1shIRd+L4loaiPHjx9XfHx8oMcAAACtcOzYMf3oRz+64B6iqY1cddVVkr76S4+IiAjwNAAAwITP51N8fLz9On4hRFMbaflILiIigmgCAKCdMTm1hhPBAQAADBBNAAAABogmAAAAA0QTAACAAaIJAADAANEEAABggGgCAAAwQDQBAAAYIJoAAAAMEE0AAAAGiCYAAAADRBMAAIABfmEvEKROnTqlqqqqQI8BBKWEhAQ5nc5Aj4HLDNEEBKmqqiplZ2cHegwgKOXn56tHjx6BHgOXGaIJCFIJCQnKz88P9BiQdPToUS1YsEBz5sxRYmJioMeBvvrvA/i+EU1AkHI6nfxLOsgkJiby/wlwGeNEcAAAAANEEwAAgAGiCQAAwADRBAAAYIBoAgAAMEA0AQAAGCCaAAAADBBNAAAABogmAAAAA0QTAACAAaIJAADAANEEAABgIKDRVFRUpDFjxsjtdsvhcKigoOCcPQcPHtTtt98ul8ulLl26aNCgQaqqqrLXT506pSlTpujqq6/WlVdeqXHjxqm6utrvMaqqqpSRkaErrrhCMTExmjFjhs6cOeO3591339XNN9+s8PBwXX/99Vq9evWlOGQAANBOBTSaGhoa1K9fPz3//PPnXf/00081ZMgQ9erVS++++6727dunefPmyel02nseffRRvfHGG9qwYYPee+89HT9+XD/72c/s9bNnzyojI0OnT5/Wrl27tGbNGq1evVq5ubn2nsrKSmVkZOjWW29VWVmZpk6dqn/913/V22+/fekOHgAAtC9WkJBkbdy40e+2u+66y7rnnnu+8T51dXVWp06drA0bNti3HTx40JJkFRcXW5ZlWW+99ZYVEhJieTwee8+LL75oRUREWI2NjZZlWdbMmTOtPn36nPPc6enpxvN7vV5LkuX1eo3vA6B9qKiosIYPH25VVFQEehQAbexiXr+D9pym5uZmvfnmm+rRo4fS09MVExOjlJQUv4/wSktL1dTUpLS0NPu2Xr16KSEhQcXFxZKk4uJiJSUlKTY21t6Tnp4un8+n8vJye8/XH6NlT8tjnE9jY6N8Pp/fBQAAdFxBG001NTWqr6/Xb3/7W40aNUrbtm3TnXfeqZ/97Gd67733JEkej0dhYWGKjIz0u29sbKw8Ho+95+vB1LLesnahPT6fT19++eV551u0aJFcLpd9iY+P/87HDAAAglfQRlNzc7Mk6Y477tCjjz6q/v3767HHHtM///M/a9WqVQGeTpo9e7a8Xq99OXbsWKBHAgAAl1DQRlPXrl0VGhqqG2+80e/23r172z89FxcXp9OnT6uurs5vT3V1teLi4uw9f//TdC3Xv21PRESEOnfufN75wsPDFRER4XcBAAAdV9BGU1hYmAYNGqSKigq/2w8dOqTExERJ0sCBA9WpUydt377dXq+oqFBVVZVSU1MlSampqfr4449VU1Nj7yksLFRERIQdZKmpqX6P0bKn5TEAAABCA/nk9fX1OnLkiH29srJSZWVlio6OVkJCgmbMmKG77rpLw4YN06233qqtW7fqjTfe0LvvvitJcrlcysrK0rRp0xQdHa2IiAg9/PDDSk1N1U9+8hNJ0siRI3XjjTfq3nvvVV5enjwej+bOnaspU6YoPDxckvTggw9q5cqVmjlzpn7xi19ox44dev311/Xmm29+738nAAAgSH0PP833jd555x1L0jmX+++/397z8ssvW9dff73ldDqtfv36WQUFBX6P8eWXX1oPPfSQFRUVZV1xxRXWnXfeaf31r3/12/OXv/zFGj16tNW5c2era9eu1vTp062mpqZzZunfv78VFhZmXXvttda///u/X9Sx8JUDQMfFVw4AHdfFvH47LMuyAthsHYbP55PL5ZLX6+X8JqCDOXTokLKzs5Wfn68ePXoEehwAbehiXr+D9pwmAACAYEI0AQAAGCCa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8XAAAABBp1XRNGHCBK1cuVKS9OWXXyo5OVkTJkxQ37599V//9V9tOiAAAEAwaFU0FRUVaejQoZKkjRs3yrIs1dXVacWKFXrqqafadEAAAIBg0Kpo8nq9io6OliRt3bpV48aN0xVXXKGMjAwdPny4TQcEAAAIBq2Kpvj4eBUXF6uhoUFbt27VyJEjJUknTpyQ0+ls0wEBAACCQau+EXzq1KnKzMzUlVdeqYSEBPtXmhQVFSkpKakt5wMAAAgKrYqmhx56SD/+8Y917Ngx/dM//ZNCQr56w+raa6/lnCYAANAhtfp3zyUnJ6tv376qrKzUddddp9DQUGVkZLTlbAAAAEGjVec0ffHFF8rKytIVV1yhPn36qKqqSpL08MMP67e//W2bDggAABAMWhVNs2fP1p/+9Ce9++67fid+p6Wlaf369W02HAAAQLBo1cdzBQUFWr9+vX7yk5/I4XDYt/fp00effvppmw0HAAAQLFr1TtPnn3+umJiYc25vaGjwiygAAICOolXRlJycrDfffNO+3hJK//Zv/6bU1NS2mQwAACCItOrjuYULF2r06NE6cOCAzpw5o+XLl+vAgQPatWuX3nvvvbaeEQAAIOBa9U7TkCFDVFZWpjNnzigpKUnbtm1TTEyMiouLNXDgwLaeEQAAIOBa/T1N1113nX73u9+15SwAAABBq1XR5PP5znu7w+FQeHi4wsLCvtNQAAAAwaZV0RQZGXnBn5L70Y9+pJ///Of69a9/bf+KFQAAgPasVdG0evVqzZkzRz//+c/14x//WJK0e/durVmzRnPnztXnn3+upUuXKjw8XI8//nibDgwAABAIrYqmNWvWaNmyZZowYYJ925gxY5SUlKSXXnpJ27dvV0JCghYsWEA0AQCADqFVn53t2rVLAwYMOOf2AQMGqLi4WNJXP2HX8jvpAAAA2rtWRVN8fLxefvnlc25/+eWXFR8fL0n629/+pqioqO82HQAAQJBo1cdzS5cu1fjx47VlyxYNGjRIkrR371598skn+sMf/iBJ2rNnj+666662mxQAACCAWhVNt99+uyoqKvTSSy+poqJCkjR69GgVFBTommuukST98pe/bLMhAQAAAu2io6mpqUmjRo3SqlWrtGjRoksxEwAAQNC56HOaOnXqpH379l2KWQAAAIJWq04Ev+eee857IjgAAEBH1apzms6cOaNX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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "*Nota = Chequeé la cantidad de filas del df original y el df clean y, evidentemente, estaba bien realizada la limpieza de outliers, que antes, me continúaban apareciendo en los *boxplots* pese a utilizar la sentencia correcta y haberlos eliminado. Ahora, corroboré que esté bien hecho el trabajo y utilicé el código que usted me recomendó para graficar los *boxplot* del df clean. El problema es que, con ese código que no tiene en cuenta valores mayores al Q1 pero menores al Q3, no existen valores a graficar. Por ende, el gráfico se ve vacío. ¿Es correcto lo que realicé?\n"
      ],
      "metadata": {
        "id": "Oyy-2c-COlfV"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#***Modelo de Machine Learning utilizado.***"
      ],
      "metadata": {
        "id": "pJ1R7lRlGt_3"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Dado al tópico elegido y al contexto del mismo, donde el US Census Bureau intenta precedir el gasto en salud de los pacientes relacionando el estilo de vida e historial clínico de los mismos, se utilizará un modelo de aprendizaje supervisado basado en una regresión lineal, método estadístico útil para predecir valores numéricos. En este caso, el valor target será el posible gasto en salud de cada uno de los pacientes."
      ],
      "metadata": {
        "id": "TGHL1CWYHJEx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "#***Preparación de datos***"
      ],
      "metadata": {
        "id": "FsKV2KycKRF1"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Feature Encoding."
      ],
      "metadata": {
        "id": "ZgWtjJQVNtxr"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se realizará una codificación de las variables categóricas (en este caso *sex, smoker y region*) para transformarlas en variables cuantitativas y, de esta manera, poder trabajar con ellas en nuestro modelo de aprendizaje. Se utilizará el método de *Label Encoding*.\n",
        "\n",
        "El dataset no tiene valores nulos, por lo tanto ya está óptimo para comenzar a trabajar."
      ],
      "metadata": {
        "id": "U8nPFP3GN2RI"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "from sklearn.preprocessing import LabelEncoder"
      ],
      "metadata": {
        "id": "zJMMI2OJQJb2"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "headers = ['age', 'sex', 'bmi', 'children', 'smoker', 'region', 'charges']\n",
        "df_clean=pd.read_csv('/content/drive/MyDrive/insurance.csv')"
      ],
      "metadata": {
        "id": "KOTcA7pFTscP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_clean.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FZ94GQGaVvlx",
        "outputId": "cb0617b6-46cf-4b47-e8af-ee7732d01e43"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   age     sex     bmi  children smoker     region      charges\n",
            "0   19  female  27.900         0    yes  southwest  16884.92400\n",
            "1   18    male  33.770         1     no  southeast   1725.55230\n",
            "2   28    male  33.000         3     no  southeast   4449.46200\n",
            "3   33    male  22.705         0     no  northwest  21984.47061\n",
            "4   32    male  28.880         0     no  northwest   3866.85520\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_clean.info())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "A6Q2XisOV1JB",
        "outputId": "feef2930-2126-45d0-ef23-b87def12b402"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1338 entries, 0 to 1337\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       1338 non-null   int64  \n",
            " 1   sex       1338 non-null   object \n",
            " 2   bmi       1338 non-null   float64\n",
            " 3   children  1338 non-null   int64  \n",
            " 4   smoker    1338 non-null   object \n",
            " 5   region    1338 non-null   object \n",
            " 6   charges   1338 non-null   float64\n",
            "dtypes: float64(2), int64(2), object(3)\n",
            "memory usage: 73.3+ KB\n",
            "None\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "En este paso, se detectan 3 columnas tipo \"object\": *sex, smoker y region*. Estas 3 columnas, como fue anteriormente mencionado, deberán ser codificadas en variables numéricas para poder trabajar con el modelo de aprendizaje."
      ],
      "metadata": {
        "id": "bc8zUiD8V8r2"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "label_encoder = LabelEncoder()\n",
        "for column in df_clean.select_dtypes(include=['object']).columns:\n",
        "    df_clean[column] = label_encoder.fit_transform(df_clean[column])\n",
        "    print(f\"Column {column} has been encoded\")"
      ],
      "metadata": {
        "id": "6ZcZYkwWcXbp"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_clean.head())"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jhOuHjzOc7eh",
        "outputId": "ec4eb279-36f9-44bb-bd12-16e6947adcfe"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   age  sex     bmi  children  smoker  region      charges\n",
            "0   19    0  27.900         0       1       3  16884.92400\n",
            "1   18    1  33.770         1       0       2   1725.55230\n",
            "2   28    1  33.000         3       0       2   4449.46200\n",
            "3   33    1  22.705         0       0       1  21984.47061\n",
            "4   32    1  28.880         0       0       1   3866.85520\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean.info()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ExyBURyndnVx",
        "outputId": "b0e2b258-820b-4aa0-8683-b35983e76acc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 1338 entries, 0 to 1337\n",
            "Data columns (total 7 columns):\n",
            " #   Column    Non-Null Count  Dtype  \n",
            "---  ------    --------------  -----  \n",
            " 0   age       1338 non-null   int64  \n",
            " 1   sex       1338 non-null   int64  \n",
            " 2   bmi       1338 non-null   float64\n",
            " 3   children  1338 non-null   int64  \n",
            " 4   smoker    1338 non-null   int64  \n",
            " 5   region    1338 non-null   int64  \n",
            " 6   charges   1338 non-null   float64\n",
            "dtypes: float64(2), int64(5)\n",
            "memory usage: 73.3 KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_clean.corr()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 269
        },
        "id": "4YcnkaPO1XDU",
        "outputId": "bce6cc79-eed4-4b30-9317-0b73ba5f69ca"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "               age       sex       bmi  children    smoker    region   charges\n",
              "age       1.000000 -0.020856  0.109272  0.042469 -0.025019  0.002127  0.299008\n",
              "sex      -0.020856  1.000000  0.046371  0.017163  0.076185  0.004588  0.057292\n",
              "bmi       0.109272  0.046371  1.000000  0.012759  0.003750  0.157566  0.198341\n",
              "children  0.042469  0.017163  0.012759  1.000000  0.007673  0.016569  0.067998\n",
              "smoker   -0.025019  0.076185  0.003750  0.007673  1.000000 -0.002181  0.787251\n",
              "region    0.002127  0.004588  0.157566  0.016569 -0.002181  1.000000 -0.006208\n",
              "charges   0.299008  0.057292  0.198341  0.067998  0.787251 -0.006208  1.000000"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-601cdc50-cc16-4288-a320-8e2d317372aa\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>age</th>\n",
              "      <th>sex</th>\n",
              "      <th>bmi</th>\n",
              "      <th>children</th>\n",
              "      <th>smoker</th>\n",
              "      <th>region</th>\n",
              "      <th>charges</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>age</th>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.020856</td>\n",
              "      <td>0.109272</td>\n",
              "      <td>0.042469</td>\n",
              "      <td>-0.025019</td>\n",
              "      <td>0.002127</td>\n",
              "      <td>0.299008</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sex</th>\n",
              "      <td>-0.020856</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.046371</td>\n",
              "      <td>0.017163</td>\n",
              "      <td>0.076185</td>\n",
              "      <td>0.004588</td>\n",
              "      <td>0.057292</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bmi</th>\n",
              "      <td>0.109272</td>\n",
              "      <td>0.046371</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.012759</td>\n",
              "      <td>0.003750</td>\n",
              "      <td>0.157566</td>\n",
              "      <td>0.198341</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>children</th>\n",
              "      <td>0.042469</td>\n",
              "      <td>0.017163</td>\n",
              "      <td>0.012759</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>0.007673</td>\n",
              "      <td>0.016569</td>\n",
              "      <td>0.067998</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoker</th>\n",
              "      <td>-0.025019</td>\n",
              "      <td>0.076185</td>\n",
              "      <td>0.003750</td>\n",
              "      <td>0.007673</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.002181</td>\n",
              "      <td>0.787251</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>region</th>\n",
              "      <td>0.002127</td>\n",
              "      <td>0.004588</td>\n",
              "      <td>0.157566</td>\n",
              "      <td>0.016569</td>\n",
              "      <td>-0.002181</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>-0.006208</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>charges</th>\n",
              "      <td>0.299008</td>\n",
              "      <td>0.057292</td>\n",
              "      <td>0.198341</td>\n",
              "      <td>0.067998</td>\n",
              "      <td>0.787251</td>\n",
              "      <td>-0.006208</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-601cdc50-cc16-4288-a320-8e2d317372aa')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-601cdc50-cc16-4288-a320-8e2d317372aa button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-601cdc50-cc16-4288-a320-8e2d317372aa');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a8bb7ca1-bbf5-42da-984f-26f38e07738a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8bb7ca1-bbf5-42da-984f-26f38e07738a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a8bb7ca1-bbf5-42da-984f-26f38e07738a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df_clean\",\n  \"rows\": 7,\n  \"fields\": [\n    {\n      \"column\": \"age\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3700017075978636,\n        \"min\": -0.02501875153628507,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          1.0,\n          -0.020855872182863337,\n          0.0021273131073653523\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"sex\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.368063024811697,\n        \"min\": -0.020855872182863337,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.020855872182863337,\n          1.0,\n          0.004588385485136127\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"bmi\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.35234150405769615,\n        \"min\": 0.0037504259049804325,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.1092718815485351,\n          0.046371150646294546,\n          0.15756584854084824\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"children\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.368205434405392,\n        \"min\": 0.00767312030771111,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.04246899855884958,\n          0.017162977748757323,\n          0.01656944563989276\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"smoker\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.4356183134991632,\n        \"min\": -0.02501875153628507,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          -0.02501875153628507,\n          0.07618481692109509,\n          -0.0021806820409346773\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.37166054714985103,\n        \"min\": -0.006208234909444468,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.0021273131073653523,\n          0.004588385485136127,\n          1.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"charges\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.39392685701224367,\n        \"min\": -0.006208234909444468,\n        \"max\": 1.0,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          0.299008193330648,\n          0.05729206220202543,\n          -0.006208234909444468\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "source": [
        "df_clean['smoker'].value_counts()"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "sZWbSLHTeD-0",
        "outputId": "90973b54-cec8-4581-87a0-1b5c9429b0a2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "smoker\n",
              "0    1064\n",
              "1     274\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>smoker</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1064</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>274</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.preprocessing import OrdinalEncoder"
      ],
      "metadata": {
        "id": "AO50mIvGeSaV"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ord_enc = OrdinalEncoder()\n",
        "df_clean['smoker'] = ord_enc.fit_transform(df_clean[['smoker']])\n",
        "print(df_clean['smoker'])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0fX4WX5deiPa",
        "outputId": "9ab0e053-e6c4-4efe-acdf-4859db87f4e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0       1.0\n",
            "1       0.0\n",
            "2       0.0\n",
            "3       0.0\n",
            "4       0.0\n",
            "       ... \n",
            "1333    0.0\n",
            "1334    0.0\n",
            "1335    0.0\n",
            "1336    0.0\n",
            "1337    1.0\n",
            "Name: smoker, Length: 1338, dtype: float64\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Feature Selection."
      ],
      "metadata": {
        "id": "00TwC9bYe7yf"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Se aislarán las categorías más relevantes para utilizar en un modelo de aprendizaje que, en este caso, funcione como predictor del gasto médico de los pacientes de los Estados Unidos teniendo en cuenta sus antecedentes médicos y sus hábitos de vida.\n",
        "\n",
        "Para ello, será utilizado el método de *Information Gain.*"
      ],
      "metadata": {
        "id": "cwdUdWxAfErh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.feature_selection import mutual_info_regression"
      ],
      "metadata": {
        "id": "oGZ0Fyv7gVYS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_clean.drop('charges', axis=1)\n",
        "y = df_clean['charges']"
      ],
      "metadata": {
        "id": "jCHrcsr9gfd8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "information_gains = mutual_info_regression(X, y)"
      ],
      "metadata": {
        "id": "v95BwXrxirBh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "indices_ordenados = np.argsort(information_gains)[::-1]"
      ],
      "metadata": {
        "id": "ocQvnMF2iClS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "information_gains_ordenados = information_gains[indices_ordenados]"
      ],
      "metadata": {
        "id": "mCs-UgX_jMYh"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "nombres_caracteristicas_ordenados = X.columns[indices_ordenados]"
      ],
      "metadata": {
        "id": "vtdfHI3njagL"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(20, 8))\n",
        "plt.bar(range(len(information_gains_ordenados)), information_gains_ordenados, color='skyblue')\n",
        "plt.xlabel('Índice de Característica')\n",
        "plt.ylabel('Ganancia de Información')\n",
        "plt.title('Ganancia de Información por Características')\n",
        "plt.xticks(range(len(information_gains_ordenados)), nombres_caracteristicas_ordenados, rotation=90)\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 507
        },
        "id": "hSWGqOD9jfpy",
        "outputId": "97ab0304-6376-403c-87be-d7f8e5655e7e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "umbral = 0.2\n",
        "caracteristicas_seleccionadas = X.columns[information_gains >= umbral]"
      ],
      "metadata": {
        "id": "WaImvtqEkj8w"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "finaldata = df_clean [caracteristicas_seleccionadas]\n",
        "finaldata.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TxpBPn86ku8A",
        "outputId": "84607534-a8b9-439c-fff0-c7d4cab98363"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(1338, 2)"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para concluir con la *Feature Selection*, las categorías a tener en cuenta para desarrollar el modelo final serán 2: *Age y smoker*.\n",
        "\n",
        "Es curioso analizar como el Índice de Masa Corporal (BMI), el único dato clínico que aporta el dataset, tiene una relación baja con el gasto en salud. Sin embargo, se realizará una prueba teniendo en cuenta el Índice de Masa Corporal para corroborar cómo se comporta el modelo añadiendo datos que son de interés para el estudio."
      ],
      "metadata": {
        "id": "OY6Gk1Jold_F"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# ***Modelo de aprendizaje supervisado: Regresión lineal.***"
      ],
      "metadata": {
        "id": "F4oI8Y2ixy95"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Tras contextualizar el tópico seleccionado, comprender cada una de las variables que lo componen, realizar una exploración estadística de las mismas, manipular los datos y prepararlos mediante **Feature Encoding y Feature Selection**, se comenzará, como fue anunciado con antelación, con el desarrollo de un modelo de aprendizaje supervisado, realizando una regresión lineal con la finalidad que la misma sea capaz de predecir los posibles gastos en salud de la población estadounidense."
      ],
      "metadata": {
        "id": "MDe3PluUowK6"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Definición de variables."
      ],
      "metadata": {
        "id": "mkcSdWx9qmyG"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Los datos seleccionados deberán ser divididos en el eje x e y. En el eje x, estarán las variables predictoras, mientras que en el eje y se encontrará la variable \"*target*\".\n",
        "\n",
        "\n",
        "\n",
        "*  Eje X = Variables *age, smoker, sex, children*\n",
        "*  Eje Y= Variable *charge* (Que indica el gasto en salud)\n",
        "\n"
      ],
      "metadata": {
        "id": "nT9uaSxJquY9"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "PKC_pHSjsIYP"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X=df_clean[['age', 'smoker']]\n",
        "y=df_clean['charges']"
      ],
      "metadata": {
        "id": "PgzDN1forZXq"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##División de datos."
      ],
      "metadata": {
        "id": "MmNypetlrlla"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test =train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "rS5vjc3wrrez"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "Edo3fKLaslpG"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lrm=LinearRegression()\n",
        "lrm.fit(x_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "FX6CGBFssn4i",
        "outputId": "1cc225f3-2b1f-4457-d8ef-d4f9c589b293"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-1 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-1 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-1 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-1 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-1 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-1 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-1 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-1 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-1 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-1 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-1 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Evaluación del modelo en base a datos de prueba."
      ],
      "metadata": {
        "id": "sQX7BNGptB6U"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ypred=lrm.predict(x_test)"
      ],
      "metadata": {
        "id": "Iajx0U6cuC2t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mse=mean_squared_error(y_test, ypred)\n",
        "print(\"MSE: \", mse)\n",
        "r2_score=r2_score(y_test, ypred)\n",
        "print(\"R2: \", r2_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Cyop0IWNuHNA",
        "outputId": "6c068b5a-8307-4e78-af45-8e62ecaea5b7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE:  38274699.675041825\n",
            "R2:  0.7534620778716639\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al dar un valor cercano a 1, el *R2 Score* nos indica que el modelo explica con cierta exactitud la variabilidad de los datos. Por otra parte, el MSE es la distancia entre la función y el error. A este valor hay que calcularle su raíz cuadrada."
      ],
      "metadata": {
        "id": "EqMeSKOuvZaB"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "rmse = np.sqrt(mse)\n",
        "print(\"RMSE: \", rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "x6dQA3HNvBJ4",
        "outputId": "e839cffc-1f43-4e32-a2f3-af7e8efbab88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE:  6186.654966542244\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Mediante este *prompt*, se logra calcular la raíz cuadrada del MSE. Será interpretado más adelante."
      ],
      "metadata": {
        "id": "wrwz02rAwHgK"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "gastos_medio= y_test.mean()\n",
        "print(\"Media de gastos: \", gastos_medio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ej201QlsvQDK",
        "outputId": "569b29b8-442a-4ec0-aa16-46d31a138cf6"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Media de gastos:  12968.317062869404\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cálculo del error relativo:"
      ],
      "metadata": {
        "id": "EEJQhQYbwwmw"
      }
    },
    {
      "source": [
        "(rmse/y_test.mean())*100"
      ],
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Q2ZMTCdA1VLJ",
        "outputId": "156819cd-84fe-4577-c854-6357cbe03abd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "47.70592002454765"
            ]
          },
          "metadata": {},
          "execution_count": 54
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.DataFrame({\n",
        "  'age': [30],\n",
        "  'smoker': [1]\n",
        "})\n",
        "ynew = lrm.predict(new_data)\n",
        "print(ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RUsN0U6H5uIj",
        "outputId": "a2eb25b1-897f-463e-ca45-ecf258bf96c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[29581.51596231]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.DataFrame({\n",
        "  'age': [30],\n",
        "  'smoker': [0]\n",
        "})\n",
        "ynew = lrm.predict(new_data)\n",
        "print(ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ajJ5YhhA6SUh",
        "outputId": "75493978-7ecc-4012-8a04-74f40a49e861"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5892.91363659]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conclusiones:\n",
        "1. El RMSE es de 6186 USD. Ese es el error promedio que comete el modelo al intentar predecir el gasto en salud de los pacientes de los Estados Unidos teniendo en cuenta sus hábitos y antecedentes en salud.\n",
        "2. **El cálculo de error relativo da un valor elevado de 47.7%, lo que quiere decir, si no comprendo mal, que el RMSE representa dicho porcentaje comparado al gasto medio en salud de la población en estudio. Entiendo que este valor debería rondar el 10%, ¿qué medidas podría tomar para mejorar este valor?**\n",
        "3. Al añadirle nueva data al modelo, este nos arroja una gran diferencia de costo en gasto médico entre personas de 30 años fumadoras y no fumadoras. Para ser exactos, una persona no fumadora de 30 años reduce sus gastos en salud en un **20%** en constraste a una persona de 30 años fumadora.\n"
      ],
      "metadata": {
        "id": "S1laC_BizPAA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "##Segunda prueba."
      ],
      "metadata": {
        "id": "Edldzg9bhQDJ"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Nuevamente, se realizarán las divisiones correspondientes de variables predictoras y variable *target* en el eje x e y, respectivamente. En esta prueba, se añadirá la variable *BMI* a las predictoras."
      ],
      "metadata": {
        "id": "hEkms2C0hek_"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.model_selection import train_test_split"
      ],
      "metadata": {
        "id": "Yivf8GAqh9O7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "X = df_clean [['age', 'smoker', 'bmi']]\n",
        "y = df_clean['charges']"
      ],
      "metadata": {
        "id": "2Pmz7CegiO29"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##División de datos."
      ],
      "metadata": {
        "id": "RVpM_1imi2Ra"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "x_train, x_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "nqooiBCOi7KA"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error\n",
        "from sklearn.metrics import r2_score"
      ],
      "metadata": {
        "id": "Sf3uRgGbjALF"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "lrm=LinearRegression()\n",
        "lrm.fit(x_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 80
        },
        "id": "0gfabqD3jJEm",
        "outputId": "7ed61eef-1965-4b4b-faa6-df364bf5fb02"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "LinearRegression()"
            ],
            "text/html": [
              "<style>#sk-container-id-2 {\n",
              "  /* Definition of color scheme common for light and dark mode */\n",
              "  --sklearn-color-text: black;\n",
              "  --sklearn-color-line: gray;\n",
              "  /* Definition of color scheme for unfitted estimators */\n",
              "  --sklearn-color-unfitted-level-0: #fff5e6;\n",
              "  --sklearn-color-unfitted-level-1: #f6e4d2;\n",
              "  --sklearn-color-unfitted-level-2: #ffe0b3;\n",
              "  --sklearn-color-unfitted-level-3: chocolate;\n",
              "  /* Definition of color scheme for fitted estimators */\n",
              "  --sklearn-color-fitted-level-0: #f0f8ff;\n",
              "  --sklearn-color-fitted-level-1: #d4ebff;\n",
              "  --sklearn-color-fitted-level-2: #b3dbfd;\n",
              "  --sklearn-color-fitted-level-3: cornflowerblue;\n",
              "\n",
              "  /* Specific color for light theme */\n",
              "  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n",
              "  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n",
              "  --sklearn-color-icon: #696969;\n",
              "\n",
              "  @media (prefers-color-scheme: dark) {\n",
              "    /* Redefinition of color scheme for dark theme */\n",
              "    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n",
              "    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n",
              "    --sklearn-color-icon: #878787;\n",
              "  }\n",
              "}\n",
              "\n",
              "#sk-container-id-2 {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 pre {\n",
              "  padding: 0;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-hidden--visually {\n",
              "  border: 0;\n",
              "  clip: rect(1px 1px 1px 1px);\n",
              "  clip: rect(1px, 1px, 1px, 1px);\n",
              "  height: 1px;\n",
              "  margin: -1px;\n",
              "  overflow: hidden;\n",
              "  padding: 0;\n",
              "  position: absolute;\n",
              "  width: 1px;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-dashed-wrapped {\n",
              "  border: 1px dashed var(--sklearn-color-line);\n",
              "  margin: 0 0.4em 0.5em 0.4em;\n",
              "  box-sizing: border-box;\n",
              "  padding-bottom: 0.4em;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-container {\n",
              "  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n",
              "     but bootstrap.min.css set `[hidden] { display: none !important; }`\n",
              "     so we also need the `!important` here to be able to override the\n",
              "     default hidden behavior on the sphinx rendered scikit-learn.org.\n",
              "     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n",
              "  display: inline-block !important;\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-text-repr-fallback {\n",
              "  display: none;\n",
              "}\n",
              "\n",
              "div.sk-parallel-item,\n",
              "div.sk-serial,\n",
              "div.sk-item {\n",
              "  /* draw centered vertical line to link estimators */\n",
              "  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n",
              "  background-size: 2px 100%;\n",
              "  background-repeat: no-repeat;\n",
              "  background-position: center center;\n",
              "}\n",
              "\n",
              "/* Parallel-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item::after {\n",
              "  content: \"\";\n",
              "  width: 100%;\n",
              "  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n",
              "  flex-grow: 1;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel {\n",
              "  display: flex;\n",
              "  align-items: stretch;\n",
              "  justify-content: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  position: relative;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:first-child::after {\n",
              "  align-self: flex-end;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:last-child::after {\n",
              "  align-self: flex-start;\n",
              "  width: 50%;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-parallel-item:only-child::after {\n",
              "  width: 0;\n",
              "}\n",
              "\n",
              "/* Serial-specific style estimator block */\n",
              "\n",
              "#sk-container-id-2 div.sk-serial {\n",
              "  display: flex;\n",
              "  flex-direction: column;\n",
              "  align-items: center;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  padding-right: 1em;\n",
              "  padding-left: 1em;\n",
              "}\n",
              "\n",
              "\n",
              "/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n",
              "clickable and can be expanded/collapsed.\n",
              "- Pipeline and ColumnTransformer use this feature and define the default style\n",
              "- Estimators will overwrite some part of the style using the `sk-estimator` class\n",
              "*/\n",
              "\n",
              "/* Pipeline and ColumnTransformer style (default) */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable {\n",
              "  /* Default theme specific background. It is overwritten whether we have a\n",
              "  specific estimator or a Pipeline/ColumnTransformer */\n",
              "  background-color: var(--sklearn-color-background);\n",
              "}\n",
              "\n",
              "/* Toggleable label */\n",
              "#sk-container-id-2 label.sk-toggleable__label {\n",
              "  cursor: pointer;\n",
              "  display: block;\n",
              "  width: 100%;\n",
              "  margin-bottom: 0;\n",
              "  padding: 0.5em;\n",
              "  box-sizing: border-box;\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:before {\n",
              "  /* Arrow on the left of the label */\n",
              "  content: \"▸\";\n",
              "  float: left;\n",
              "  margin-right: 0.25em;\n",
              "  color: var(--sklearn-color-icon);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {\n",
              "  color: var(--sklearn-color-text);\n",
              "}\n",
              "\n",
              "/* Toggleable content - dropdown */\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content {\n",
              "  max-height: 0;\n",
              "  max-width: 0;\n",
              "  overflow: hidden;\n",
              "  text-align: left;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content pre {\n",
              "  margin: 0.2em;\n",
              "  border-radius: 0.25em;\n",
              "  color: var(--sklearn-color-text);\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-toggleable__content.fitted pre {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n",
              "  /* Expand drop-down */\n",
              "  max-height: 200px;\n",
              "  max-width: 100%;\n",
              "  overflow: auto;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n",
              "  content: \"▾\";\n",
              "}\n",
              "\n",
              "/* Pipeline/ColumnTransformer-specific style */\n",
              "\n",
              "#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator-specific style */\n",
              "\n",
              "/* Colorize estimator box */\n",
              "#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label label.sk-toggleable__label,\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  /* The background is the default theme color */\n",
              "  color: var(--sklearn-color-text-on-default-background);\n",
              "}\n",
              "\n",
              "/* On hover, darken the color of the background */\n",
              "#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "/* Label box, darken color on hover, fitted */\n",
              "#sk-container-id-2 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n",
              "  color: var(--sklearn-color-text);\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Estimator label */\n",
              "\n",
              "#sk-container-id-2 div.sk-label label {\n",
              "  font-family: monospace;\n",
              "  font-weight: bold;\n",
              "  display: inline-block;\n",
              "  line-height: 1.2em;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-label-container {\n",
              "  text-align: center;\n",
              "}\n",
              "\n",
              "/* Estimator-specific */\n",
              "#sk-container-id-2 div.sk-estimator {\n",
              "  font-family: monospace;\n",
              "  border: 1px dotted var(--sklearn-color-border-box);\n",
              "  border-radius: 0.25em;\n",
              "  box-sizing: border-box;\n",
              "  margin-bottom: 0.5em;\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-0);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-0);\n",
              "}\n",
              "\n",
              "/* on hover */\n",
              "#sk-container-id-2 div.sk-estimator:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-2);\n",
              "}\n",
              "\n",
              "#sk-container-id-2 div.sk-estimator.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-2);\n",
              "}\n",
              "\n",
              "/* Specification for estimator info (e.g. \"i\" and \"?\") */\n",
              "\n",
              "/* Common style for \"i\" and \"?\" */\n",
              "\n",
              ".sk-estimator-doc-link,\n",
              "a:link.sk-estimator-doc-link,\n",
              "a:visited.sk-estimator-doc-link {\n",
              "  float: right;\n",
              "  font-size: smaller;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1em;\n",
              "  height: 1em;\n",
              "  width: 1em;\n",
              "  text-decoration: none !important;\n",
              "  margin-left: 1ex;\n",
              "  /* unfitted */\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted,\n",
              "a:link.sk-estimator-doc-link.fitted,\n",
              "a:visited.sk-estimator-doc-link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",
              ".sk-estimator-doc-link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover,\n",
              "div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",
              ".sk-estimator-doc-link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "/* Span, style for the box shown on hovering the info icon */\n",
              ".sk-estimator-doc-link span {\n",
              "  display: none;\n",
              "  z-index: 9999;\n",
              "  position: relative;\n",
              "  font-weight: normal;\n",
              "  right: .2ex;\n",
              "  padding: .5ex;\n",
              "  margin: .5ex;\n",
              "  width: min-content;\n",
              "  min-width: 20ex;\n",
              "  max-width: 50ex;\n",
              "  color: var(--sklearn-color-text);\n",
              "  box-shadow: 2pt 2pt 4pt #999;\n",
              "  /* unfitted */\n",
              "  background: var(--sklearn-color-unfitted-level-0);\n",
              "  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link.fitted span {\n",
              "  /* fitted */\n",
              "  background: var(--sklearn-color-fitted-level-0);\n",
              "  border: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "\n",
              ".sk-estimator-doc-link:hover span {\n",
              "  display: block;\n",
              "}\n",
              "\n",
              "/* \"?\"-specific style due to the `<a>` HTML tag */\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link {\n",
              "  float: right;\n",
              "  font-size: 1rem;\n",
              "  line-height: 1em;\n",
              "  font-family: monospace;\n",
              "  background-color: var(--sklearn-color-background);\n",
              "  border-radius: 1rem;\n",
              "  height: 1rem;\n",
              "  width: 1rem;\n",
              "  text-decoration: none;\n",
              "  /* unfitted */\n",
              "  color: var(--sklearn-color-unfitted-level-1);\n",
              "  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted {\n",
              "  /* fitted */\n",
              "  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n",
              "  color: var(--sklearn-color-fitted-level-1);\n",
              "}\n",
              "\n",
              "/* On hover */\n",
              "#sk-container-id-2 a.estimator_doc_link:hover {\n",
              "  /* unfitted */\n",
              "  background-color: var(--sklearn-color-unfitted-level-3);\n",
              "  color: var(--sklearn-color-background);\n",
              "  text-decoration: none;\n",
              "}\n",
              "\n",
              "#sk-container-id-2 a.estimator_doc_link.fitted:hover {\n",
              "  /* fitted */\n",
              "  background-color: var(--sklearn-color-fitted-level-3);\n",
              "}\n",
              "</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LinearRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;LinearRegression<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.linear_model.LinearRegression.html\">?<span>Documentation for LinearRegression</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>LinearRegression()</pre></div> </div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 42
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Evaluación del modelo en base a datos de prueba."
      ],
      "metadata": {
        "id": "rp9A8VYnjPLM"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ypred=lrm.predict(x_test)"
      ],
      "metadata": {
        "id": "cwVdsSJGjat8"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "mse=mean_squared_error(y_test, ypred)\n",
        "print(\"MSE: \", mse)\n",
        "r2_score=r2_score(y_test, ypred)\n",
        "print(\"R2: \", r2_score)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7wbeU-7Fjc-x",
        "outputId": "45b283fd-62c8-45e7-acd6-30b9468e40f3"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MSE:  34512843.8802279\n",
            "R2:  0.7776932310583374\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al dar un valor cercano a 1, el R2 Score nos indica que el modelo explica con cierta exactitud la variabilidad de los datos. Por otra parte, el MSE es la distancia entre la función y el error. A este valor hay que calcularle su raíz cuadrada."
      ],
      "metadata": {
        "id": "oPAB6UNLjovL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "rmse = np.sqrt(mse)\n",
        "print(\"RMSE: \", rmse)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tObExdJ6jqDl",
        "outputId": "7a8560ca-4a78-49b8-af79-fa97e6e5432b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "RMSE:  5874.763304187489\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "gastos_medio= y_test.mean()\n",
        "print(\"Media de gastos: \", gastos_medio)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "W7GsaJLLj3iP",
        "outputId": "1e22ab62-f17d-4860-9fae-10d3701f9ef2"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Media de gastos:  12968.317062869404\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Cálculo del error relativo."
      ],
      "metadata": {
        "id": "NOJnQhw4j9d5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "(rmse/y_test.mean())*100"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0sTxEOIyj_0N",
        "outputId": "d436b1e4-110a-4d6c-9865-ae759ccc0e73"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "45.30089197933"
            ]
          },
          "metadata": {},
          "execution_count": 47
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.DataFrame({\n",
        "  'age': [30],\n",
        "  'smoker': [1],\n",
        "  'bmi': [30]\n",
        "})\n",
        "ynew = lrm.predict(new_data)\n",
        "print(ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pxsQgW9c8Ae6",
        "outputId": "7df6043b-6014-4330-ae15-0fde8845719e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[29543.38261535]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.DataFrame({\n",
        "  'age': [30],\n",
        "  'smoker': [1],\n",
        "  'bmi': [24]\n",
        "})\n",
        "ynew = lrm.predict(new_data)\n",
        "print(ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ONkQxRc68KKx",
        "outputId": "088d7d44-ac36-4585-b740-6f4bc66c802e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[27584.68122243]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.DataFrame({\n",
        "  'age': [30],\n",
        "  'smoker': [0],\n",
        "  'bmi': [30]\n",
        "})\n",
        "ynew = lrm.predict(new_data)\n",
        "print(ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nWtzmmIH8Efc",
        "outputId": "08ddf106-44be-4b55-b2a3-926315917d5d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[5868.0107687]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "new_data = pd.DataFrame({\n",
        "  'age': [30],\n",
        "  'smoker': [0],\n",
        "  'bmi': [24]\n",
        "})\n",
        "ynew = lrm.predict(new_data)\n",
        "print(ynew)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kK4dN5Ux8IZP",
        "outputId": "0e0e53b9-6f00-4752-d605-39bdbe4b2da8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[3909.30937578]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Conclusiones:\n",
        "1. Al añadir los datos de Índice de Masa Corporal al modelo de aprendizaje, el *RMSE* disminuye a 5874 USD, disminuyendo la distancia entre el modelo y el error en 312 USD.\n",
        "2. En esta segunda prueba, el cálculo de error relativo da 45.3%, disminuyendo en un 2%. Esto significa que el RMSE representa un 45.3% del valor promedio de gastos médicos. De todos modos, sigue siendo un valor elevado.7\n",
        "3. Al agregar nueva data, podemos aseverar que un BMI considerado dentro de los rangos de la \"***normalidad***\" (24 kg/m2) es un factor que tiene cierta importancia a la hora de reducir los gastos médicos. Comparado con un BMI encasillado en el rango de \"***obesidad***\" (30 kg/m2), la disminución de gastos en salud en personas fumadoras es de un **6.7%**, mientras que la disminución de gastos en salud en personas no fumadoras es de un **33.4%**.\n",
        "\n"
      ],
      "metadata": {
        "id": "cca1ONq6kSJt"
      }
    }
  ]
}
